{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\nvar _sliceInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\nvar _reverseInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/reverse\");\nvar _Promise2 = require(\"@babel/runtime-corejs3/core-js-stable/promise\");\nvar _Object$setPrototypeOf = require(\"@babel/runtime-corejs3/core-js-stable/object/set-prototype-of\");\nvar _typeof3 = require(\"@babel/runtime-corejs3/helpers/typeof\");\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\nvar _Object$getPrototypeOf = require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\");\nvar _Object$create = require(\"@babel/runtime-corejs3/core-js-stable/object/create\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _entries = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/entries\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _encode = _interopRequireDefault(require(\"./encode\"));\nvar _promiseUtils = require(\"./promiseUtils\");\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\nfunction _regeneratorRuntime() {\n  \"use strict\";\n\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  _regeneratorRuntime = function () {\n    return exports;\n  };\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    $Symbol = \"function\" == typeof _Symbol ? _Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function (obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = _Object$create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return generator._invoke = function (innerFn, self, context) {\n      var state = \"suspendedStart\";\n      return function (method, arg) {\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\n        if (\"completed\" === state) {\n          if (\"throw\" === method) throw arg;\n          return doneResult();\n        }\n        for (context.method = method, context.arg = arg;;) {\n          var delegate = context.delegate;\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n            context.dispatchException(context.arg);\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n          state = \"executing\";\n          var record = tryCatch(innerFn, self, context);\n          if (\"normal\" === record.type) {\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          }\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n        }\n      };\n    }(innerFn, self, context), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = _Object$getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = _Object$create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    var _context23;\n    _forEachInstanceProperty2(_context23 = [\"next\", \"throw\", \"return\"]).call(_context23, function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof3(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    this._invoke = function (method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (undefined === method) {\n      if (context.delegate = null, \"throw\" === context.method) {\n        if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n      return ContinueSentinel;\n    }\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], _forEachInstanceProperty2(tryLocsList).call(tryLocsList, pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) {\n              if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            }\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return _Object$setPrototypeOf ? _Object$setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = _Object$create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = _Promise2);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    return _reverseInstanceProperty(keys).call(keys), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function (skipTempReset) {\n      var _context24;\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, _forEachInstanceProperty2(_context24 = this.tryEntries).call(_context24, resetTryEntry), !skipTempReset) for (var name in this) {\n        \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+_sliceInstanceProperty2(name).call(name, 1)) && (this[name] = undefined);\n      }\n    },\n    stop: function () {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function (exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function (type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function (record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function (finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    catch: function (tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function (iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\n/**\r\n * Converts a string into a regex that matches it.\r\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\r\n * the text separately.\r\n *\r\n * @param s\r\n * @private\r\n * @returns {string}\r\n */\n\nfunction quote(s\n/*: string*/) /*: string*/\n{\n  return '\\\\Q' + s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q') + '\\\\E';\n}\n/**\r\n * Extracts the class name from queries. If not all queries have the same\r\n * class name an error will be thrown.\r\n *\r\n * @param queries\r\n * @private\r\n * @returns {string}\r\n */\n\nfunction _getClassNameFromQueries(queries\n/*: Array<ParseQuery>*/) /*: ?string*/\n{\n  var className = null;\n  (0, _forEach.default)(queries).call(queries, function (q) {\n    if (!className) {\n      className = q.className;\n    }\n    if (className !== q.className) {\n      throw new Error('All queries must be for the same class.');\n    }\n  });\n  return className;\n}\n/*\r\n * Handles pre-populating the result data of a query with select fields,\r\n * making sure that the data object contains keys for all objects that have\r\n * been requested with a select, so that our cached state updates correctly.\r\n */\n\nfunction handleSelectResult(data\n/*: any*/, select\n/*: Array<string>*/) {\n  var serverDataMask = {};\n  (0, _forEach.default)(select).call(select, function (field) {\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, '.') !== -1;\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\n      // this field was selected, but is missing from the retrieved data\n      data[field] = undefined;\n    } else if (hasSubObjectSelect) {\n      // this field references a sub-object,\n      // so we need to walk down the path components\n      var pathComponents = field.split('.');\n      var _obj = data;\n      var serverMask = serverDataMask;\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\n        // add keys if the expected data is missing\n        if (_obj && !_obj.hasOwnProperty(component)) {\n          _obj[component] = undefined;\n        }\n        if (_obj && (0, _typeof2.default)(_obj) === 'object') {\n          _obj = _obj[component];\n        } //add this path component to the server mask so we can fill it in later if needed\n\n        if (index < arr.length - 1) {\n          if (!serverMask[component]) {\n            serverMask[component] = {};\n          }\n          serverMask = serverMask[component];\n        }\n      });\n    }\n  });\n  if ((0, _keys2.default)(serverDataMask).length > 0) {\n    // When selecting from sub-objects, we don't want to blow away the missing\n    // information that we may have retrieved before. We've already added any\n    // missing selected keys to sub-objects, but we still need to add in the\n    // data for any previously retrieved sub-objects that were not selected.\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\n      id: data.objectId,\n      className: data.className\n    });\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\n  }\n}\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\n  //copy missing elements at this level\n  if (copyThisLevel) {\n    for (var _key in src) {\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\n        dest[_key] = src[_key];\n      }\n    }\n  }\n  for (var _key2 in mask) {\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\n      //traverse into objects as needed\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\n    }\n  }\n}\nfunction handleOfflineSort(a, b, sorts) {\n  var order = sorts[0];\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\n  var isDescending = operator === '-';\n  if (isDescending) {\n    order = order.substring(1);\n  }\n  if (order === '_created_at') {\n    order = 'createdAt';\n  }\n  if (order === '_updated_at') {\n    order = 'updatedAt';\n  }\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\n  }\n  var field1 = a.get(order);\n  var field2 = b.get(order);\n  if (field1 < field2) {\n    return isDescending ? 1 : -1;\n  }\n  if (field1 > field2) {\n    return isDescending ? -1 : 1;\n  }\n  if (sorts.length > 1) {\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\n    return handleOfflineSort(a, b, remainingSorts);\n  }\n  return 0;\n}\n/**\r\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\r\n *\r\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\r\n * most common use case is finding all objects that match a query through the\r\n * <code>find</code> method. for example, this sample code fetches all objects\r\n * of class <code>myclass</code>. it calls a different function depending on\r\n * whether the fetch succeeded or not.\r\n *\r\n * <pre>\r\n * var query = new Parse.Query(myclass);\r\n * query.find().then((results) => {\r\n *   // results is an array of parse.object.\r\n * }).catch((error) =>  {\r\n *  // error is an instance of parse.error.\r\n * });</pre></p>\r\n *\r\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\r\n * known, through the get method. for example, this sample code fetches an\r\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\r\n * different function depending on whether the fetch succeeded or not.\r\n *\r\n * <pre>\r\n * var query = new Parse.Query(myclass);\r\n * query.get(myid).then((object) => {\r\n *     // object is an instance of parse.object.\r\n * }).catch((error) =>  {\r\n *  // error is an instance of parse.error.\r\n * });</pre></p>\r\n *\r\n * <p>a Parse.Query can also be used to count the number of objects that match\r\n * the query without retrieving all of those objects. for example, this\r\n * sample code counts the number of objects of the class <code>myclass</code>\r\n * <pre>\r\n * var query = new Parse.Query(myclass);\r\n * query.count().then((number) => {\r\n *     // there are number instances of myclass.\r\n * }).catch((error) => {\r\n *     // error is an instance of Parse.Error.\r\n * });</pre></p>\r\n *\r\n * @alias Parse.Query\r\n */\n\nvar ParseQuery = /*#__PURE__*/function () {\n  /**\r\n   * @property {string} className\r\n   */\n\n  /**\r\n   * @param {(string | Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\r\n   */\n  function ParseQuery(objectClass\n  /*: string | ParseObject*/) {\n    (0, _classCallCheck2.default)(this, ParseQuery);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"_hint\", void 0);\n    (0, _defineProperty2.default)(this, \"_explain\", void 0);\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\n    if (typeof objectClass === 'string') {\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = objectClass;\n      }\n    } else if (objectClass instanceof _ParseObject.default) {\n      this.className = objectClass.className;\n    } else if (typeof objectClass === 'function') {\n      if (typeof objectClass.className === 'string') {\n        this.className = objectClass.className;\n      } else {\n        var _obj2 = new objectClass();\n        this.className = _obj2.className;\n      }\n    } else {\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\n    }\n    this._where = {};\n    this._include = [];\n    this._exclude = [];\n    this._count = false;\n    this._limit = -1; // negative limit is not sent in the server request\n\n    this._skip = 0;\n    this._readPreference = null;\n    this._includeReadPreference = null;\n    this._subqueryReadPreference = null;\n    this._queriesLocalDatastore = false;\n    this._localDatastorePinName = null;\n    this._extraOptions = {};\n    this._xhrRequest = {\n      task: null,\n      onchange: function () {}\n    };\n  }\n  /**\r\n   * Adds constraint that at least one of the passed in queries matches.\r\n   *\r\n   * @param {Array} queries\r\n   * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n   */\n\n  (0, _createClass2.default)(ParseQuery, [{\n    key: \"_orQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/) /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$or = queryJSON;\n      return this;\n    }\n    /**\r\n     * Adds constraint that all of the passed in queries match.\r\n     *\r\n     * @param {Array} queries\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"_andQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/) /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$and = queryJSON;\n      return this;\n    }\n    /**\r\n     * Adds constraint that none of the passed in queries match.\r\n     *\r\n     * @param {Array} queries\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"_norQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/) /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$nor = queryJSON;\n      return this;\n    }\n    /**\r\n     * Helper for condition queries\r\n     *\r\n     * @param key\r\n     * @param condition\r\n     * @param value\r\n     * @returns {Parse.Query}\r\n     */\n  }, {\n    key: \"_addCondition\",\n    value: function (key\n    /*: string*/, condition\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      if (!this._where[key] || typeof this._where[key] === 'string') {\n        this._where[key] = {};\n      }\n      this._where[key][condition] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\r\n     * Converts string for regular expression at the beginning\r\n     *\r\n     * @param string\r\n     * @returns {string}\r\n     */\n  }, {\n    key: \"_regexStartWith\",\n    value: function (string\n    /*: string*/) /*: string*/\n    {\n      return '^' + quote(string);\n    }\n  }, {\n    key: \"_handleOfflineQuery\",\n    value: function () {\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(params\n      /*: any*/) {\n        var _context,\n          _this2 = this;\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\n        return _regeneratorRuntime().wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _OfflineQuery.default.validateQuery(this);\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                _context3.next = 4;\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\n              case 4:\n                objects = _context3.sent;\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\n                  var object = _ParseObject.default.fromJSON(json, false);\n                  if (json._localId && !json.objectId) {\n                    object._localId = json._localId;\n                  }\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\n                    return null;\n                  }\n                  return object;\n                })).call(_context, function (object) {\n                  return object !== null;\n                });\n                if ((0, _keys.default)(params)) {\n                  keys = (0, _keys.default)(params).split(',');\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\n                  results = (0, _map2.default)(results).call(results, function (object) {\n                    var _context2;\n                    var json = object._toFullJSON();\n                    (0, _forEach.default)(_context2 = (0, _keys2.default)(json)).call(_context2, function (key) {\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\n                        delete json[key];\n                      }\n                    });\n                    return _ParseObject.default.fromJSON(json, false);\n                  });\n                }\n                if (params.order) {\n                  sorts = params.order.split(',');\n                  (0, _sort.default)(results).call(results, function (a, b) {\n                    return handleOfflineSort(a, b, sorts);\n                  });\n                } // count total before applying limit/skip\n\n                if (params.count) {\n                  count = results.length; // total count from response\n                }\n                if (params.skip) {\n                  if (params.skip >= results.length) {\n                    results = [];\n                  } else {\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\n                  }\n                }\n                limit = results.length;\n                if (params.limit !== 0 && params.limit < results.length) {\n                  limit = params.limit;\n                }\n                results = (0, _splice.default)(results).call(results, 0, limit);\n                if (!(typeof count === 'number')) {\n                  _context3.next = 15;\n                  break;\n                }\n                return _context3.abrupt(\"return\", {\n                  results: results,\n                  count: count\n                });\n              case 15:\n                return _context3.abrupt(\"return\", results);\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function _handleOfflineQuery() {\n        return _handleOfflineQuery2.apply(this, arguments);\n      }\n      return _handleOfflineQuery;\n    }()\n    /**\r\n     * Returns a JSON representation of this query.\r\n     *\r\n     * @returns {object} The JSON representation of the query.\r\n     */\n  }, {\n    key: \"toJSON\",\n    value: function () /*: QueryJSON*/\n    {\n      var params\n      /*: QueryJSON*/ = {\n        where: this._where\n      };\n      if (this._include.length) {\n        params.include = this._include.join(',');\n      }\n      if (this._exclude.length) {\n        params.excludeKeys = this._exclude.join(',');\n      }\n      if (this._select) {\n        params.keys = this._select.join(',');\n      }\n      if (this._count) {\n        params.count = 1;\n      }\n      if (this._limit >= 0) {\n        params.limit = this._limit;\n      }\n      if (this._skip > 0) {\n        params.skip = this._skip;\n      }\n      if (this._order) {\n        params.order = this._order.join(',');\n      }\n      if (this._readPreference) {\n        params.readPreference = this._readPreference;\n      }\n      if (this._includeReadPreference) {\n        params.includeReadPreference = this._includeReadPreference;\n      }\n      if (this._subqueryReadPreference) {\n        params.subqueryReadPreference = this._subqueryReadPreference;\n      }\n      if (this._hint) {\n        params.hint = this._hint;\n      }\n      if (this._explain) {\n        params.explain = true;\n      }\n      for (var _key3 in this._extraOptions) {\n        params[_key3] = this._extraOptions[_key3];\n      }\n      return params;\n    }\n    /**\r\n     * Return a query with conditions from json, can be useful to send query from server side to client\r\n     * Not static, all query conditions was set before calling this method will be deleted.\r\n     * For example on the server side we have\r\n     * var query = new Parse.Query(\"className\");\r\n     * query.equalTo(key: value);\r\n     * query.limit(100);\r\n     * ... (others queries)\r\n     * Create JSON representation of Query Object\r\n     * var jsonFromServer = query.fromJSON();\r\n     *\r\n     * On client side getting query:\r\n     * var query = new Parse.Query(\"className\");\r\n     * query.fromJSON(jsonFromServer);\r\n     *\r\n     * and continue to query...\r\n     * query.skip(100).find().then(...);\r\n     *\r\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"withJSON\",\n    value: function (json\n    /*: QueryJSON*/) /*: ParseQuery*/\n    {\n      if (json.where) {\n        this._where = json.where;\n      }\n      if (json.include) {\n        this._include = json.include.split(',');\n      }\n      if ((0, _keys.default)(json)) {\n        this._select = (0, _keys.default)(json).split(',');\n      }\n      if (json.excludeKeys) {\n        this._exclude = json.excludeKeys.split(',');\n      }\n      if (json.count) {\n        this._count = json.count === 1;\n      }\n      if (json.limit) {\n        this._limit = json.limit;\n      }\n      if (json.skip) {\n        this._skip = json.skip;\n      }\n      if (json.order) {\n        this._order = json.order.split(',');\n      }\n      if (json.readPreference) {\n        this._readPreference = json.readPreference;\n      }\n      if (json.includeReadPreference) {\n        this._includeReadPreference = json.includeReadPreference;\n      }\n      if (json.subqueryReadPreference) {\n        this._subqueryReadPreference = json.subqueryReadPreference;\n      }\n      if (json.hint) {\n        this._hint = json.hint;\n      }\n      if (json.explain) {\n        this._explain = !!json.explain;\n      }\n      for (var _key4 in json) {\n        if (json.hasOwnProperty(_key4)) {\n          var _context4;\n          if ((0, _indexOf.default)(_context4 = ['where', 'include', 'keys', 'count', 'limit', 'skip', 'order', 'readPreference', 'includeReadPreference', 'subqueryReadPreference', 'hint', 'explain']).call(_context4, _key4) === -1) {\n            this._extraOptions[_key4] = json[_key4];\n          }\n        }\n      }\n      return this;\n    }\n    /**\r\n     * Static method to restore Parse.Query by json representation\r\n     * Internally calling Parse.Query.withJSON\r\n     *\r\n     * @param {string} className\r\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\r\n     * @returns {Parse.Query} new created query\r\n     */\n  }, {\n    key: \"get\",\n    value:\n    /**\r\n     * Constructs a Parse.Object whose id is already known by fetching data from\r\n     * the server. Unlike the <code>first</code> method, it never returns undefined.\r\n     *\r\n     * @param {string} objectId The id of the object to be fetched.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     *   <li>json: Return raw json without converting to Parse.Object\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the result when\r\n     * the query completes.\r\n     */\n    function (objectId\n    /*: string*/, options\n    /*:: ?: FullOptions*/) /*: Promise<ParseObject>*/\n    {\n      this.equalTo('objectId', objectId);\n      var firstOptions = {};\n      if (options && options.hasOwnProperty('useMasterKey')) {\n        firstOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options && options.hasOwnProperty('sessionToken')) {\n        firstOptions.sessionToken = options.sessionToken;\n      }\n      if (options && options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        firstOptions.context = options.context;\n      }\n      if (options && options.hasOwnProperty('json')) {\n        firstOptions.json = options.json;\n      }\n      return this.first(firstOptions).then(function (response) {\n        if (response) {\n          return response;\n        }\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\n        return _promise.default.reject(errorObject);\n      });\n    }\n    /**\r\n     * Retrieves a list of ParseObjects that satisfy this query.\r\n     *\r\n     * @param {object} options Valid options\r\n     * are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     *   <li>json: Return raw json without converting to Parse.Object\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the results when\r\n     * the query completes.\r\n     */\n  }, {\n    key: \"find\",\n    value: function (options\n    /*:: ?: FullOptions*/) /*: Promise<Array<ParseObject>>*/\n    {\n      var _this3 = this;\n      options = options || {};\n      var findOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n      this._setRequestTask(findOptions);\n      var controller = _CoreManager.default.getQueryController();\n      var select = this._select;\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(this.toJSON());\n      }\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\n        var _context5; // Return generic object when explain is used\n\n        if (_this3._explain) {\n          return response.results;\n        }\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\n          // In cases of relations, the server may send back a className\n          // on the top level of the payload\n          var override = response.className || _this3.className;\n          if (!data.className) {\n            data.className = override;\n          } // Make sure the data object contains keys for all objects that\n          // have been requested with a select, so that our cached state\n          // updates correctly.\n\n          if (select) {\n            handleSelectResult(data, select);\n          }\n          if (options.json) {\n            return data;\n          } else {\n            return _ParseObject.default.fromJSON(data, !select);\n          }\n        });\n        var count = response.count;\n        if (typeof count === 'number') {\n          return {\n            results: results,\n            count: count\n          };\n        } else {\n          return results;\n        }\n      });\n    }\n    /**\r\n     * Retrieves a complete list of ParseObjects that satisfy this query.\r\n     * Using `eachBatch` under the hood to fetch all the valid objects.\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is resolved with the results when\r\n     * the query completes.\r\n     */\n  }, {\n    key: \"findAll\",\n    value: function () {\n      var _findAll = (0, _asyncToGenerator2.default)(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(options\n      /*:: ?: BatchOptions*/) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                result\n                /*: ParseObject[]*/ = [];\n                _context7.next = 3;\n                return this.eachBatch(function (objects\n                /*: ParseObject[]*/) {\n                  var _context6;\n                  result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));\n                }, options);\n              case 3:\n                return _context7.abrupt(\"return\", result);\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function findAll(_x2) {\n        return _findAll.apply(this, arguments);\n      }\n      return findAll;\n    }()\n    /**\r\n     * Counts the number of objects that match this query.\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the count when\r\n     * the query completes.\r\n     */\n  }, {\n    key: \"count\",\n    value: function count(options\n    /*:: ?: FullOptions*/) /*: Promise<number>*/\n    {\n      options = options || {};\n      var findOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n      this._setRequestTask(findOptions);\n      var controller = _CoreManager.default.getQueryController();\n      var params = this.toJSON();\n      params.limit = 0;\n      params.count = 1;\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\n        return result.count;\n      });\n    }\n    /**\r\n     * Executes a distinct query and returns unique values\r\n     *\r\n     * @param {string} key A field to find distinct values\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the query completes.\r\n     */\n  }, {\n    key: \"distinct\",\n    value: function distinct(key\n    /*: string*/, options\n    /*:: ?: FullOptions*/) /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var distinctOptions = {};\n      distinctOptions.useMasterKey = true;\n      if (options.hasOwnProperty('sessionToken')) {\n        distinctOptions.sessionToken = options.sessionToken;\n      }\n      this._setRequestTask(distinctOptions);\n      var controller = _CoreManager.default.getQueryController();\n      var params = {\n        distinct: key,\n        where: this._where,\n        hint: this._hint\n      };\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\r\n     * Executes an aggregate query and returns aggregate results\r\n     *\r\n     * @param {(Array|object)} pipeline Array or Object of stages to process query\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the query completes.\r\n     */\n  }, {\n    key: \"aggregate\",\n    value: function aggregate(pipeline\n    /*: mixed*/, options\n    /*:: ?: FullOptions*/) /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var aggregateOptions = {};\n      aggregateOptions.useMasterKey = true;\n      if (options.hasOwnProperty('sessionToken')) {\n        aggregateOptions.sessionToken = options.sessionToken;\n      }\n      this._setRequestTask(aggregateOptions);\n      var controller = _CoreManager.default.getQueryController();\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\n        throw new Error('Invalid pipeline must be Array or Object');\n      }\n      if ((0, _keys2.default)(this._where || {}).length) {\n        if (!(0, _isArray.default)(pipeline)) {\n          pipeline = [pipeline];\n        }\n        pipeline.unshift({\n          match: this._where\n        });\n      }\n      var params = {\n        pipeline: pipeline,\n        hint: this._hint,\n        explain: this._explain,\n        readPreference: this._readPreference\n      };\n      return controller.aggregate(this.className, params, aggregateOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\r\n     * Retrieves at most one Parse.Object that satisfies this query.\r\n     *\r\n     * Returns the object if there is one, otherwise undefined.\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     *   <li>json: Return raw json without converting to Parse.Object\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the object when\r\n     * the query completes.\r\n     */\n  }, {\n    key: \"first\",\n    value: function first(options\n    /*:: ?: FullOptions*/) /*: Promise<ParseObject | void>*/\n    {\n      var _this4 = this;\n      options = options || {};\n      var findOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n      this._setRequestTask(findOptions);\n      var controller = _CoreManager.default.getQueryController();\n      var params = this.toJSON();\n      params.limit = 1;\n      var select = this._select;\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(params).then(function (objects) {\n          if (!objects[0]) {\n            return undefined;\n          }\n          return objects[0];\n        });\n      }\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\n        var objects = response.results;\n        if (!objects[0]) {\n          return undefined;\n        }\n        if (!objects[0].className) {\n          objects[0].className = _this4.className;\n        } // Make sure the data object contains keys for all objects that\n        // have been requested with a select, so that our cached state\n        // updates correctly.\n\n        if (select) {\n          handleSelectResult(objects[0], select);\n        }\n        if (options.json) {\n          return objects[0];\n        } else {\n          return _ParseObject.default.fromJSON(objects[0], !select);\n        }\n      });\n    }\n    /**\r\n     * Iterates over objects matching a query, calling a callback for each batch.\r\n     * If the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are processed\r\n     * in an unspecified order. The query may not have any sort order, and may\r\n     * not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback that will be called with each result\r\n     *     of the query.\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\n  }, {\n    key: \"eachBatch\",\n    value: function eachBatch(callback\n    /*: (objs: Array<ParseObject>) => Promise<*>*/, options\n    /*:: ?: BatchOptions*/) /*: Promise<void>*/\n    {\n      var _context8;\n      options = options || {};\n      if (this._order || this._skip || this._limit >= 0) {\n        var error = 'Cannot iterate on a query with sort, skip, or limit.';\n        return _promise.default.reject(error);\n      }\n      var query = new ParseQuery(this.className);\n      query._limit = options.batchSize || 100;\n      query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function (i) {\n        return i;\n      });\n      if (this._select) {\n        var _context9;\n        query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function (s) {\n          return s;\n        });\n      }\n      query._hint = this._hint;\n      query._where = {};\n      for (var _attr in this._where) {\n        var val = this._where[_attr];\n        if ((0, _isArray.default)(val)) {\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\n            return v;\n          });\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\n          var conditionMap = {};\n          query._where[_attr] = conditionMap;\n          for (var cond in val) {\n            conditionMap[cond] = val[cond];\n          }\n        } else {\n          query._where[_attr] = val;\n        }\n      }\n      query.ascending('objectId');\n      var findOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n      if (options.hasOwnProperty('json')) {\n        findOptions.json = options.json;\n      }\n      var finished = false;\n      var previousResults = [];\n      return (0, _promiseUtils.continueWhile)(function () {\n        return !finished;\n      }, /*#__PURE__*/(0, _asyncToGenerator2.default)(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _yield$Promise$all, _yield$Promise$all2, results;\n        return _regeneratorRuntime().wrap(function _callee3$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);\n              case 2:\n                _yield$Promise$all = _context10.sent;\n                _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);\n                results = _yield$Promise$all2[0];\n                if (!(results.length >= query._limit)) {\n                  _context10.next = 10;\n                  break;\n                }\n                query.greaterThan('objectId', results[results.length - 1].id);\n                previousResults = results;\n                _context10.next = 17;\n                break;\n              case 10:\n                if (!(results.length > 0)) {\n                  _context10.next = 16;\n                  break;\n                }\n                _context10.next = 13;\n                return _promise.default.resolve(callback(results));\n              case 13:\n                finished = true;\n                _context10.next = 17;\n                break;\n              case 16:\n                finished = true;\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    }\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback that will be called with each result\r\n     *     of the query.\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>json: Return raw json without converting to Parse.Object\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\n  }, {\n    key: \"each\",\n    value: function each(callback\n    /*: (obj: ParseObject) => any*/, options\n    /*:: ?: BatchOptions*/) /*: Promise<void>*/\n    {\n      return this.eachBatch(function (results) {\n        var callbacksDone = _promise.default.resolve();\n        (0, _forEach.default)(results).call(results, function (result) {\n          callbacksDone = callbacksDone.then(function () {\n            return callback(result);\n          });\n        });\n        return callbacksDone;\n      }, options);\n    }\n    /**\r\n     * Adds a hint to force index selection. (https://docs.mongodb.com/manual/reference/operator/meta/hint/)\r\n     *\r\n     * @param {(string|object)} value String or Object of index that should be used when executing query\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"hint\",\n    value: function hint(value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      if (typeof value === 'undefined') {\n        delete this._hint;\n      }\n      this._hint = value;\n      return this;\n    }\n    /**\r\n     * Investigates the query execution plan. Useful for optimizing queries. (https://docs.mongodb.com/manual/reference/operator/meta/explain/)\r\n     *\r\n     * @param {boolean} explain Used to toggle the information on the query plan.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"explain\",\n    value: function explain() /*: ParseQuery*/\n    {\n      var _explain\n      /*: boolean*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (typeof _explain !== 'boolean') {\n        throw new Error('You can only set explain to a boolean value');\n      }\n      this._explain = _explain;\n      return this;\n    }\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback <ul>\r\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\r\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\r\n     *   <li>query: The query map was called upon.</li>\r\n     * </ul>\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\n  }, {\n    key: \"map\",\n    value: function () {\n      var _map = (0, _asyncToGenerator2.default)(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/, options\n      /*:: ?: BatchOptions*/) {\n        var _this5 = this;\n        var array, index;\n        return _regeneratorRuntime().wrap(function _callee4$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context11.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this5)).then(function (result) {\n                    array.push(result);\n                    index += 1;\n                  });\n                }, options);\n              case 4:\n                return _context11.abrupt(\"return\", array);\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function map(_x3, _x4) {\n        return _map.apply(this, arguments);\n      }\n      return map;\n    }()\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback <ul>\r\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\r\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\r\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\r\n     * </ul>\r\n     * @param {*} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\n  }, {\n    key: \"reduce\",\n    value: function () {\n      var _reduce = (0, _asyncToGenerator2.default)(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(callback\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/, initialValue\n      /*: any*/, options\n      /*:: ?: BatchOptions*/) {\n        var accumulator, index;\n        return _regeneratorRuntime().wrap(function _callee5$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                accumulator = initialValue;\n                index = 0;\n                _context12.next = 4;\n                return this.each(function (object) {\n                  // If no initial value was given, we take the first object from the query\n                  // as the initial value and don't call the callback with it.\n                  if (index === 0 && initialValue === undefined) {\n                    accumulator = object;\n                    index += 1;\n                    return;\n                  }\n                  return _promise.default.resolve(callback(accumulator, object, index)).then(function (result) {\n                    accumulator = result;\n                    index += 1;\n                  });\n                }, options);\n              case 4:\n                if (!(index === 0 && initialValue === undefined)) {\n                  _context12.next = 6;\n                  break;\n                }\n                throw new TypeError('Reducing empty query result set with no initial value');\n              case 6:\n                return _context12.abrupt(\"return\", accumulator);\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function reduce(_x5, _x6, _x7) {\n        return _reduce.apply(this, arguments);\n      }\n      return reduce;\n    }()\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback <ul>\r\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\r\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\r\n     *   <li>query: The query filter was called upon.</li>\r\n     * </ul>\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\n  }, {\n    key: \"filter\",\n    value: function () {\n      var _filter = (0, _asyncToGenerator2.default)(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/, options\n      /*:: ?: BatchOptions*/) {\n        var _this6 = this;\n        var array, index;\n        return _regeneratorRuntime().wrap(function _callee6$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context13.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this6)).then(function (flag) {\n                    if (flag) {\n                      array.push(object);\n                    }\n                    index += 1;\n                  });\n                }, options);\n              case 4:\n                return _context13.abrupt(\"return\", array);\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function filter(_x8, _x9) {\n        return _filter.apply(this, arguments);\n      }\n      return filter;\n    }()\n    /** Query Conditions **/\n\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that the Parse.Object must contain.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"equalTo\",\n    value: function equalTo(key\n    /*: string | { [key: string]: any }*/, value\n    /*: ?mixed*/) /*: ParseQuery*/\n    {\n      var _this7 = this;\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context14;\n        (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function (_ref2) {\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n            k = _ref3[0],\n            val = _ref3[1];\n          return _this7.equalTo(k, val);\n        });\n        return this;\n      }\n      if (typeof value === 'undefined') {\n        return this.doesNotExist(key);\n      }\n      this._where[key] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be not equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that must not be equalled.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"notEqualTo\",\n    value: function notEqualTo(key\n    /*: string | { [key: string]: any }*/, value\n    /*: ?mixed*/) /*: ParseQuery*/\n    {\n      var _this8 = this;\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context15;\n        (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function (_ref4) {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n            k = _ref5[0],\n            val = _ref5[1];\n          return _this8.notEqualTo(k, val);\n        });\n        return this;\n      }\n      return this._addCondition(key, '$ne', value);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be less than the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that provides an upper bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lt', value);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be greater than the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that provides an lower bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"greaterThan\",\n    value: function greaterThan(key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gt', value);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be less than or equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that provides an upper bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function lessThanOrEqualTo(key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lte', value);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be greater than or equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {*} value The value that provides an lower bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function greaterThanOrEqualTo(key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gte', value);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be contained in the provided list of values.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {*} value The values that will match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"containedIn\",\n    value: function containedIn(key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$in', value);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * not be contained in the provided list of values.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {*} value The values that will not match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"notContainedIn\",\n    value: function notContainedIn(key\n    /*: string*/, value\n    /*: mixed*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$nin', value);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be contained by the provided list of values. Get objects where all array elements match.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {Array} values The values that will match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"containedBy\",\n    value: function containedBy(key\n    /*: string*/, values\n    /*: Array<mixed>*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$containedBy', values);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * contain each one of the provided list of values.\r\n     *\r\n     * @param {string} key The key to check.  This key's value must be an array.\r\n     * @param {Array} values The values that will match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"containsAll\",\n    value: function containsAll(key\n    /*: string*/, values\n    /*: Array<mixed>*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$all', values);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * contain each one of the provided list of values starting with given strings.\r\n     *\r\n     * @param {string} key The key to check.  This key's value must be an array.\r\n     * @param {Array<string>} values The string values that will match as starting string.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"containsAllStartingWith\",\n    value: function containsAllStartingWith(key\n    /*: string*/, values\n    /*: Array<string>*/) /*: ParseQuery*/\n    {\n      var _this = this;\n      if (!(0, _isArray.default)(values)) {\n        values = [values];\n      }\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\n        return {\n          $regex: _this._regexStartWith(value)\n        };\n      });\n      return this.containsAll(key, regexObject);\n    }\n    /**\r\n     * Adds a constraint for finding objects that contain the given key.\r\n     *\r\n     * @param {string} key The key that should exist.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"exists\",\n    value: function exists(key\n    /*: string*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', true);\n    }\n    /**\r\n     * Adds a constraint for finding objects that do not contain a given key.\r\n     *\r\n     * @param {string} key The key that should not exist\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"doesNotExist\",\n    value: function doesNotExist(key\n    /*: string*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', false);\n    }\n    /**\r\n     * Adds a regular expression constraint for finding string values that match\r\n     * the provided regular expression.\r\n     * This may be slow for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {RegExp} regex The regular expression pattern to match.\r\n     * @param {string} modifiers The regular expression mode.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"matches\",\n    value: function matches(key\n    /*: string*/, regex\n    /*: RegExp*/, modifiers\n    /*: string*/) /*: ParseQuery*/\n    {\n      this._addCondition(key, '$regex', regex);\n      if (!modifiers) {\n        modifiers = '';\n      }\n      if (regex.ignoreCase) {\n        modifiers += 'i';\n      }\n      if (regex.multiline) {\n        modifiers += 'm';\n      }\n      if (modifiers.length) {\n        this._addCondition(key, '$options', modifiers);\n      }\n      return this;\n    }\n    /**\r\n     * Adds a constraint that requires that a key's value matches a Parse.Query\r\n     * constraint.\r\n     *\r\n     * @param {string} key The key that the contains the object to match the\r\n     *                     query.\r\n     * @param {Parse.Query} query The query that should match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"matchesQuery\",\n    value: function matchesQuery(key\n    /*: string*/, query\n    /*: ParseQuery*/) /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$inQuery', queryJSON);\n    }\n    /**\r\n     * Adds a constraint that requires that a key's value not matches a\r\n     * Parse.Query constraint.\r\n     *\r\n     * @param {string} key The key that the contains the object to match the\r\n     *                     query.\r\n     * @param {Parse.Query} query The query that should not match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"doesNotMatchQuery\",\n    value: function doesNotMatchQuery(key\n    /*: string*/, query\n    /*: ParseQuery*/) /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$notInQuery', queryJSON);\n    }\n    /**\r\n     * Adds a constraint that requires that a key's value matches a value in\r\n     * an object returned by a different Parse.Query.\r\n     *\r\n     * @param {string} key The key that contains the value that is being\r\n     *                     matched.\r\n     * @param {string} queryKey The key in the objects returned by the query to\r\n     *                          match against.\r\n     * @param {Parse.Query} query The query to run.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"matchesKeyInQuery\",\n    value: function matchesKeyInQuery(key\n    /*: string*/, queryKey\n    /*: string*/, query\n    /*: ParseQuery*/) /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$select', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\r\n     * Adds a constraint that requires that a key's value not match a value in\r\n     * an object returned by a different Parse.Query.\r\n     *\r\n     * @param {string} key The key that contains the value that is being\r\n     *                     excluded.\r\n     * @param {string} queryKey The key in the objects returned by the query to\r\n     *                          match against.\r\n     * @param {Parse.Query} query The query to run.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"doesNotMatchKeyInQuery\",\n    value: function doesNotMatchKeyInQuery(key\n    /*: string*/, queryKey\n    /*: string*/, query\n    /*: ParseQuery*/) /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$dontSelect', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\r\n     * Adds a constraint for finding string values that contain a provided\r\n     * string.  This may be slow for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} substring The substring that the value must contain.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"contains\",\n    value: function contains(key\n    /*: string*/, substring\n    /*: string*/) /*: ParseQuery*/\n    {\n      if (typeof substring !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n      return this._addCondition(key, '$regex', quote(substring));\n    }\n    /**\r\n     * Adds a constraint for finding string values that contain a provided\r\n     * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\r\n     *\r\n     * In order to sort you must use select and ascending ($score is required)\r\n     *  <pre>\r\n     *   query.fullText('field', 'term');\r\n     *   query.ascending('$score');\r\n     *   query.select('$score');\r\n     *  </pre>\r\n     *\r\n     * To retrieve the weight / rank\r\n     *  <pre>\r\n     *   object->get('score');\r\n     *  </pre>\r\n     *\r\n     * You can define optionals by providing an object as a third parameter\r\n     *  <pre>\r\n     *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\r\n     *  </pre>\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} value The string to search\r\n     * @param {object} options (Optional)\r\n     * @param {string} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\r\n     * @param {boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\r\n     * @param {boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"fullText\",\n    value: function fullText(key\n    /*: string*/, value\n    /*: string*/, options\n    /*: ?Object*/) /*: ParseQuery*/\n    {\n      options = options || {};\n      if (!key) {\n        throw new Error('A key is required.');\n      }\n      if (!value) {\n        throw new Error('A search term is required');\n      }\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n      var fullOptions = {};\n      fullOptions.$term = value;\n      for (var option in options) {\n        switch (option) {\n          case 'language':\n            fullOptions.$language = options[option];\n            break;\n          case 'caseSensitive':\n            fullOptions.$caseSensitive = options[option];\n            break;\n          case 'diacriticSensitive':\n            fullOptions.$diacriticSensitive = options[option];\n            break;\n          default:\n            throw new Error(\"Unknown option: \".concat(option));\n        }\n      }\n      return this._addCondition(key, '$text', {\n        $search: fullOptions\n      });\n    }\n    /**\r\n     * Method to sort the full text search by text score\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"sortByTextScore\",\n    value: function sortByTextScore() {\n      this.ascending('$score');\n      this.select(['$score']);\n      return this;\n    }\n    /**\r\n     * Adds a constraint for finding string values that start with a provided\r\n     * string.  This query will use the backend index, so it will be fast even\r\n     * for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} prefix The substring that the value must start with.\r\n     * @param {string} modifiers The regular expression mode.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"startsWith\",\n    value: function startsWith(key\n    /*: string*/, prefix\n    /*: string*/, modifiers\n    /*: string*/) /*: ParseQuery*/\n    {\n      if (typeof prefix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n      return this.matches(key, this._regexStartWith(prefix), modifiers);\n    }\n    /**\r\n     * Adds a constraint for finding string values that end with a provided\r\n     * string.  This will be slow for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} suffix The substring that the value must end with.\r\n     * @param {string} modifiers The regular expression mode.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"endsWith\",\n    value: function endsWith(key\n    /*: string*/, suffix\n    /*: string*/, modifiers\n    /*: string*/) /*: ParseQuery*/\n    {\n      if (typeof suffix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n      return this.matches(key, quote(suffix) + '$', modifiers);\n    }\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"near\",\n    value: function near(key\n    /*: string*/, point\n    /*: ParseGeoPoint*/) /*: ParseQuery*/\n    {\n      if (!(point instanceof _ParseGeoPoint.default)) {\n        // Try to cast it as a GeoPoint\n        point = new _ParseGeoPoint.default(point);\n      }\n      return this._addCondition(key, '$nearSphere', point);\n    }\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given and within the maximum distance given.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @param {number} maxDistance Maximum distance (in radians) of results to return.\r\n     * @param {boolean} sorted A Bool value that is true if results should be\r\n     * sorted by distance ascending, false is no sorting is required,\r\n     * defaults to true.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"withinRadians\",\n    value: function withinRadians(key\n    /*: string*/, point\n    /*: ParseGeoPoint*/, maxDistance\n    /*: number*/, sorted\n    /*: boolean*/) /*: ParseQuery*/\n    {\n      if (sorted || sorted === undefined) {\n        this.near(key, point);\n        return this._addCondition(key, '$maxDistance', maxDistance);\n      } else {\n        return this._addCondition(key, '$geoWithin', {\n          $centerSphere: [[point.longitude, point.latitude], maxDistance]\n        });\n      }\n    }\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given and within the maximum distance given.\r\n     * Radius of earth used is 3958.8 miles.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @param {number} maxDistance Maximum distance (in miles) of results to return.\r\n     * @param {boolean} sorted A Bool value that is true if results should be\r\n     * sorted by distance ascending, false is no sorting is required,\r\n     * defaults to true.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"withinMiles\",\n    value: function withinMiles(key\n    /*: string*/, point\n    /*: ParseGeoPoint*/, maxDistance\n    /*: number*/, sorted\n    /*: boolean*/) /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 3958.8, sorted);\n    }\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given and within the maximum distance given.\r\n     * Radius of earth used is 6371.0 kilometers.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @param {number} maxDistance Maximum distance (in kilometers) of results to return.\r\n     * @param {boolean} sorted A Bool value that is true if results should be\r\n     * sorted by distance ascending, false is no sorting is required,\r\n     * defaults to true.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"withinKilometers\",\n    value: function withinKilometers(key\n    /*: string*/, point\n    /*: ParseGeoPoint*/, maxDistance\n    /*: number*/, sorted\n    /*: boolean*/) /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 6371.0, sorted);\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's\r\n     * coordinates be contained within a given rectangular geographic bounding\r\n     * box.\r\n     *\r\n     * @param {string} key The key to be constrained.\r\n     * @param {Parse.GeoPoint} southwest\r\n     *     The lower-left inclusive corner of the box.\r\n     * @param {Parse.GeoPoint} northeast\r\n     *     The upper-right inclusive corner of the box.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"withinGeoBox\",\n    value: function withinGeoBox(key\n    /*: string*/, southwest\n    /*: ParseGeoPoint*/, northeast\n    /*: ParseGeoPoint*/) /*: ParseQuery*/\n    {\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\n        southwest = new _ParseGeoPoint.default(southwest);\n      }\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\n        northeast = new _ParseGeoPoint.default(northeast);\n      }\n      this._addCondition(key, '$within', {\n        $box: [southwest, northeast]\n      });\n      return this;\n    }\n    /**\r\n     * Adds a constraint to the query that requires a particular key's\r\n     * coordinates be contained within and on the bounds of a given polygon.\r\n     * Supports closed and open (last point is connected to first) paths\r\n     *\r\n     * Polygon must have at least 3 points\r\n     *\r\n     * @param {string} key The key to be constrained.\r\n     * @param {Array} points Array of Coordinates / GeoPoints\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"withinPolygon\",\n    value: function withinPolygon(key\n    /*: string*/, points\n    /*: Array<Array<number>>*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoWithin', {\n        $polygon: points\n      });\n    }\n    /**\r\n     * Add a constraint to the query that requires a particular key's\r\n     * coordinates that contains a ParseGeoPoint\r\n     *\r\n     * @param {string} key The key to be constrained.\r\n     * @param {Parse.GeoPoint} point\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"polygonContains\",\n    value: function polygonContains(key\n    /*: string*/, point\n    /*: ParseGeoPoint*/) /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoIntersects', {\n        $point: point\n      });\n    }\n    /** Query Orderings **/\n\n    /**\r\n     * Sorts the results in ascending order by the given key.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"ascending\",\n    value: function ascending() /*: ParseQuery*/\n    {\n      this._order = [];\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n      return this.addAscending.apply(this, keys);\n    }\n    /**\r\n     * Sorts the results in ascending order by the given key,\r\n     * but can also add secondary sort descriptors without overwriting _order.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"addAscending\",\n    value: function addAscending() /*: ParseQuery*/\n    {\n      var _this9 = this;\n      if (!this._order) {\n        this._order = [];\n      }\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context16;\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n        _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\\s/g, '').split(','));\n      });\n      return this;\n    }\n    /**\r\n     * Sorts the results in descending order by the given key.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"descending\",\n    value: function descending() /*: ParseQuery*/\n    {\n      this._order = [];\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n        keys[_key7] = arguments[_key7];\n      }\n      return this.addDescending.apply(this, keys);\n    }\n    /**\r\n     * Sorts the results in descending order by the given key,\r\n     * but can also add secondary sort descriptors without overwriting _order.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"addDescending\",\n    value: function addDescending() /*: ParseQuery*/\n    {\n      var _this10 = this;\n      if (!this._order) {\n        this._order = [];\n      }\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\n        keys[_key8] = arguments[_key8];\n      }\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context17, _context18;\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n        _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\\s/g, '').split(',')).call(_context18, function (k) {\n          return '-' + k;\n        }));\n      });\n      return this;\n    }\n    /** Query Options **/\n\n    /**\r\n     * Sets the number of results to skip before returning any results.\r\n     * This is useful for pagination.\r\n     * Default is to skip zero results.\r\n     *\r\n     * @param {number} n the number of results to skip.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"skip\",\n    value: function skip(n\n    /*: number*/) /*: ParseQuery*/\n    {\n      if (typeof n !== 'number' || n < 0) {\n        throw new Error('You can only skip by a positive number');\n      }\n      this._skip = n;\n      return this;\n    }\n    /**\r\n     * Sets the limit of the number of results to return. The default limit is 100.\r\n     *\r\n     * @param {number} n the number of results to limit to.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"limit\",\n    value: function limit(n\n    /*: number*/) /*: ParseQuery*/\n    {\n      if (typeof n !== 'number') {\n        throw new Error('You can only set the limit to a numeric value');\n      }\n      this._limit = n;\n      return this;\n    }\n    /**\r\n     * Sets the flag to include with response the total number of objects satisfying this query,\r\n     * despite limits/skip. Might be useful for pagination.\r\n     * Note that result of this query will be wrapped as an object with\r\n     * `results`: holding {ParseObject} array and `count`: integer holding total number\r\n     *\r\n     * @param {boolean} includeCount false - disable, true - enable.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"withCount\",\n    value: function withCount() /*: ParseQuery*/\n    {\n      var includeCount\n      /*: boolean*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (typeof includeCount !== 'boolean') {\n        throw new Error('You can only set withCount to a boolean value');\n      }\n      this._count = includeCount;\n      return this;\n    }\n    /**\r\n     * Includes nested Parse.Objects for the provided key.  You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * You can include all nested Parse.Objects by passing in '*'.\r\n     * Requires Parse Server 3.0.0+\r\n     * <pre>query.include('*');</pre>\r\n     *\r\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"include\",\n    value: function include() /*: ParseQuery*/\n    {\n      var _this11 = this;\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\n        keys[_key9] = arguments[_key9];\n      }\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context19;\n          _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);\n        } else {\n          _this11._include.push(key);\n        }\n      });\n      return this;\n    }\n    /**\r\n     * Includes all nested Parse.Objects one level deep.\r\n     *\r\n     * Requires Parse Server 3.0.0+\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"includeAll\",\n    value: function includeAll() /*: ParseQuery*/\n    {\n      return this.include('*');\n    }\n    /**\r\n     * Restricts the fields of the returned Parse.Objects to include only the\r\n     * provided keys.  If this is called multiple times, then all of the keys\r\n     * specified in each of the calls will be included.\r\n     *\r\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"select\",\n    value: function select() /*: ParseQuery*/\n    {\n      var _this12 = this;\n      if (!this._select) {\n        this._select = [];\n      }\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\n        keys[_key10] = arguments[_key10];\n      }\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context20;\n          _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);\n        } else {\n          _this12._select.push(key);\n        }\n      });\n      return this;\n    }\n    /**\r\n     * Restricts the fields of the returned Parse.Objects to all keys except the\r\n     * provided keys. Exclude takes precedence over select and include.\r\n     *\r\n     * Requires Parse Server 3.6.0+\r\n     *\r\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to exclude.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"exclude\",\n    value: function exclude() /*: ParseQuery*/\n    {\n      var _this13 = this;\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\n        keys[_key11] = arguments[_key11];\n      }\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context21;\n          _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);\n        } else {\n          _this13._exclude.push(key);\n        }\n      });\n      return this;\n    }\n    /**\r\n     * Changes the read preference that the backend will use when performing the query to the database.\r\n     *\r\n     * @param {string} readPreference The read preference for the main query.\r\n     * @param {string} includeReadPreference The read preference for the queries to include pointers.\r\n     * @param {string} subqueryReadPreference The read preference for the sub queries.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"readPreference\",\n    value: function readPreference(_readPreference\n    /*: string*/, includeReadPreference\n    /*:: ?: string*/, subqueryReadPreference\n    /*:: ?: string*/) /*: ParseQuery*/\n    {\n      this._readPreference = _readPreference;\n      this._includeReadPreference = includeReadPreference;\n      this._subqueryReadPreference = subqueryReadPreference;\n      return this;\n    }\n    /**\r\n     * Subscribe this query to get liveQuery updates\r\n     *\r\n     * @param {string} sessionToken (optional) Defaults to the currentUser\r\n     * @returns {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\r\n     * which can be used to get liveQuery updates.\r\n     */\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2.default)(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(sessionToken\n      /*:: ?: string*/) {\n        var currentUser, liveQueryClient, subscription;\n        return _regeneratorRuntime().wrap(function _callee7$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return _CoreManager.default.getUserController().currentUserAsync();\n              case 2:\n                currentUser = _context22.sent;\n                if (!sessionToken) {\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n                }\n                _context22.next = 6;\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n              case 6:\n                liveQueryClient = _context22.sent;\n                if (liveQueryClient.shouldOpen()) {\n                  liveQueryClient.open();\n                }\n                subscription = liveQueryClient.subscribe(this, sessionToken);\n                return _context22.abrupt(\"return\", subscription.subscribePromise.then(function () {\n                  return subscription;\n                }));\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function subscribe(_x10) {\n        return _subscribe.apply(this, arguments);\n      }\n      return subscribe;\n    }()\n    /**\r\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\r\n     * example:\r\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\r\n     *\r\n     * will create a compoundQuery that is an or of the query1, query2, and\r\n     * query3.\r\n     *\r\n     * @param {...Parse.Query} queries The list of queries to OR.\r\n     * @static\r\n     * @returns {Parse.Query} The query that is the OR of the passed in queries.\r\n     */\n  }, {\n    key: \"fromNetwork\",\n    value:\n    /**\r\n     * Change the source of this query to the server.\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n    function fromNetwork() /*: ParseQuery*/\n    {\n      this._queriesLocalDatastore = false;\n      this._localDatastorePinName = null;\n      return this;\n    }\n    /**\r\n     * Changes the source of this query to all pinned objects.\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"fromLocalDatastore\",\n    value: function fromLocalDatastore() /*: ParseQuery*/\n    {\n      return this.fromPinWithName(null);\n    }\n    /**\r\n     * Changes the source of this query to the default group of pinned objects.\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"fromPin\",\n    value: function fromPin() /*: ParseQuery*/\n    {\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\r\n     * Changes the source of this query to a specific group of pinned objects.\r\n     *\r\n     * @param {string} name The name of query source.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"fromPinWithName\",\n    value: function fromPinWithName(name\n    /*:: ?: string*/) /*: ParseQuery*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (localDatastore.checkIfEnabled()) {\n        this._queriesLocalDatastore = true;\n        this._localDatastorePinName = name;\n      }\n      return this;\n    }\n    /**\r\n     * Cancels the current network request (if any is running).\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\n  }, {\n    key: \"cancel\",\n    value: function cancel() /*: ParseQuery*/\n    {\n      var _this14 = this;\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\n        this._xhrRequest.task._aborted = true;\n        this._xhrRequest.task.abort();\n        this._xhrRequest.task = null;\n        this._xhrRequest.onchange = function () {};\n        return this;\n      }\n      return this._xhrRequest.onchange = function () {\n        return _this14.cancel();\n      };\n    }\n  }, {\n    key: \"_setRequestTask\",\n    value: function _setRequestTask(options) {\n      var _this15 = this;\n      options.requestTask = function (task) {\n        _this15._xhrRequest.task = task;\n        _this15._xhrRequest.onchange();\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(className\n    /*: string*/, json\n    /*: QueryJSON*/) /*: ParseQuery*/\n    {\n      var query = new ParseQuery(className);\n      return query.withJSON(json);\n    }\n  }, {\n    key: \"or\",\n    value: function or() /*: ParseQuery*/\n    {\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\n        queries[_key12] = arguments[_key12];\n      }\n      var className = _getClassNameFromQueries(queries);\n      var query = new ParseQuery(className);\n      query._orQuery(queries);\n      return query;\n    }\n    /**\r\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\r\n     * example:\r\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\r\n     *\r\n     * will create a compoundQuery that is an and of the query1, query2, and\r\n     * query3.\r\n     *\r\n     * @param {...Parse.Query} queries The list of queries to AND.\r\n     * @static\r\n     * @returns {Parse.Query} The query that is the AND of the passed in queries.\r\n     */\n  }, {\n    key: \"and\",\n    value: function and() /*: ParseQuery*/\n    {\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\n        queries[_key13] = arguments[_key13];\n      }\n      var className = _getClassNameFromQueries(queries);\n      var query = new ParseQuery(className);\n      query._andQuery(queries);\n      return query;\n    }\n    /**\r\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\r\n     * example:\r\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\r\n     *\r\n     * will create a compoundQuery that is a nor of the query1, query2, and\r\n     * query3.\r\n     *\r\n     * @param {...Parse.Query} queries The list of queries to NOR.\r\n     * @static\r\n     * @returns {Parse.Query} The query that is the NOR of the passed in queries.\r\n     */\n  }, {\n    key: \"nor\",\n    value: function nor() /*: ParseQuery*/\n    {\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\n        queries[_key14] = arguments[_key14];\n      }\n      var className = _getClassNameFromQueries(queries);\n      var query = new ParseQuery(className);\n      query._norQuery(queries);\n      return query;\n    }\n  }]);\n  return ParseQuery;\n}();\nvar DefaultController = {\n  find: function find(className\n  /*: string*/, params\n  /*: QueryJSON*/, options\n  /*: RequestOptions*/) /*: Promise<Array<ParseObject>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'classes/' + className, params, options);\n  },\n  aggregate: function aggregate(className\n  /*: string*/, params\n  /*: any*/, options\n  /*: RequestOptions*/) /*: Promise<Array<mixed>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'aggregate/' + className, params, options);\n  }\n};\n_CoreManager.default.setQueryController(DefaultController);\nvar _default = ParseQuery;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_sliceInstanceProperty2","_reverseInstanceProperty","_Promise2","_Object$setPrototypeOf","_typeof3","_forEachInstanceProperty2","_Object$getPrototypeOf","_Object$create","_Object$defineProperty","_Symbol","exports","value","default","_entries","_slicedToArray2","_isArray","_toConsumableArray2","_find","_promise","_splice","_sort","_includes","_concat","_keys","_filter2","_asyncToGenerator2","_map2","_classCallCheck2","_createClass2","_defineProperty2","_slice","_keys2","_typeof2","_indexOf","_forEach","_CoreManager","_encode","_promiseUtils","_ParseError","_ParseGeoPoint","_ParseObject","_OfflineQuery","_LocalDatastoreUtils","_regeneratorRuntime","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","method","arg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","_context23","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","__proto__","awrap","async","iter","keys","object","pop","skipTempReset","_context24","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","quote","s","replace","_getClassNameFromQueries","queries","className","q","handleSelectResult","data","select","serverDataMask","field","hasSubObjectSelect","pathComponents","split","_obj","serverMask","component","index","arr","serverData","getObjectStateController","getServerData","id","objectId","copyMissingDataWithMask","src","dest","mask","copyThisLevel","_key","_key2","handleOfflineSort","a","b","sorts","order","operator","isDescending","substring","test","INVALID_KEY_NAME","concat","field1","get","field2","remainingSorts","ParseQuery","objectClass","_obj2","_where","_include","_exclude","_count","_limit","_skip","_readPreference","_includeReadPreference","_subqueryReadPreference","_queriesLocalDatastore","_localDatastorePinName","_extraOptions","_xhrRequest","task","onchange","queryJSON","toJSON","where","$or","$and","$nor","condition","string","_handleOfflineQuery2","_callee","params","_context","_this2","localDatastore","objects","results","alwaysSelectedKeys","count","limit","_context3","validateQuery","getLocalDatastore","_serializeObjectsFromPinName","json","fromJSON","_localId","matchesQuery","_context2","_toFullJSON","skip","_handleOfflineQuery","apply","arguments","include","join","excludeKeys","_select","_order","readPreference","includeReadPreference","subqueryReadPreference","_hint","hint","_explain","explain","_key3","_key4","_context4","options","equalTo","firstOptions","useMasterKey","sessionToken","first","response","errorObject","OBJECT_NOT_FOUND","_this3","findOptions","_setRequestTask","controller","getQueryController","_context5","override","_findAll","_callee2","_callee2$","_context7","eachBatch","_context6","findAll","_x2","distinct","distinctOptions","aggregate","pipeline","aggregateOptions","unshift","match","_this4","callback","_context8","query","batchSize","_context9","_attr","val","v","conditionMap","cond","ascending","finished","previousResults","continueWhile","_callee3","_yield$Promise$all","_yield$Promise$all2","_callee3$","_context10","all","greaterThan","each","callbacksDone","_map","_callee4","_this5","array","_callee4$","_context11","map","_x3","_x4","_reduce","_callee5","initialValue","accumulator","_callee5$","_context12","reduce","_x5","_x6","_x7","_filter","_callee6","_this6","_callee6$","_context13","flag","filter","_x8","_x9","_this7","_context14","_ref2","_ref3","k","doesNotExist","notEqualTo","_this8","_context15","_ref4","_ref5","_addCondition","lessThan","lessThanOrEqualTo","greaterThanOrEqualTo","containedIn","notContainedIn","containedBy","containsAll","containsAllStartingWith","_this","regexObject","$regex","_regexStartWith","exists","matches","regex","modifiers","ignoreCase","multiline","doesNotMatchQuery","matchesKeyInQuery","queryKey","doesNotMatchKeyInQuery","contains","fullText","fullOptions","$term","option","$language","$caseSensitive","$diacriticSensitive","$search","sortByTextScore","startsWith","prefix","endsWith","suffix","near","point","withinRadians","maxDistance","sorted","$centerSphere","longitude","latitude","withinMiles","withinKilometers","withinGeoBox","southwest","northeast","$box","withinPolygon","points","$polygon","polygonContains","$point","_len","Array","_key5","addAscending","_this9","_len2","_key6","_context16","descending","_len3","_key7","addDescending","_this10","_len4","_key8","_context17","_context18","n","withCount","includeCount","_this11","_len5","_key9","_context19","includeAll","_this12","_len6","_key10","_context20","exclude","_this13","_len7","_key11","_context21","_subscribe","_callee7","currentUser","liveQueryClient","subscription","_callee7$","_context22","getUserController","currentUserAsync","getSessionToken","getLiveQueryController","getDefaultLiveQueryClient","shouldOpen","open","subscribe","subscribePromise","_x10","fromNetwork","fromLocalDatastore","fromPinWithName","fromPin","DEFAULT_PIN","checkIfEnabled","cancel","_this14","abort","_aborted","_this15","requestTask","withJSON","or","_len8","_key12","_orQuery","and","_len9","_key13","_andQuery","nor","_len10","_key14","_norQuery","DefaultController","find","RESTController","getRESTController","request","setQueryController","_default"],"sources":["C:/Users/chtdu/Documents/WEB DEV/git-repo/react-webpack8/node_modules/parse/lib/browser/ParseQuery.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _sliceInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\r\n\r\nvar _reverseInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/reverse\");\r\n\r\nvar _Promise2 = require(\"@babel/runtime-corejs3/core-js-stable/promise\");\r\n\r\nvar _Object$setPrototypeOf = require(\"@babel/runtime-corejs3/core-js-stable/object/set-prototype-of\");\r\n\r\nvar _typeof3 = require(\"@babel/runtime-corejs3/helpers/typeof\");\r\n\r\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\r\n\r\nvar _Object$getPrototypeOf = require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\");\r\n\r\nvar _Object$create = require(\"@babel/runtime-corejs3/core-js-stable/object/create\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _entries = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/entries\"));\r\n\r\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\r\n\r\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\r\n\r\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\r\n\r\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\r\n\r\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\r\n\r\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\r\n\r\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\r\n\r\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\r\n\r\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\r\n\r\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\r\n\r\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\r\n\r\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\r\n\r\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\r\n\r\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\r\n\r\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\r\n\r\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\r\n\r\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\r\n\r\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\r\n\r\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\r\n\r\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\r\n\r\nvar _encode = _interopRequireDefault(require(\"./encode\"));\r\n\r\nvar _promiseUtils = require(\"./promiseUtils\");\r\n\r\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\r\n\r\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\r\n\r\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\r\n\r\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\r\n\r\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\r\n\r\nfunction _regeneratorRuntime() {\r\n  \"use strict\";\r\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\r\n\r\n  _regeneratorRuntime = function () {\r\n    return exports;\r\n  };\r\n\r\n  var exports = {},\r\n      Op = Object.prototype,\r\n      hasOwn = Op.hasOwnProperty,\r\n      $Symbol = \"function\" == typeof _Symbol ? _Symbol : {},\r\n      iteratorSymbol = $Symbol.iterator || \"@@iterator\",\r\n      asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\r\n      toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\r\n\r\n  function define(obj, key, value) {\r\n    return _Object$defineProperty(obj, key, {\r\n      value: value,\r\n      enumerable: !0,\r\n      configurable: !0,\r\n      writable: !0\r\n    }), obj[key];\r\n  }\r\n\r\n  try {\r\n    define({}, \"\");\r\n  } catch (err) {\r\n    define = function (obj, key, value) {\r\n      return obj[key] = value;\r\n    };\r\n  }\r\n\r\n  function wrap(innerFn, outerFn, self, tryLocsList) {\r\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\r\n        generator = _Object$create(protoGenerator.prototype),\r\n        context = new Context(tryLocsList || []);\r\n\r\n    return generator._invoke = function (innerFn, self, context) {\r\n      var state = \"suspendedStart\";\r\n      return function (method, arg) {\r\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\r\n\r\n        if (\"completed\" === state) {\r\n          if (\"throw\" === method) throw arg;\r\n          return doneResult();\r\n        }\r\n\r\n        for (context.method = method, context.arg = arg;;) {\r\n          var delegate = context.delegate;\r\n\r\n          if (delegate) {\r\n            var delegateResult = maybeInvokeDelegate(delegate, context);\r\n\r\n            if (delegateResult) {\r\n              if (delegateResult === ContinueSentinel) continue;\r\n              return delegateResult;\r\n            }\r\n          }\r\n\r\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\r\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\r\n            context.dispatchException(context.arg);\r\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\r\n          state = \"executing\";\r\n          var record = tryCatch(innerFn, self, context);\r\n\r\n          if (\"normal\" === record.type) {\r\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\r\n            return {\r\n              value: record.arg,\r\n              done: context.done\r\n            };\r\n          }\r\n\r\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\r\n        }\r\n      };\r\n    }(innerFn, self, context), generator;\r\n  }\r\n\r\n  function tryCatch(fn, obj, arg) {\r\n    try {\r\n      return {\r\n        type: \"normal\",\r\n        arg: fn.call(obj, arg)\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        type: \"throw\",\r\n        arg: err\r\n      };\r\n    }\r\n  }\r\n\r\n  exports.wrap = wrap;\r\n  var ContinueSentinel = {};\r\n\r\n  function Generator() {}\r\n\r\n  function GeneratorFunction() {}\r\n\r\n  function GeneratorFunctionPrototype() {}\r\n\r\n  var IteratorPrototype = {};\r\n  define(IteratorPrototype, iteratorSymbol, function () {\r\n    return this;\r\n  });\r\n  var getProto = _Object$getPrototypeOf,\r\n      NativeIteratorPrototype = getProto && getProto(getProto(values([])));\r\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\r\n\r\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = _Object$create(IteratorPrototype);\r\n\r\n  function defineIteratorMethods(prototype) {\r\n    var _context23;\r\n\r\n    _forEachInstanceProperty2(_context23 = [\"next\", \"throw\", \"return\"]).call(_context23, function (method) {\r\n      define(prototype, method, function (arg) {\r\n        return this._invoke(method, arg);\r\n      });\r\n    });\r\n  }\r\n\r\n  function AsyncIterator(generator, PromiseImpl) {\r\n    function invoke(method, arg, resolve, reject) {\r\n      var record = tryCatch(generator[method], generator, arg);\r\n\r\n      if (\"throw\" !== record.type) {\r\n        var result = record.arg,\r\n            value = result.value;\r\n        return value && \"object\" == _typeof3(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\r\n          invoke(\"next\", value, resolve, reject);\r\n        }, function (err) {\r\n          invoke(\"throw\", err, resolve, reject);\r\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\r\n          result.value = unwrapped, resolve(result);\r\n        }, function (error) {\r\n          return invoke(\"throw\", error, resolve, reject);\r\n        });\r\n      }\r\n\r\n      reject(record.arg);\r\n    }\r\n\r\n    var previousPromise;\r\n\r\n    this._invoke = function (method, arg) {\r\n      function callInvokeWithMethodAndArg() {\r\n        return new PromiseImpl(function (resolve, reject) {\r\n          invoke(method, arg, resolve, reject);\r\n        });\r\n      }\r\n\r\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\r\n    };\r\n  }\r\n\r\n  function maybeInvokeDelegate(delegate, context) {\r\n    var method = delegate.iterator[context.method];\r\n\r\n    if (undefined === method) {\r\n      if (context.delegate = null, \"throw\" === context.method) {\r\n        if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\r\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\r\n      }\r\n\r\n      return ContinueSentinel;\r\n    }\r\n\r\n    var record = tryCatch(method, delegate.iterator, context.arg);\r\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\r\n    var info = record.arg;\r\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\r\n  }\r\n\r\n  function pushTryEntry(locs) {\r\n    var entry = {\r\n      tryLoc: locs[0]\r\n    };\r\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\r\n  }\r\n\r\n  function resetTryEntry(entry) {\r\n    var record = entry.completion || {};\r\n    record.type = \"normal\", delete record.arg, entry.completion = record;\r\n  }\r\n\r\n  function Context(tryLocsList) {\r\n    this.tryEntries = [{\r\n      tryLoc: \"root\"\r\n    }], _forEachInstanceProperty2(tryLocsList).call(tryLocsList, pushTryEntry, this), this.reset(!0);\r\n  }\r\n\r\n  function values(iterable) {\r\n    if (iterable) {\r\n      var iteratorMethod = iterable[iteratorSymbol];\r\n      if (iteratorMethod) return iteratorMethod.call(iterable);\r\n      if (\"function\" == typeof iterable.next) return iterable;\r\n\r\n      if (!isNaN(iterable.length)) {\r\n        var i = -1,\r\n            next = function next() {\r\n          for (; ++i < iterable.length;) {\r\n            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\r\n          }\r\n\r\n          return next.value = undefined, next.done = !0, next;\r\n        };\r\n\r\n        return next.next = next;\r\n      }\r\n    }\r\n\r\n    return {\r\n      next: doneResult\r\n    };\r\n  }\r\n\r\n  function doneResult() {\r\n    return {\r\n      value: undefined,\r\n      done: !0\r\n    };\r\n  }\r\n\r\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\r\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\r\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\r\n  }, exports.mark = function (genFun) {\r\n    return _Object$setPrototypeOf ? _Object$setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = _Object$create(Gp), genFun;\r\n  }, exports.awrap = function (arg) {\r\n    return {\r\n      __await: arg\r\n    };\r\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\r\n    return this;\r\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\r\n    void 0 === PromiseImpl && (PromiseImpl = _Promise2);\r\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\r\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\r\n      return result.done ? result.value : iter.next();\r\n    });\r\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\r\n    return this;\r\n  }), define(Gp, \"toString\", function () {\r\n    return \"[object Generator]\";\r\n  }), exports.keys = function (object) {\r\n    var keys = [];\r\n\r\n    for (var key in object) {\r\n      keys.push(key);\r\n    }\r\n\r\n    return _reverseInstanceProperty(keys).call(keys), function next() {\r\n      for (; keys.length;) {\r\n        var key = keys.pop();\r\n        if (key in object) return next.value = key, next.done = !1, next;\r\n      }\r\n\r\n      return next.done = !0, next;\r\n    };\r\n  }, exports.values = values, Context.prototype = {\r\n    constructor: Context,\r\n    reset: function (skipTempReset) {\r\n      var _context24;\r\n\r\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, _forEachInstanceProperty2(_context24 = this.tryEntries).call(_context24, resetTryEntry), !skipTempReset) for (var name in this) {\r\n        \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+_sliceInstanceProperty2(name).call(name, 1)) && (this[name] = undefined);\r\n      }\r\n    },\r\n    stop: function () {\r\n      this.done = !0;\r\n      var rootRecord = this.tryEntries[0].completion;\r\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\r\n      return this.rval;\r\n    },\r\n    dispatchException: function (exception) {\r\n      if (this.done) throw exception;\r\n      var context = this;\r\n\r\n      function handle(loc, caught) {\r\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\r\n      }\r\n\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i],\r\n            record = entry.completion;\r\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\r\n\r\n        if (entry.tryLoc <= this.prev) {\r\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\r\n              hasFinally = hasOwn.call(entry, \"finallyLoc\");\r\n\r\n          if (hasCatch && hasFinally) {\r\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\r\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\r\n          } else if (hasCatch) {\r\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\r\n          } else {\r\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\r\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    abrupt: function (type, arg) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n\r\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\r\n          var finallyEntry = entry;\r\n          break;\r\n        }\r\n      }\r\n\r\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\r\n      var record = finallyEntry ? finallyEntry.completion : {};\r\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\r\n    },\r\n    complete: function (record, afterLoc) {\r\n      if (\"throw\" === record.type) throw record.arg;\r\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\r\n    },\r\n    finish: function (finallyLoc) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\r\n      }\r\n    },\r\n    catch: function (tryLoc) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n\r\n        if (entry.tryLoc === tryLoc) {\r\n          var record = entry.completion;\r\n\r\n          if (\"throw\" === record.type) {\r\n            var thrown = record.arg;\r\n            resetTryEntry(entry);\r\n          }\r\n\r\n          return thrown;\r\n        }\r\n      }\r\n\r\n      throw new Error(\"illegal catch attempt\");\r\n    },\r\n    delegateYield: function (iterable, resultName, nextLoc) {\r\n      return this.delegate = {\r\n        iterator: values(iterable),\r\n        resultName: resultName,\r\n        nextLoc: nextLoc\r\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\r\n    }\r\n  }, exports;\r\n}\r\n/**\r\n * Converts a string into a regex that matches it.\r\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\r\n * the text separately.\r\n *\r\n * @param s\r\n * @private\r\n * @returns {string}\r\n */\r\n\r\n\r\nfunction quote(s\r\n/*: string*/\r\n)\r\n/*: string*/\r\n{\r\n  return '\\\\Q' + s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q') + '\\\\E';\r\n}\r\n/**\r\n * Extracts the class name from queries. If not all queries have the same\r\n * class name an error will be thrown.\r\n *\r\n * @param queries\r\n * @private\r\n * @returns {string}\r\n */\r\n\r\n\r\nfunction _getClassNameFromQueries(queries\r\n/*: Array<ParseQuery>*/\r\n)\r\n/*: ?string*/\r\n{\r\n  var className = null;\r\n  (0, _forEach.default)(queries).call(queries, function (q) {\r\n    if (!className) {\r\n      className = q.className;\r\n    }\r\n\r\n    if (className !== q.className) {\r\n      throw new Error('All queries must be for the same class.');\r\n    }\r\n  });\r\n  return className;\r\n}\r\n/*\r\n * Handles pre-populating the result data of a query with select fields,\r\n * making sure that the data object contains keys for all objects that have\r\n * been requested with a select, so that our cached state updates correctly.\r\n */\r\n\r\n\r\nfunction handleSelectResult(data\r\n/*: any*/\r\n, select\r\n/*: Array<string>*/\r\n) {\r\n  var serverDataMask = {};\r\n  (0, _forEach.default)(select).call(select, function (field) {\r\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, '.') !== -1;\r\n\r\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\r\n      // this field was selected, but is missing from the retrieved data\r\n      data[field] = undefined;\r\n    } else if (hasSubObjectSelect) {\r\n      // this field references a sub-object,\r\n      // so we need to walk down the path components\r\n      var pathComponents = field.split('.');\r\n      var _obj = data;\r\n      var serverMask = serverDataMask;\r\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\r\n        // add keys if the expected data is missing\r\n        if (_obj && !_obj.hasOwnProperty(component)) {\r\n          _obj[component] = undefined;\r\n        }\r\n\r\n        if (_obj && (0, _typeof2.default)(_obj) === 'object') {\r\n          _obj = _obj[component];\r\n        } //add this path component to the server mask so we can fill it in later if needed\r\n\r\n\r\n        if (index < arr.length - 1) {\r\n          if (!serverMask[component]) {\r\n            serverMask[component] = {};\r\n          }\r\n\r\n          serverMask = serverMask[component];\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  if ((0, _keys2.default)(serverDataMask).length > 0) {\r\n    // When selecting from sub-objects, we don't want to blow away the missing\r\n    // information that we may have retrieved before. We've already added any\r\n    // missing selected keys to sub-objects, but we still need to add in the\r\n    // data for any previously retrieved sub-objects that were not selected.\r\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\r\n      id: data.objectId,\r\n      className: data.className\r\n    });\r\n\r\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\r\n  }\r\n}\r\n\r\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\r\n  //copy missing elements at this level\r\n  if (copyThisLevel) {\r\n    for (var _key in src) {\r\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\r\n        dest[_key] = src[_key];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (var _key2 in mask) {\r\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\r\n      //traverse into objects as needed\r\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\r\n    }\r\n  }\r\n}\r\n\r\nfunction handleOfflineSort(a, b, sorts) {\r\n  var order = sorts[0];\r\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\r\n  var isDescending = operator === '-';\r\n\r\n  if (isDescending) {\r\n    order = order.substring(1);\r\n  }\r\n\r\n  if (order === '_created_at') {\r\n    order = 'createdAt';\r\n  }\r\n\r\n  if (order === '_updated_at') {\r\n    order = 'updatedAt';\r\n  }\r\n\r\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\r\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\r\n  }\r\n\r\n  var field1 = a.get(order);\r\n  var field2 = b.get(order);\r\n\r\n  if (field1 < field2) {\r\n    return isDescending ? 1 : -1;\r\n  }\r\n\r\n  if (field1 > field2) {\r\n    return isDescending ? -1 : 1;\r\n  }\r\n\r\n  if (sorts.length > 1) {\r\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\r\n    return handleOfflineSort(a, b, remainingSorts);\r\n  }\r\n\r\n  return 0;\r\n}\r\n/**\r\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\r\n *\r\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\r\n * most common use case is finding all objects that match a query through the\r\n * <code>find</code> method. for example, this sample code fetches all objects\r\n * of class <code>myclass</code>. it calls a different function depending on\r\n * whether the fetch succeeded or not.\r\n *\r\n * <pre>\r\n * var query = new Parse.Query(myclass);\r\n * query.find().then((results) => {\r\n *   // results is an array of parse.object.\r\n * }).catch((error) =>  {\r\n *  // error is an instance of parse.error.\r\n * });</pre></p>\r\n *\r\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\r\n * known, through the get method. for example, this sample code fetches an\r\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\r\n * different function depending on whether the fetch succeeded or not.\r\n *\r\n * <pre>\r\n * var query = new Parse.Query(myclass);\r\n * query.get(myid).then((object) => {\r\n *     // object is an instance of parse.object.\r\n * }).catch((error) =>  {\r\n *  // error is an instance of parse.error.\r\n * });</pre></p>\r\n *\r\n * <p>a Parse.Query can also be used to count the number of objects that match\r\n * the query without retrieving all of those objects. for example, this\r\n * sample code counts the number of objects of the class <code>myclass</code>\r\n * <pre>\r\n * var query = new Parse.Query(myclass);\r\n * query.count().then((number) => {\r\n *     // there are number instances of myclass.\r\n * }).catch((error) => {\r\n *     // error is an instance of Parse.Error.\r\n * });</pre></p>\r\n *\r\n * @alias Parse.Query\r\n */\r\n\r\n\r\nvar ParseQuery = /*#__PURE__*/function () {\r\n  /**\r\n   * @property {string} className\r\n   */\r\n\r\n  /**\r\n   * @param {(string | Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\r\n   */\r\n  function ParseQuery(objectClass\r\n  /*: string | ParseObject*/\r\n  ) {\r\n    (0, _classCallCheck2.default)(this, ParseQuery);\r\n    (0, _defineProperty2.default)(this, \"className\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_hint\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_explain\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\r\n\r\n    if (typeof objectClass === 'string') {\r\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\r\n        this.className = '_User';\r\n      } else {\r\n        this.className = objectClass;\r\n      }\r\n    } else if (objectClass instanceof _ParseObject.default) {\r\n      this.className = objectClass.className;\r\n    } else if (typeof objectClass === 'function') {\r\n      if (typeof objectClass.className === 'string') {\r\n        this.className = objectClass.className;\r\n      } else {\r\n        var _obj2 = new objectClass();\r\n\r\n        this.className = _obj2.className;\r\n      }\r\n    } else {\r\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\r\n    }\r\n\r\n    this._where = {};\r\n    this._include = [];\r\n    this._exclude = [];\r\n    this._count = false;\r\n    this._limit = -1; // negative limit is not sent in the server request\r\n\r\n    this._skip = 0;\r\n    this._readPreference = null;\r\n    this._includeReadPreference = null;\r\n    this._subqueryReadPreference = null;\r\n    this._queriesLocalDatastore = false;\r\n    this._localDatastorePinName = null;\r\n    this._extraOptions = {};\r\n    this._xhrRequest = {\r\n      task: null,\r\n      onchange: function () {}\r\n    };\r\n  }\r\n  /**\r\n   * Adds constraint that at least one of the passed in queries matches.\r\n   *\r\n   * @param {Array} queries\r\n   * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n   */\r\n\r\n\r\n  (0, _createClass2.default)(ParseQuery, [{\r\n    key: \"_orQuery\",\r\n    value: function (queries\r\n    /*: Array<ParseQuery>*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\r\n        return q.toJSON().where;\r\n      });\r\n      this._where.$or = queryJSON;\r\n      return this;\r\n    }\r\n    /**\r\n     * Adds constraint that all of the passed in queries match.\r\n     *\r\n     * @param {Array} queries\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"_andQuery\",\r\n    value: function (queries\r\n    /*: Array<ParseQuery>*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\r\n        return q.toJSON().where;\r\n      });\r\n      this._where.$and = queryJSON;\r\n      return this;\r\n    }\r\n    /**\r\n     * Adds constraint that none of the passed in queries match.\r\n     *\r\n     * @param {Array} queries\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"_norQuery\",\r\n    value: function (queries\r\n    /*: Array<ParseQuery>*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\r\n        return q.toJSON().where;\r\n      });\r\n      this._where.$nor = queryJSON;\r\n      return this;\r\n    }\r\n    /**\r\n     * Helper for condition queries\r\n     *\r\n     * @param key\r\n     * @param condition\r\n     * @param value\r\n     * @returns {Parse.Query}\r\n     */\r\n\r\n  }, {\r\n    key: \"_addCondition\",\r\n    value: function (key\r\n    /*: string*/\r\n    , condition\r\n    /*: string*/\r\n    , value\r\n    /*: mixed*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      if (!this._where[key] || typeof this._where[key] === 'string') {\r\n        this._where[key] = {};\r\n      }\r\n\r\n      this._where[key][condition] = (0, _encode.default)(value, false, true);\r\n      return this;\r\n    }\r\n    /**\r\n     * Converts string for regular expression at the beginning\r\n     *\r\n     * @param string\r\n     * @returns {string}\r\n     */\r\n\r\n  }, {\r\n    key: \"_regexStartWith\",\r\n    value: function (string\r\n    /*: string*/\r\n    )\r\n    /*: string*/\r\n    {\r\n      return '^' + quote(string);\r\n    }\r\n  }, {\r\n    key: \"_handleOfflineQuery\",\r\n    value: function () {\r\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params\r\n      /*: any*/\r\n      ) {\r\n        var _context,\r\n            _this2 = this;\r\n\r\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\r\n        return _regeneratorRuntime().wrap(function (_context3) {\r\n          while (1) {\r\n            switch (_context3.prev = _context3.next) {\r\n              case 0:\r\n                _OfflineQuery.default.validateQuery(this);\r\n\r\n                localDatastore = _CoreManager.default.getLocalDatastore();\r\n                _context3.next = 4;\r\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\r\n\r\n              case 4:\r\n                objects = _context3.sent;\r\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\r\n                  var object = _ParseObject.default.fromJSON(json, false);\r\n\r\n                  if (json._localId && !json.objectId) {\r\n                    object._localId = json._localId;\r\n                  }\r\n\r\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\r\n                    return null;\r\n                  }\r\n\r\n                  return object;\r\n                })).call(_context, function (object) {\r\n                  return object !== null;\r\n                });\r\n\r\n                if ((0, _keys.default)(params)) {\r\n                  keys = (0, _keys.default)(params).split(',');\r\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\r\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\r\n                  results = (0, _map2.default)(results).call(results, function (object) {\r\n                    var _context2;\r\n\r\n                    var json = object._toFullJSON();\r\n\r\n                    (0, _forEach.default)(_context2 = (0, _keys2.default)(json)).call(_context2, function (key) {\r\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\r\n                        delete json[key];\r\n                      }\r\n                    });\r\n                    return _ParseObject.default.fromJSON(json, false);\r\n                  });\r\n                }\r\n\r\n                if (params.order) {\r\n                  sorts = params.order.split(',');\r\n                  (0, _sort.default)(results).call(results, function (a, b) {\r\n                    return handleOfflineSort(a, b, sorts);\r\n                  });\r\n                } // count total before applying limit/skip\r\n\r\n\r\n                if (params.count) {\r\n                  count = results.length; // total count from response\r\n                }\r\n\r\n                if (params.skip) {\r\n                  if (params.skip >= results.length) {\r\n                    results = [];\r\n                  } else {\r\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\r\n                  }\r\n                }\r\n\r\n                limit = results.length;\r\n\r\n                if (params.limit !== 0 && params.limit < results.length) {\r\n                  limit = params.limit;\r\n                }\r\n\r\n                results = (0, _splice.default)(results).call(results, 0, limit);\r\n\r\n                if (!(typeof count === 'number')) {\r\n                  _context3.next = 15;\r\n                  break;\r\n                }\r\n\r\n                return _context3.abrupt(\"return\", {\r\n                  results: results,\r\n                  count: count\r\n                });\r\n\r\n              case 15:\r\n                return _context3.abrupt(\"return\", results);\r\n\r\n              case 16:\r\n              case \"end\":\r\n                return _context3.stop();\r\n            }\r\n          }\r\n        }, _callee, this);\r\n      }));\r\n\r\n      function _handleOfflineQuery() {\r\n        return _handleOfflineQuery2.apply(this, arguments);\r\n      }\r\n\r\n      return _handleOfflineQuery;\r\n    }()\r\n    /**\r\n     * Returns a JSON representation of this query.\r\n     *\r\n     * @returns {object} The JSON representation of the query.\r\n     */\r\n\r\n  }, {\r\n    key: \"toJSON\",\r\n    value: function ()\r\n    /*: QueryJSON*/\r\n    {\r\n      var params\r\n      /*: QueryJSON*/\r\n      = {\r\n        where: this._where\r\n      };\r\n\r\n      if (this._include.length) {\r\n        params.include = this._include.join(',');\r\n      }\r\n\r\n      if (this._exclude.length) {\r\n        params.excludeKeys = this._exclude.join(',');\r\n      }\r\n\r\n      if (this._select) {\r\n        params.keys = this._select.join(',');\r\n      }\r\n\r\n      if (this._count) {\r\n        params.count = 1;\r\n      }\r\n\r\n      if (this._limit >= 0) {\r\n        params.limit = this._limit;\r\n      }\r\n\r\n      if (this._skip > 0) {\r\n        params.skip = this._skip;\r\n      }\r\n\r\n      if (this._order) {\r\n        params.order = this._order.join(',');\r\n      }\r\n\r\n      if (this._readPreference) {\r\n        params.readPreference = this._readPreference;\r\n      }\r\n\r\n      if (this._includeReadPreference) {\r\n        params.includeReadPreference = this._includeReadPreference;\r\n      }\r\n\r\n      if (this._subqueryReadPreference) {\r\n        params.subqueryReadPreference = this._subqueryReadPreference;\r\n      }\r\n\r\n      if (this._hint) {\r\n        params.hint = this._hint;\r\n      }\r\n\r\n      if (this._explain) {\r\n        params.explain = true;\r\n      }\r\n\r\n      for (var _key3 in this._extraOptions) {\r\n        params[_key3] = this._extraOptions[_key3];\r\n      }\r\n\r\n      return params;\r\n    }\r\n    /**\r\n     * Return a query with conditions from json, can be useful to send query from server side to client\r\n     * Not static, all query conditions was set before calling this method will be deleted.\r\n     * For example on the server side we have\r\n     * var query = new Parse.Query(\"className\");\r\n     * query.equalTo(key: value);\r\n     * query.limit(100);\r\n     * ... (others queries)\r\n     * Create JSON representation of Query Object\r\n     * var jsonFromServer = query.fromJSON();\r\n     *\r\n     * On client side getting query:\r\n     * var query = new Parse.Query(\"className\");\r\n     * query.fromJSON(jsonFromServer);\r\n     *\r\n     * and continue to query...\r\n     * query.skip(100).find().then(...);\r\n     *\r\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"withJSON\",\r\n    value: function (json\r\n    /*: QueryJSON*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      if (json.where) {\r\n        this._where = json.where;\r\n      }\r\n\r\n      if (json.include) {\r\n        this._include = json.include.split(',');\r\n      }\r\n\r\n      if ((0, _keys.default)(json)) {\r\n        this._select = (0, _keys.default)(json).split(',');\r\n      }\r\n\r\n      if (json.excludeKeys) {\r\n        this._exclude = json.excludeKeys.split(',');\r\n      }\r\n\r\n      if (json.count) {\r\n        this._count = json.count === 1;\r\n      }\r\n\r\n      if (json.limit) {\r\n        this._limit = json.limit;\r\n      }\r\n\r\n      if (json.skip) {\r\n        this._skip = json.skip;\r\n      }\r\n\r\n      if (json.order) {\r\n        this._order = json.order.split(',');\r\n      }\r\n\r\n      if (json.readPreference) {\r\n        this._readPreference = json.readPreference;\r\n      }\r\n\r\n      if (json.includeReadPreference) {\r\n        this._includeReadPreference = json.includeReadPreference;\r\n      }\r\n\r\n      if (json.subqueryReadPreference) {\r\n        this._subqueryReadPreference = json.subqueryReadPreference;\r\n      }\r\n\r\n      if (json.hint) {\r\n        this._hint = json.hint;\r\n      }\r\n\r\n      if (json.explain) {\r\n        this._explain = !!json.explain;\r\n      }\r\n\r\n      for (var _key4 in json) {\r\n        if (json.hasOwnProperty(_key4)) {\r\n          var _context4;\r\n\r\n          if ((0, _indexOf.default)(_context4 = ['where', 'include', 'keys', 'count', 'limit', 'skip', 'order', 'readPreference', 'includeReadPreference', 'subqueryReadPreference', 'hint', 'explain']).call(_context4, _key4) === -1) {\r\n            this._extraOptions[_key4] = json[_key4];\r\n          }\r\n        }\r\n      }\r\n\r\n      return this;\r\n    }\r\n    /**\r\n     * Static method to restore Parse.Query by json representation\r\n     * Internally calling Parse.Query.withJSON\r\n     *\r\n     * @param {string} className\r\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\r\n     * @returns {Parse.Query} new created query\r\n     */\r\n\r\n  }, {\r\n    key: \"get\",\r\n    value:\r\n    /**\r\n     * Constructs a Parse.Object whose id is already known by fetching data from\r\n     * the server. Unlike the <code>first</code> method, it never returns undefined.\r\n     *\r\n     * @param {string} objectId The id of the object to be fetched.\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     *   <li>json: Return raw json without converting to Parse.Object\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the result when\r\n     * the query completes.\r\n     */\r\n    function (objectId\r\n    /*: string*/\r\n    , options\r\n    /*:: ?: FullOptions*/\r\n    )\r\n    /*: Promise<ParseObject>*/\r\n    {\r\n      this.equalTo('objectId', objectId);\r\n      var firstOptions = {};\r\n\r\n      if (options && options.hasOwnProperty('useMasterKey')) {\r\n        firstOptions.useMasterKey = options.useMasterKey;\r\n      }\r\n\r\n      if (options && options.hasOwnProperty('sessionToken')) {\r\n        firstOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      if (options && options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\r\n        firstOptions.context = options.context;\r\n      }\r\n\r\n      if (options && options.hasOwnProperty('json')) {\r\n        firstOptions.json = options.json;\r\n      }\r\n\r\n      return this.first(firstOptions).then(function (response) {\r\n        if (response) {\r\n          return response;\r\n        }\r\n\r\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\r\n        return _promise.default.reject(errorObject);\r\n      });\r\n    }\r\n    /**\r\n     * Retrieves a list of ParseObjects that satisfy this query.\r\n     *\r\n     * @param {object} options Valid options\r\n     * are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     *   <li>json: Return raw json without converting to Parse.Object\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the results when\r\n     * the query completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"find\",\r\n    value: function (options\r\n    /*:: ?: FullOptions*/\r\n    )\r\n    /*: Promise<Array<ParseObject>>*/\r\n    {\r\n      var _this3 = this;\r\n\r\n      options = options || {};\r\n      var findOptions = {};\r\n\r\n      if (options.hasOwnProperty('useMasterKey')) {\r\n        findOptions.useMasterKey = options.useMasterKey;\r\n      }\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        findOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\r\n        findOptions.context = options.context;\r\n      }\r\n\r\n      this._setRequestTask(findOptions);\r\n\r\n      var controller = _CoreManager.default.getQueryController();\r\n\r\n      var select = this._select;\r\n\r\n      if (this._queriesLocalDatastore) {\r\n        return this._handleOfflineQuery(this.toJSON());\r\n      }\r\n\r\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\r\n        var _context5; // Return generic object when explain is used\r\n\r\n\r\n        if (_this3._explain) {\r\n          return response.results;\r\n        }\r\n\r\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\r\n          // In cases of relations, the server may send back a className\r\n          // on the top level of the payload\r\n          var override = response.className || _this3.className;\r\n\r\n          if (!data.className) {\r\n            data.className = override;\r\n          } // Make sure the data object contains keys for all objects that\r\n          // have been requested with a select, so that our cached state\r\n          // updates correctly.\r\n\r\n\r\n          if (select) {\r\n            handleSelectResult(data, select);\r\n          }\r\n\r\n          if (options.json) {\r\n            return data;\r\n          } else {\r\n            return _ParseObject.default.fromJSON(data, !select);\r\n          }\r\n        });\r\n        var count = response.count;\r\n\r\n        if (typeof count === 'number') {\r\n          return {\r\n            results: results,\r\n            count: count\r\n          };\r\n        } else {\r\n          return results;\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * Retrieves a complete list of ParseObjects that satisfy this query.\r\n     * Using `eachBatch` under the hood to fetch all the valid objects.\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is resolved with the results when\r\n     * the query completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"findAll\",\r\n    value: function () {\r\n      var _findAll = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(options\r\n      /*:: ?: BatchOptions*/\r\n      ) {\r\n        var result;\r\n        return _regeneratorRuntime().wrap(function _callee2$(_context7) {\r\n          while (1) {\r\n            switch (_context7.prev = _context7.next) {\r\n              case 0:\r\n                result\r\n                /*: ParseObject[]*/\r\n                = [];\r\n                _context7.next = 3;\r\n                return this.eachBatch(function (objects\r\n                /*: ParseObject[]*/\r\n                ) {\r\n                  var _context6;\r\n\r\n                  result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));\r\n                }, options);\r\n\r\n              case 3:\r\n                return _context7.abrupt(\"return\", result);\r\n\r\n              case 4:\r\n              case \"end\":\r\n                return _context7.stop();\r\n            }\r\n          }\r\n        }, _callee2, this);\r\n      }));\r\n\r\n      function findAll(_x2) {\r\n        return _findAll.apply(this, arguments);\r\n      }\r\n\r\n      return findAll;\r\n    }()\r\n    /**\r\n     * Counts the number of objects that match this query.\r\n     *\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the count when\r\n     * the query completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"count\",\r\n    value: function count(options\r\n    /*:: ?: FullOptions*/\r\n    )\r\n    /*: Promise<number>*/\r\n    {\r\n      options = options || {};\r\n      var findOptions = {};\r\n\r\n      if (options.hasOwnProperty('useMasterKey')) {\r\n        findOptions.useMasterKey = options.useMasterKey;\r\n      }\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        findOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      this._setRequestTask(findOptions);\r\n\r\n      var controller = _CoreManager.default.getQueryController();\r\n\r\n      var params = this.toJSON();\r\n      params.limit = 0;\r\n      params.count = 1;\r\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\r\n        return result.count;\r\n      });\r\n    }\r\n    /**\r\n     * Executes a distinct query and returns unique values\r\n     *\r\n     * @param {string} key A field to find distinct values\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the query completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"distinct\",\r\n    value: function distinct(key\r\n    /*: string*/\r\n    , options\r\n    /*:: ?: FullOptions*/\r\n    )\r\n    /*: Promise<Array<mixed>>*/\r\n    {\r\n      options = options || {};\r\n      var distinctOptions = {};\r\n      distinctOptions.useMasterKey = true;\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        distinctOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      this._setRequestTask(distinctOptions);\r\n\r\n      var controller = _CoreManager.default.getQueryController();\r\n\r\n      var params = {\r\n        distinct: key,\r\n        where: this._where,\r\n        hint: this._hint\r\n      };\r\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\r\n        return results.results;\r\n      });\r\n    }\r\n    /**\r\n     * Executes an aggregate query and returns aggregate results\r\n     *\r\n     * @param {(Array|object)} pipeline Array or Object of stages to process query\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the query completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"aggregate\",\r\n    value: function aggregate(pipeline\r\n    /*: mixed*/\r\n    , options\r\n    /*:: ?: FullOptions*/\r\n    )\r\n    /*: Promise<Array<mixed>>*/\r\n    {\r\n      options = options || {};\r\n      var aggregateOptions = {};\r\n      aggregateOptions.useMasterKey = true;\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        aggregateOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      this._setRequestTask(aggregateOptions);\r\n\r\n      var controller = _CoreManager.default.getQueryController();\r\n\r\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\r\n        throw new Error('Invalid pipeline must be Array or Object');\r\n      }\r\n\r\n      if ((0, _keys2.default)(this._where || {}).length) {\r\n        if (!(0, _isArray.default)(pipeline)) {\r\n          pipeline = [pipeline];\r\n        }\r\n\r\n        pipeline.unshift({\r\n          match: this._where\r\n        });\r\n      }\r\n\r\n      var params = {\r\n        pipeline: pipeline,\r\n        hint: this._hint,\r\n        explain: this._explain,\r\n        readPreference: this._readPreference\r\n      };\r\n      return controller.aggregate(this.className, params, aggregateOptions).then(function (results) {\r\n        return results.results;\r\n      });\r\n    }\r\n    /**\r\n     * Retrieves at most one Parse.Object that satisfies this query.\r\n     *\r\n     * Returns the object if there is one, otherwise undefined.\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     *   <li>json: Return raw json without converting to Parse.Object\r\n     * </ul>\r\n     *\r\n     * @returns {Promise} A promise that is resolved with the object when\r\n     * the query completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"first\",\r\n    value: function first(options\r\n    /*:: ?: FullOptions*/\r\n    )\r\n    /*: Promise<ParseObject | void>*/\r\n    {\r\n      var _this4 = this;\r\n\r\n      options = options || {};\r\n      var findOptions = {};\r\n\r\n      if (options.hasOwnProperty('useMasterKey')) {\r\n        findOptions.useMasterKey = options.useMasterKey;\r\n      }\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        findOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\r\n        findOptions.context = options.context;\r\n      }\r\n\r\n      this._setRequestTask(findOptions);\r\n\r\n      var controller = _CoreManager.default.getQueryController();\r\n\r\n      var params = this.toJSON();\r\n      params.limit = 1;\r\n      var select = this._select;\r\n\r\n      if (this._queriesLocalDatastore) {\r\n        return this._handleOfflineQuery(params).then(function (objects) {\r\n          if (!objects[0]) {\r\n            return undefined;\r\n          }\r\n\r\n          return objects[0];\r\n        });\r\n      }\r\n\r\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\r\n        var objects = response.results;\r\n\r\n        if (!objects[0]) {\r\n          return undefined;\r\n        }\r\n\r\n        if (!objects[0].className) {\r\n          objects[0].className = _this4.className;\r\n        } // Make sure the data object contains keys for all objects that\r\n        // have been requested with a select, so that our cached state\r\n        // updates correctly.\r\n\r\n\r\n        if (select) {\r\n          handleSelectResult(objects[0], select);\r\n        }\r\n\r\n        if (options.json) {\r\n          return objects[0];\r\n        } else {\r\n          return _ParseObject.default.fromJSON(objects[0], !select);\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * Iterates over objects matching a query, calling a callback for each batch.\r\n     * If the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are processed\r\n     * in an unspecified order. The query may not have any sort order, and may\r\n     * not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback that will be called with each result\r\n     *     of the query.\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\r\n\r\n  }, {\r\n    key: \"eachBatch\",\r\n    value: function eachBatch(callback\r\n    /*: (objs: Array<ParseObject>) => Promise<*>*/\r\n    , options\r\n    /*:: ?: BatchOptions*/\r\n    )\r\n    /*: Promise<void>*/\r\n    {\r\n      var _context8;\r\n\r\n      options = options || {};\r\n\r\n      if (this._order || this._skip || this._limit >= 0) {\r\n        var error = 'Cannot iterate on a query with sort, skip, or limit.';\r\n        return _promise.default.reject(error);\r\n      }\r\n\r\n      var query = new ParseQuery(this.className);\r\n      query._limit = options.batchSize || 100;\r\n      query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function (i) {\r\n        return i;\r\n      });\r\n\r\n      if (this._select) {\r\n        var _context9;\r\n\r\n        query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function (s) {\r\n          return s;\r\n        });\r\n      }\r\n\r\n      query._hint = this._hint;\r\n      query._where = {};\r\n\r\n      for (var _attr in this._where) {\r\n        var val = this._where[_attr];\r\n\r\n        if ((0, _isArray.default)(val)) {\r\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\r\n            return v;\r\n          });\r\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\r\n          var conditionMap = {};\r\n          query._where[_attr] = conditionMap;\r\n\r\n          for (var cond in val) {\r\n            conditionMap[cond] = val[cond];\r\n          }\r\n        } else {\r\n          query._where[_attr] = val;\r\n        }\r\n      }\r\n\r\n      query.ascending('objectId');\r\n      var findOptions = {};\r\n\r\n      if (options.hasOwnProperty('useMasterKey')) {\r\n        findOptions.useMasterKey = options.useMasterKey;\r\n      }\r\n\r\n      if (options.hasOwnProperty('sessionToken')) {\r\n        findOptions.sessionToken = options.sessionToken;\r\n      }\r\n\r\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\r\n        findOptions.context = options.context;\r\n      }\r\n\r\n      if (options.hasOwnProperty('json')) {\r\n        findOptions.json = options.json;\r\n      }\r\n\r\n      var finished = false;\r\n      var previousResults = [];\r\n      return (0, _promiseUtils.continueWhile)(function () {\r\n        return !finished;\r\n      }, /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\r\n        var _yield$Promise$all, _yield$Promise$all2, results;\r\n\r\n        return _regeneratorRuntime().wrap(function _callee3$(_context10) {\r\n          while (1) {\r\n            switch (_context10.prev = _context10.next) {\r\n              case 0:\r\n                _context10.next = 2;\r\n                return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);\r\n\r\n              case 2:\r\n                _yield$Promise$all = _context10.sent;\r\n                _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);\r\n                results = _yield$Promise$all2[0];\r\n\r\n                if (!(results.length >= query._limit)) {\r\n                  _context10.next = 10;\r\n                  break;\r\n                }\r\n\r\n                query.greaterThan('objectId', results[results.length - 1].id);\r\n                previousResults = results;\r\n                _context10.next = 17;\r\n                break;\r\n\r\n              case 10:\r\n                if (!(results.length > 0)) {\r\n                  _context10.next = 16;\r\n                  break;\r\n                }\r\n\r\n                _context10.next = 13;\r\n                return _promise.default.resolve(callback(results));\r\n\r\n              case 13:\r\n                finished = true;\r\n                _context10.next = 17;\r\n                break;\r\n\r\n              case 16:\r\n                finished = true;\r\n\r\n              case 17:\r\n              case \"end\":\r\n                return _context10.stop();\r\n            }\r\n          }\r\n        }, _callee3);\r\n      })));\r\n    }\r\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback that will be called with each result\r\n     *     of the query.\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     *   <li>json: Return raw json without converting to Parse.Object\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\r\n\r\n  }, {\r\n    key: \"each\",\r\n    value: function each(callback\r\n    /*: (obj: ParseObject) => any*/\r\n    , options\r\n    /*:: ?: BatchOptions*/\r\n    )\r\n    /*: Promise<void>*/\r\n    {\r\n      return this.eachBatch(function (results) {\r\n        var callbacksDone = _promise.default.resolve();\r\n\r\n        (0, _forEach.default)(results).call(results, function (result) {\r\n          callbacksDone = callbacksDone.then(function () {\r\n            return callback(result);\r\n          });\r\n        });\r\n        return callbacksDone;\r\n      }, options);\r\n    }\r\n    /**\r\n     * Adds a hint to force index selection. (https://docs.mongodb.com/manual/reference/operator/meta/hint/)\r\n     *\r\n     * @param {(string|object)} value String or Object of index that should be used when executing query\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"hint\",\r\n    value: function hint(value\r\n    /*: mixed*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      if (typeof value === 'undefined') {\r\n        delete this._hint;\r\n      }\r\n\r\n      this._hint = value;\r\n      return this;\r\n    }\r\n    /**\r\n     * Investigates the query execution plan. Useful for optimizing queries. (https://docs.mongodb.com/manual/reference/operator/meta/explain/)\r\n     *\r\n     * @param {boolean} explain Used to toggle the information on the query plan.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"explain\",\r\n    value: function explain()\r\n    /*: ParseQuery*/\r\n    {\r\n      var _explain\r\n      /*: boolean*/\r\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n\r\n      if (typeof _explain !== 'boolean') {\r\n        throw new Error('You can only set explain to a boolean value');\r\n      }\r\n\r\n      this._explain = _explain;\r\n      return this;\r\n    }\r\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback <ul>\r\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\r\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\r\n     *   <li>query: The query map was called upon.</li>\r\n     * </ul>\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\r\n\r\n  }, {\r\n    key: \"map\",\r\n    value: function () {\r\n      var _map = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(callback\r\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/\r\n      , options\r\n      /*:: ?: BatchOptions*/\r\n      ) {\r\n        var _this5 = this;\r\n\r\n        var array, index;\r\n        return _regeneratorRuntime().wrap(function _callee4$(_context11) {\r\n          while (1) {\r\n            switch (_context11.prev = _context11.next) {\r\n              case 0:\r\n                array = [];\r\n                index = 0;\r\n                _context11.next = 4;\r\n                return this.each(function (object) {\r\n                  return _promise.default.resolve(callback(object, index, _this5)).then(function (result) {\r\n                    array.push(result);\r\n                    index += 1;\r\n                  });\r\n                }, options);\r\n\r\n              case 4:\r\n                return _context11.abrupt(\"return\", array);\r\n\r\n              case 5:\r\n              case \"end\":\r\n                return _context11.stop();\r\n            }\r\n          }\r\n        }, _callee4, this);\r\n      }));\r\n\r\n      function map(_x3, _x4) {\r\n        return _map.apply(this, arguments);\r\n      }\r\n\r\n      return map;\r\n    }()\r\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback <ul>\r\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\r\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\r\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\r\n     * </ul>\r\n     * @param {*} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\r\n\r\n  }, {\r\n    key: \"reduce\",\r\n    value: function () {\r\n      var _reduce = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(callback\r\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/\r\n      , initialValue\r\n      /*: any*/\r\n      , options\r\n      /*:: ?: BatchOptions*/\r\n      ) {\r\n        var accumulator, index;\r\n        return _regeneratorRuntime().wrap(function _callee5$(_context12) {\r\n          while (1) {\r\n            switch (_context12.prev = _context12.next) {\r\n              case 0:\r\n                accumulator = initialValue;\r\n                index = 0;\r\n                _context12.next = 4;\r\n                return this.each(function (object) {\r\n                  // If no initial value was given, we take the first object from the query\r\n                  // as the initial value and don't call the callback with it.\r\n                  if (index === 0 && initialValue === undefined) {\r\n                    accumulator = object;\r\n                    index += 1;\r\n                    return;\r\n                  }\r\n\r\n                  return _promise.default.resolve(callback(accumulator, object, index)).then(function (result) {\r\n                    accumulator = result;\r\n                    index += 1;\r\n                  });\r\n                }, options);\r\n\r\n              case 4:\r\n                if (!(index === 0 && initialValue === undefined)) {\r\n                  _context12.next = 6;\r\n                  break;\r\n                }\r\n\r\n                throw new TypeError('Reducing empty query result set with no initial value');\r\n\r\n              case 6:\r\n                return _context12.abrupt(\"return\", accumulator);\r\n\r\n              case 7:\r\n              case \"end\":\r\n                return _context12.stop();\r\n            }\r\n          }\r\n        }, _callee5, this);\r\n      }));\r\n\r\n      function reduce(_x5, _x6, _x7) {\r\n        return _reduce.apply(this, arguments);\r\n      }\r\n\r\n      return reduce;\r\n    }()\r\n    /**\r\n     * Iterates over each result of a query, calling a callback for each one. If\r\n     * the callback returns a promise, the iteration will not continue until\r\n     * that promise has been fulfilled. If the callback returns a rejected\r\n     * promise, then iteration will stop with that error. The items are\r\n     * processed in an unspecified order. The query may not have any sort order,\r\n     * and may not use limit or skip.\r\n     *\r\n     * @param {Function} callback Callback <ul>\r\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\r\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\r\n     *   <li>query: The query filter was called upon.</li>\r\n     * </ul>\r\n     *\r\n     * @param {object} options Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     *   <li>sessionToken: A valid session token, used for making a request on\r\n     *       behalf of a specific user.\r\n     * </ul>\r\n     * @returns {Promise} A promise that will be fulfilled once the\r\n     *     iteration has completed.\r\n     */\r\n\r\n  }, {\r\n    key: \"filter\",\r\n    value: function () {\r\n      var _filter = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(callback\r\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/\r\n      , options\r\n      /*:: ?: BatchOptions*/\r\n      ) {\r\n        var _this6 = this;\r\n\r\n        var array, index;\r\n        return _regeneratorRuntime().wrap(function _callee6$(_context13) {\r\n          while (1) {\r\n            switch (_context13.prev = _context13.next) {\r\n              case 0:\r\n                array = [];\r\n                index = 0;\r\n                _context13.next = 4;\r\n                return this.each(function (object) {\r\n                  return _promise.default.resolve(callback(object, index, _this6)).then(function (flag) {\r\n                    if (flag) {\r\n                      array.push(object);\r\n                    }\r\n\r\n                    index += 1;\r\n                  });\r\n                }, options);\r\n\r\n              case 4:\r\n                return _context13.abrupt(\"return\", array);\r\n\r\n              case 5:\r\n              case \"end\":\r\n                return _context13.stop();\r\n            }\r\n          }\r\n        }, _callee6, this);\r\n      }));\r\n\r\n      function filter(_x8, _x9) {\r\n        return _filter.apply(this, arguments);\r\n      }\r\n\r\n      return filter;\r\n    }()\r\n    /** Query Conditions **/\r\n\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that the Parse.Object must contain.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"equalTo\",\r\n    value: function equalTo(key\r\n    /*: string | { [key: string]: any }*/\r\n    , value\r\n    /*: ?mixed*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var _this7 = this;\r\n\r\n      if (key && (0, _typeof2.default)(key) === 'object') {\r\n        var _context14;\r\n\r\n        (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function (_ref2) {\r\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\r\n              k = _ref3[0],\r\n              val = _ref3[1];\r\n\r\n          return _this7.equalTo(k, val);\r\n        });\r\n        return this;\r\n      }\r\n\r\n      if (typeof value === 'undefined') {\r\n        return this.doesNotExist(key);\r\n      }\r\n\r\n      this._where[key] = (0, _encode.default)(value, false, true);\r\n      return this;\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be not equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that must not be equalled.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"notEqualTo\",\r\n    value: function notEqualTo(key\r\n    /*: string | { [key: string]: any }*/\r\n    , value\r\n    /*: ?mixed*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var _this8 = this;\r\n\r\n      if (key && (0, _typeof2.default)(key) === 'object') {\r\n        var _context15;\r\n\r\n        (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function (_ref4) {\r\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\r\n              k = _ref5[0],\r\n              val = _ref5[1];\r\n\r\n          return _this8.notEqualTo(k, val);\r\n        });\r\n        return this;\r\n      }\r\n\r\n      return this._addCondition(key, '$ne', value);\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be less than the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that provides an upper bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"lessThan\",\r\n    value: function lessThan(key\r\n    /*: string*/\r\n    , value\r\n    /*: mixed*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$lt', value);\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be greater than the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that provides an lower bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"greaterThan\",\r\n    value: function greaterThan(key\r\n    /*: string*/\r\n    , value\r\n    /*: mixed*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$gt', value);\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be less than or equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param value The value that provides an upper bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"lessThanOrEqualTo\",\r\n    value: function lessThanOrEqualTo(key\r\n    /*: string*/\r\n    , value\r\n    /*: mixed*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$lte', value);\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be greater than or equal to the provided value.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {*} value The value that provides an lower bound.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"greaterThanOrEqualTo\",\r\n    value: function greaterThanOrEqualTo(key\r\n    /*: string*/\r\n    , value\r\n    /*: mixed*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$gte', value);\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be contained in the provided list of values.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {*} value The values that will match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"containedIn\",\r\n    value: function containedIn(key\r\n    /*: string*/\r\n    , value\r\n    /*: mixed*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$in', value);\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * not be contained in the provided list of values.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {*} value The values that will not match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"notContainedIn\",\r\n    value: function notContainedIn(key\r\n    /*: string*/\r\n    , value\r\n    /*: mixed*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$nin', value);\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * be contained by the provided list of values. Get objects where all array elements match.\r\n     *\r\n     * @param {string} key The key to check.\r\n     * @param {Array} values The values that will match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"containedBy\",\r\n    value: function containedBy(key\r\n    /*: string*/\r\n    , values\r\n    /*: Array<mixed>*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$containedBy', values);\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * contain each one of the provided list of values.\r\n     *\r\n     * @param {string} key The key to check.  This key's value must be an array.\r\n     * @param {Array} values The values that will match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"containsAll\",\r\n    value: function containsAll(key\r\n    /*: string*/\r\n    , values\r\n    /*: Array<mixed>*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$all', values);\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's value to\r\n     * contain each one of the provided list of values starting with given strings.\r\n     *\r\n     * @param {string} key The key to check.  This key's value must be an array.\r\n     * @param {Array<string>} values The string values that will match as starting string.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"containsAllStartingWith\",\r\n    value: function containsAllStartingWith(key\r\n    /*: string*/\r\n    , values\r\n    /*: Array<string>*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var _this = this;\r\n\r\n      if (!(0, _isArray.default)(values)) {\r\n        values = [values];\r\n      }\r\n\r\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\r\n        return {\r\n          $regex: _this._regexStartWith(value)\r\n        };\r\n      });\r\n      return this.containsAll(key, regexObject);\r\n    }\r\n    /**\r\n     * Adds a constraint for finding objects that contain the given key.\r\n     *\r\n     * @param {string} key The key that should exist.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"exists\",\r\n    value: function exists(key\r\n    /*: string*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$exists', true);\r\n    }\r\n    /**\r\n     * Adds a constraint for finding objects that do not contain a given key.\r\n     *\r\n     * @param {string} key The key that should not exist\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"doesNotExist\",\r\n    value: function doesNotExist(key\r\n    /*: string*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$exists', false);\r\n    }\r\n    /**\r\n     * Adds a regular expression constraint for finding string values that match\r\n     * the provided regular expression.\r\n     * This may be slow for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {RegExp} regex The regular expression pattern to match.\r\n     * @param {string} modifiers The regular expression mode.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"matches\",\r\n    value: function matches(key\r\n    /*: string*/\r\n    , regex\r\n    /*: RegExp*/\r\n    , modifiers\r\n    /*: string*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      this._addCondition(key, '$regex', regex);\r\n\r\n      if (!modifiers) {\r\n        modifiers = '';\r\n      }\r\n\r\n      if (regex.ignoreCase) {\r\n        modifiers += 'i';\r\n      }\r\n\r\n      if (regex.multiline) {\r\n        modifiers += 'm';\r\n      }\r\n\r\n      if (modifiers.length) {\r\n        this._addCondition(key, '$options', modifiers);\r\n      }\r\n\r\n      return this;\r\n    }\r\n    /**\r\n     * Adds a constraint that requires that a key's value matches a Parse.Query\r\n     * constraint.\r\n     *\r\n     * @param {string} key The key that the contains the object to match the\r\n     *                     query.\r\n     * @param {Parse.Query} query The query that should match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"matchesQuery\",\r\n    value: function matchesQuery(key\r\n    /*: string*/\r\n    , query\r\n    /*: ParseQuery*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var queryJSON = query.toJSON();\r\n      queryJSON.className = query.className;\r\n      return this._addCondition(key, '$inQuery', queryJSON);\r\n    }\r\n    /**\r\n     * Adds a constraint that requires that a key's value not matches a\r\n     * Parse.Query constraint.\r\n     *\r\n     * @param {string} key The key that the contains the object to match the\r\n     *                     query.\r\n     * @param {Parse.Query} query The query that should not match.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"doesNotMatchQuery\",\r\n    value: function doesNotMatchQuery(key\r\n    /*: string*/\r\n    , query\r\n    /*: ParseQuery*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var queryJSON = query.toJSON();\r\n      queryJSON.className = query.className;\r\n      return this._addCondition(key, '$notInQuery', queryJSON);\r\n    }\r\n    /**\r\n     * Adds a constraint that requires that a key's value matches a value in\r\n     * an object returned by a different Parse.Query.\r\n     *\r\n     * @param {string} key The key that contains the value that is being\r\n     *                     matched.\r\n     * @param {string} queryKey The key in the objects returned by the query to\r\n     *                          match against.\r\n     * @param {Parse.Query} query The query to run.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"matchesKeyInQuery\",\r\n    value: function matchesKeyInQuery(key\r\n    /*: string*/\r\n    , queryKey\r\n    /*: string*/\r\n    , query\r\n    /*: ParseQuery*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var queryJSON = query.toJSON();\r\n      queryJSON.className = query.className;\r\n      return this._addCondition(key, '$select', {\r\n        key: queryKey,\r\n        query: queryJSON\r\n      });\r\n    }\r\n    /**\r\n     * Adds a constraint that requires that a key's value not match a value in\r\n     * an object returned by a different Parse.Query.\r\n     *\r\n     * @param {string} key The key that contains the value that is being\r\n     *                     excluded.\r\n     * @param {string} queryKey The key in the objects returned by the query to\r\n     *                          match against.\r\n     * @param {Parse.Query} query The query to run.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"doesNotMatchKeyInQuery\",\r\n    value: function doesNotMatchKeyInQuery(key\r\n    /*: string*/\r\n    , queryKey\r\n    /*: string*/\r\n    , query\r\n    /*: ParseQuery*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var queryJSON = query.toJSON();\r\n      queryJSON.className = query.className;\r\n      return this._addCondition(key, '$dontSelect', {\r\n        key: queryKey,\r\n        query: queryJSON\r\n      });\r\n    }\r\n    /**\r\n     * Adds a constraint for finding string values that contain a provided\r\n     * string.  This may be slow for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} substring The substring that the value must contain.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"contains\",\r\n    value: function contains(key\r\n    /*: string*/\r\n    , substring\r\n    /*: string*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      if (typeof substring !== 'string') {\r\n        throw new Error('The value being searched for must be a string.');\r\n      }\r\n\r\n      return this._addCondition(key, '$regex', quote(substring));\r\n    }\r\n    /**\r\n     * Adds a constraint for finding string values that contain a provided\r\n     * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\r\n     *\r\n     * In order to sort you must use select and ascending ($score is required)\r\n     *  <pre>\r\n     *   query.fullText('field', 'term');\r\n     *   query.ascending('$score');\r\n     *   query.select('$score');\r\n     *  </pre>\r\n     *\r\n     * To retrieve the weight / rank\r\n     *  <pre>\r\n     *   object->get('score');\r\n     *  </pre>\r\n     *\r\n     * You can define optionals by providing an object as a third parameter\r\n     *  <pre>\r\n     *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\r\n     *  </pre>\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} value The string to search\r\n     * @param {object} options (Optional)\r\n     * @param {string} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\r\n     * @param {boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\r\n     * @param {boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"fullText\",\r\n    value: function fullText(key\r\n    /*: string*/\r\n    , value\r\n    /*: string*/\r\n    , options\r\n    /*: ?Object*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      options = options || {};\r\n\r\n      if (!key) {\r\n        throw new Error('A key is required.');\r\n      }\r\n\r\n      if (!value) {\r\n        throw new Error('A search term is required');\r\n      }\r\n\r\n      if (typeof value !== 'string') {\r\n        throw new Error('The value being searched for must be a string.');\r\n      }\r\n\r\n      var fullOptions = {};\r\n      fullOptions.$term = value;\r\n\r\n      for (var option in options) {\r\n        switch (option) {\r\n          case 'language':\r\n            fullOptions.$language = options[option];\r\n            break;\r\n\r\n          case 'caseSensitive':\r\n            fullOptions.$caseSensitive = options[option];\r\n            break;\r\n\r\n          case 'diacriticSensitive':\r\n            fullOptions.$diacriticSensitive = options[option];\r\n            break;\r\n\r\n          default:\r\n            throw new Error(\"Unknown option: \".concat(option));\r\n        }\r\n      }\r\n\r\n      return this._addCondition(key, '$text', {\r\n        $search: fullOptions\r\n      });\r\n    }\r\n    /**\r\n     * Method to sort the full text search by text score\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"sortByTextScore\",\r\n    value: function sortByTextScore() {\r\n      this.ascending('$score');\r\n      this.select(['$score']);\r\n      return this;\r\n    }\r\n    /**\r\n     * Adds a constraint for finding string values that start with a provided\r\n     * string.  This query will use the backend index, so it will be fast even\r\n     * for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} prefix The substring that the value must start with.\r\n     * @param {string} modifiers The regular expression mode.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"startsWith\",\r\n    value: function startsWith(key\r\n    /*: string*/\r\n    , prefix\r\n    /*: string*/\r\n    , modifiers\r\n    /*: string*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      if (typeof prefix !== 'string') {\r\n        throw new Error('The value being searched for must be a string.');\r\n      }\r\n\r\n      return this.matches(key, this._regexStartWith(prefix), modifiers);\r\n    }\r\n    /**\r\n     * Adds a constraint for finding string values that end with a provided\r\n     * string.  This will be slow for large datasets.\r\n     *\r\n     * @param {string} key The key that the string to match is stored in.\r\n     * @param {string} suffix The substring that the value must end with.\r\n     * @param {string} modifiers The regular expression mode.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"endsWith\",\r\n    value: function endsWith(key\r\n    /*: string*/\r\n    , suffix\r\n    /*: string*/\r\n    , modifiers\r\n    /*: string*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      if (typeof suffix !== 'string') {\r\n        throw new Error('The value being searched for must be a string.');\r\n      }\r\n\r\n      return this.matches(key, quote(suffix) + '$', modifiers);\r\n    }\r\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"near\",\r\n    value: function near(key\r\n    /*: string*/\r\n    , point\r\n    /*: ParseGeoPoint*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      if (!(point instanceof _ParseGeoPoint.default)) {\r\n        // Try to cast it as a GeoPoint\r\n        point = new _ParseGeoPoint.default(point);\r\n      }\r\n\r\n      return this._addCondition(key, '$nearSphere', point);\r\n    }\r\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given and within the maximum distance given.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @param {number} maxDistance Maximum distance (in radians) of results to return.\r\n     * @param {boolean} sorted A Bool value that is true if results should be\r\n     * sorted by distance ascending, false is no sorting is required,\r\n     * defaults to true.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"withinRadians\",\r\n    value: function withinRadians(key\r\n    /*: string*/\r\n    , point\r\n    /*: ParseGeoPoint*/\r\n    , maxDistance\r\n    /*: number*/\r\n    , sorted\r\n    /*: boolean*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      if (sorted || sorted === undefined) {\r\n        this.near(key, point);\r\n        return this._addCondition(key, '$maxDistance', maxDistance);\r\n      } else {\r\n        return this._addCondition(key, '$geoWithin', {\r\n          $centerSphere: [[point.longitude, point.latitude], maxDistance]\r\n        });\r\n      }\r\n    }\r\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given and within the maximum distance given.\r\n     * Radius of earth used is 3958.8 miles.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @param {number} maxDistance Maximum distance (in miles) of results to return.\r\n     * @param {boolean} sorted A Bool value that is true if results should be\r\n     * sorted by distance ascending, false is no sorting is required,\r\n     * defaults to true.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"withinMiles\",\r\n    value: function withinMiles(key\r\n    /*: string*/\r\n    , point\r\n    /*: ParseGeoPoint*/\r\n    , maxDistance\r\n    /*: number*/\r\n    , sorted\r\n    /*: boolean*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this.withinRadians(key, point, maxDistance / 3958.8, sorted);\r\n    }\r\n    /**\r\n     * Adds a proximity based constraint for finding objects with key point\r\n     * values near the point given and within the maximum distance given.\r\n     * Radius of earth used is 6371.0 kilometers.\r\n     *\r\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\r\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\r\n     * @param {number} maxDistance Maximum distance (in kilometers) of results to return.\r\n     * @param {boolean} sorted A Bool value that is true if results should be\r\n     * sorted by distance ascending, false is no sorting is required,\r\n     * defaults to true.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"withinKilometers\",\r\n    value: function withinKilometers(key\r\n    /*: string*/\r\n    , point\r\n    /*: ParseGeoPoint*/\r\n    , maxDistance\r\n    /*: number*/\r\n    , sorted\r\n    /*: boolean*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this.withinRadians(key, point, maxDistance / 6371.0, sorted);\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's\r\n     * coordinates be contained within a given rectangular geographic bounding\r\n     * box.\r\n     *\r\n     * @param {string} key The key to be constrained.\r\n     * @param {Parse.GeoPoint} southwest\r\n     *     The lower-left inclusive corner of the box.\r\n     * @param {Parse.GeoPoint} northeast\r\n     *     The upper-right inclusive corner of the box.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"withinGeoBox\",\r\n    value: function withinGeoBox(key\r\n    /*: string*/\r\n    , southwest\r\n    /*: ParseGeoPoint*/\r\n    , northeast\r\n    /*: ParseGeoPoint*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\r\n        southwest = new _ParseGeoPoint.default(southwest);\r\n      }\r\n\r\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\r\n        northeast = new _ParseGeoPoint.default(northeast);\r\n      }\r\n\r\n      this._addCondition(key, '$within', {\r\n        $box: [southwest, northeast]\r\n      });\r\n\r\n      return this;\r\n    }\r\n    /**\r\n     * Adds a constraint to the query that requires a particular key's\r\n     * coordinates be contained within and on the bounds of a given polygon.\r\n     * Supports closed and open (last point is connected to first) paths\r\n     *\r\n     * Polygon must have at least 3 points\r\n     *\r\n     * @param {string} key The key to be constrained.\r\n     * @param {Array} points Array of Coordinates / GeoPoints\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"withinPolygon\",\r\n    value: function withinPolygon(key\r\n    /*: string*/\r\n    , points\r\n    /*: Array<Array<number>>*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$geoWithin', {\r\n        $polygon: points\r\n      });\r\n    }\r\n    /**\r\n     * Add a constraint to the query that requires a particular key's\r\n     * coordinates that contains a ParseGeoPoint\r\n     *\r\n     * @param {string} key The key to be constrained.\r\n     * @param {Parse.GeoPoint} point\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"polygonContains\",\r\n    value: function polygonContains(key\r\n    /*: string*/\r\n    , point\r\n    /*: ParseGeoPoint*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      return this._addCondition(key, '$geoIntersects', {\r\n        $point: point\r\n      });\r\n    }\r\n    /** Query Orderings **/\r\n\r\n    /**\r\n     * Sorts the results in ascending order by the given key.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"ascending\",\r\n    value: function ascending()\r\n    /*: ParseQuery*/\r\n    {\r\n      this._order = [];\r\n\r\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\r\n        keys[_key5] = arguments[_key5];\r\n      }\r\n\r\n      return this.addAscending.apply(this, keys);\r\n    }\r\n    /**\r\n     * Sorts the results in ascending order by the given key,\r\n     * but can also add secondary sort descriptors without overwriting _order.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"addAscending\",\r\n    value: function addAscending()\r\n    /*: ParseQuery*/\r\n    {\r\n      var _this9 = this;\r\n\r\n      if (!this._order) {\r\n        this._order = [];\r\n      }\r\n\r\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\r\n        keys[_key6] = arguments[_key6];\r\n      }\r\n\r\n      (0, _forEach.default)(keys).call(keys, function (key) {\r\n        var _context16;\r\n\r\n        if ((0, _isArray.default)(key)) {\r\n          key = key.join();\r\n        }\r\n\r\n        _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\\s/g, '').split(','));\r\n      });\r\n      return this;\r\n    }\r\n    /**\r\n     * Sorts the results in descending order by the given key.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"descending\",\r\n    value: function descending()\r\n    /*: ParseQuery*/\r\n    {\r\n      this._order = [];\r\n\r\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\r\n        keys[_key7] = arguments[_key7];\r\n      }\r\n\r\n      return this.addDescending.apply(this, keys);\r\n    }\r\n    /**\r\n     * Sorts the results in descending order by the given key,\r\n     * but can also add secondary sort descriptors without overwriting _order.\r\n     *\r\n     * @param {(string|string[])} keys The key to order by, which is a\r\n     * string of comma separated values, or an Array of keys, or multiple keys.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"addDescending\",\r\n    value: function addDescending()\r\n    /*: ParseQuery*/\r\n    {\r\n      var _this10 = this;\r\n\r\n      if (!this._order) {\r\n        this._order = [];\r\n      }\r\n\r\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\r\n        keys[_key8] = arguments[_key8];\r\n      }\r\n\r\n      (0, _forEach.default)(keys).call(keys, function (key) {\r\n        var _context17, _context18;\r\n\r\n        if ((0, _isArray.default)(key)) {\r\n          key = key.join();\r\n        }\r\n\r\n        _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\\s/g, '').split(',')).call(_context18, function (k) {\r\n          return '-' + k;\r\n        }));\r\n      });\r\n      return this;\r\n    }\r\n    /** Query Options **/\r\n\r\n    /**\r\n     * Sets the number of results to skip before returning any results.\r\n     * This is useful for pagination.\r\n     * Default is to skip zero results.\r\n     *\r\n     * @param {number} n the number of results to skip.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"skip\",\r\n    value: function skip(n\r\n    /*: number*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      if (typeof n !== 'number' || n < 0) {\r\n        throw new Error('You can only skip by a positive number');\r\n      }\r\n\r\n      this._skip = n;\r\n      return this;\r\n    }\r\n    /**\r\n     * Sets the limit of the number of results to return. The default limit is 100.\r\n     *\r\n     * @param {number} n the number of results to limit to.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"limit\",\r\n    value: function limit(n\r\n    /*: number*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      if (typeof n !== 'number') {\r\n        throw new Error('You can only set the limit to a numeric value');\r\n      }\r\n\r\n      this._limit = n;\r\n      return this;\r\n    }\r\n    /**\r\n     * Sets the flag to include with response the total number of objects satisfying this query,\r\n     * despite limits/skip. Might be useful for pagination.\r\n     * Note that result of this query will be wrapped as an object with\r\n     * `results`: holding {ParseObject} array and `count`: integer holding total number\r\n     *\r\n     * @param {boolean} includeCount false - disable, true - enable.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"withCount\",\r\n    value: function withCount()\r\n    /*: ParseQuery*/\r\n    {\r\n      var includeCount\r\n      /*: boolean*/\r\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n\r\n      if (typeof includeCount !== 'boolean') {\r\n        throw new Error('You can only set withCount to a boolean value');\r\n      }\r\n\r\n      this._count = includeCount;\r\n      return this;\r\n    }\r\n    /**\r\n     * Includes nested Parse.Objects for the provided key.  You can use dot\r\n     * notation to specify which fields in the included object are also fetched.\r\n     *\r\n     * You can include all nested Parse.Objects by passing in '*'.\r\n     * Requires Parse Server 3.0.0+\r\n     * <pre>query.include('*');</pre>\r\n     *\r\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"include\",\r\n    value: function include()\r\n    /*: ParseQuery*/\r\n    {\r\n      var _this11 = this;\r\n\r\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\r\n        keys[_key9] = arguments[_key9];\r\n      }\r\n\r\n      (0, _forEach.default)(keys).call(keys, function (key) {\r\n        if ((0, _isArray.default)(key)) {\r\n          var _context19;\r\n\r\n          _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);\r\n        } else {\r\n          _this11._include.push(key);\r\n        }\r\n      });\r\n      return this;\r\n    }\r\n    /**\r\n     * Includes all nested Parse.Objects one level deep.\r\n     *\r\n     * Requires Parse Server 3.0.0+\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"includeAll\",\r\n    value: function includeAll()\r\n    /*: ParseQuery*/\r\n    {\r\n      return this.include('*');\r\n    }\r\n    /**\r\n     * Restricts the fields of the returned Parse.Objects to include only the\r\n     * provided keys.  If this is called multiple times, then all of the keys\r\n     * specified in each of the calls will be included.\r\n     *\r\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"select\",\r\n    value: function select()\r\n    /*: ParseQuery*/\r\n    {\r\n      var _this12 = this;\r\n\r\n      if (!this._select) {\r\n        this._select = [];\r\n      }\r\n\r\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\r\n        keys[_key10] = arguments[_key10];\r\n      }\r\n\r\n      (0, _forEach.default)(keys).call(keys, function (key) {\r\n        if ((0, _isArray.default)(key)) {\r\n          var _context20;\r\n\r\n          _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);\r\n        } else {\r\n          _this12._select.push(key);\r\n        }\r\n      });\r\n      return this;\r\n    }\r\n    /**\r\n     * Restricts the fields of the returned Parse.Objects to all keys except the\r\n     * provided keys. Exclude takes precedence over select and include.\r\n     *\r\n     * Requires Parse Server 3.6.0+\r\n     *\r\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to exclude.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"exclude\",\r\n    value: function exclude()\r\n    /*: ParseQuery*/\r\n    {\r\n      var _this13 = this;\r\n\r\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\r\n        keys[_key11] = arguments[_key11];\r\n      }\r\n\r\n      (0, _forEach.default)(keys).call(keys, function (key) {\r\n        if ((0, _isArray.default)(key)) {\r\n          var _context21;\r\n\r\n          _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);\r\n        } else {\r\n          _this13._exclude.push(key);\r\n        }\r\n      });\r\n      return this;\r\n    }\r\n    /**\r\n     * Changes the read preference that the backend will use when performing the query to the database.\r\n     *\r\n     * @param {string} readPreference The read preference for the main query.\r\n     * @param {string} includeReadPreference The read preference for the queries to include pointers.\r\n     * @param {string} subqueryReadPreference The read preference for the sub queries.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"readPreference\",\r\n    value: function readPreference(_readPreference\r\n    /*: string*/\r\n    , includeReadPreference\r\n    /*:: ?: string*/\r\n    , subqueryReadPreference\r\n    /*:: ?: string*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      this._readPreference = _readPreference;\r\n      this._includeReadPreference = includeReadPreference;\r\n      this._subqueryReadPreference = subqueryReadPreference;\r\n      return this;\r\n    }\r\n    /**\r\n     * Subscribe this query to get liveQuery updates\r\n     *\r\n     * @param {string} sessionToken (optional) Defaults to the currentUser\r\n     * @returns {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\r\n     * which can be used to get liveQuery updates.\r\n     */\r\n\r\n  }, {\r\n    key: \"subscribe\",\r\n    value: function () {\r\n      var _subscribe = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(sessionToken\r\n      /*:: ?: string*/\r\n      ) {\r\n        var currentUser, liveQueryClient, subscription;\r\n        return _regeneratorRuntime().wrap(function _callee7$(_context22) {\r\n          while (1) {\r\n            switch (_context22.prev = _context22.next) {\r\n              case 0:\r\n                _context22.next = 2;\r\n                return _CoreManager.default.getUserController().currentUserAsync();\r\n\r\n              case 2:\r\n                currentUser = _context22.sent;\r\n\r\n                if (!sessionToken) {\r\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\r\n                }\r\n\r\n                _context22.next = 6;\r\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\r\n\r\n              case 6:\r\n                liveQueryClient = _context22.sent;\r\n\r\n                if (liveQueryClient.shouldOpen()) {\r\n                  liveQueryClient.open();\r\n                }\r\n\r\n                subscription = liveQueryClient.subscribe(this, sessionToken);\r\n                return _context22.abrupt(\"return\", subscription.subscribePromise.then(function () {\r\n                  return subscription;\r\n                }));\r\n\r\n              case 10:\r\n              case \"end\":\r\n                return _context22.stop();\r\n            }\r\n          }\r\n        }, _callee7, this);\r\n      }));\r\n\r\n      function subscribe(_x10) {\r\n        return _subscribe.apply(this, arguments);\r\n      }\r\n\r\n      return subscribe;\r\n    }()\r\n    /**\r\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\r\n     * example:\r\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\r\n     *\r\n     * will create a compoundQuery that is an or of the query1, query2, and\r\n     * query3.\r\n     *\r\n     * @param {...Parse.Query} queries The list of queries to OR.\r\n     * @static\r\n     * @returns {Parse.Query} The query that is the OR of the passed in queries.\r\n     */\r\n\r\n  }, {\r\n    key: \"fromNetwork\",\r\n    value:\r\n    /**\r\n     * Change the source of this query to the server.\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n    function fromNetwork()\r\n    /*: ParseQuery*/\r\n    {\r\n      this._queriesLocalDatastore = false;\r\n      this._localDatastorePinName = null;\r\n      return this;\r\n    }\r\n    /**\r\n     * Changes the source of this query to all pinned objects.\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"fromLocalDatastore\",\r\n    value: function fromLocalDatastore()\r\n    /*: ParseQuery*/\r\n    {\r\n      return this.fromPinWithName(null);\r\n    }\r\n    /**\r\n     * Changes the source of this query to the default group of pinned objects.\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"fromPin\",\r\n    value: function fromPin()\r\n    /*: ParseQuery*/\r\n    {\r\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\r\n    }\r\n    /**\r\n     * Changes the source of this query to a specific group of pinned objects.\r\n     *\r\n     * @param {string} name The name of query source.\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"fromPinWithName\",\r\n    value: function fromPinWithName(name\r\n    /*:: ?: string*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var localDatastore = _CoreManager.default.getLocalDatastore();\r\n\r\n      if (localDatastore.checkIfEnabled()) {\r\n        this._queriesLocalDatastore = true;\r\n        this._localDatastorePinName = name;\r\n      }\r\n\r\n      return this;\r\n    }\r\n    /**\r\n     * Cancels the current network request (if any is running).\r\n     *\r\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\r\n     */\r\n\r\n  }, {\r\n    key: \"cancel\",\r\n    value: function cancel()\r\n    /*: ParseQuery*/\r\n    {\r\n      var _this14 = this;\r\n\r\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\r\n        this._xhrRequest.task._aborted = true;\r\n\r\n        this._xhrRequest.task.abort();\r\n\r\n        this._xhrRequest.task = null;\r\n\r\n        this._xhrRequest.onchange = function () {};\r\n\r\n        return this;\r\n      }\r\n\r\n      return this._xhrRequest.onchange = function () {\r\n        return _this14.cancel();\r\n      };\r\n    }\r\n  }, {\r\n    key: \"_setRequestTask\",\r\n    value: function _setRequestTask(options) {\r\n      var _this15 = this;\r\n\r\n      options.requestTask = function (task) {\r\n        _this15._xhrRequest.task = task;\r\n\r\n        _this15._xhrRequest.onchange();\r\n      };\r\n    }\r\n  }], [{\r\n    key: \"fromJSON\",\r\n    value: function fromJSON(className\r\n    /*: string*/\r\n    , json\r\n    /*: QueryJSON*/\r\n    )\r\n    /*: ParseQuery*/\r\n    {\r\n      var query = new ParseQuery(className);\r\n      return query.withJSON(json);\r\n    }\r\n  }, {\r\n    key: \"or\",\r\n    value: function or()\r\n    /*: ParseQuery*/\r\n    {\r\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\r\n        queries[_key12] = arguments[_key12];\r\n      }\r\n\r\n      var className = _getClassNameFromQueries(queries);\r\n\r\n      var query = new ParseQuery(className);\r\n\r\n      query._orQuery(queries);\r\n\r\n      return query;\r\n    }\r\n    /**\r\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\r\n     * example:\r\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\r\n     *\r\n     * will create a compoundQuery that is an and of the query1, query2, and\r\n     * query3.\r\n     *\r\n     * @param {...Parse.Query} queries The list of queries to AND.\r\n     * @static\r\n     * @returns {Parse.Query} The query that is the AND of the passed in queries.\r\n     */\r\n\r\n  }, {\r\n    key: \"and\",\r\n    value: function and()\r\n    /*: ParseQuery*/\r\n    {\r\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\r\n        queries[_key13] = arguments[_key13];\r\n      }\r\n\r\n      var className = _getClassNameFromQueries(queries);\r\n\r\n      var query = new ParseQuery(className);\r\n\r\n      query._andQuery(queries);\r\n\r\n      return query;\r\n    }\r\n    /**\r\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\r\n     * example:\r\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\r\n     *\r\n     * will create a compoundQuery that is a nor of the query1, query2, and\r\n     * query3.\r\n     *\r\n     * @param {...Parse.Query} queries The list of queries to NOR.\r\n     * @static\r\n     * @returns {Parse.Query} The query that is the NOR of the passed in queries.\r\n     */\r\n\r\n  }, {\r\n    key: \"nor\",\r\n    value: function nor()\r\n    /*: ParseQuery*/\r\n    {\r\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\r\n        queries[_key14] = arguments[_key14];\r\n      }\r\n\r\n      var className = _getClassNameFromQueries(queries);\r\n\r\n      var query = new ParseQuery(className);\r\n\r\n      query._norQuery(queries);\r\n\r\n      return query;\r\n    }\r\n  }]);\r\n  return ParseQuery;\r\n}();\r\n\r\nvar DefaultController = {\r\n  find: function find(className\r\n  /*: string*/\r\n  , params\r\n  /*: QueryJSON*/\r\n  , options\r\n  /*: RequestOptions*/\r\n  )\r\n  /*: Promise<Array<ParseObject>>*/\r\n  {\r\n    var RESTController = _CoreManager.default.getRESTController();\r\n\r\n    return RESTController.request('GET', 'classes/' + className, params, options);\r\n  },\r\n  aggregate: function aggregate(className\r\n  /*: string*/\r\n  , params\r\n  /*: any*/\r\n  , options\r\n  /*: RequestOptions*/\r\n  )\r\n  /*: Promise<Array<mixed>>*/\r\n  {\r\n    var RESTController = _CoreManager.default.getRESTController();\r\n\r\n    return RESTController.request('GET', 'aggregate/' + className, params, options);\r\n  }\r\n};\r\n\r\n_CoreManager.default.setQueryController(DefaultController);\r\n\r\nvar _default = ParseQuery;\r\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}