{"ast":null,"code":";\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\r\n     * HMAC algorithm.\r\n     */\n    var HMAC = C_algo.HMAC = Base.extend({\n      /**\r\n       * Initializes a newly created HMAC.\r\n       *\r\n       * @param {Hasher} hasher The hash algorithm to use.\r\n       * @param {WordArray|string} key The secret key.\r\n       *\r\n       * @example\r\n       *\r\n       *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n       */\n      init: function (hasher, key) {\n        // Init hasher\n        hasher = this._hasher = new hasher.init();\n\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof key == 'string') {\n          key = Utf8.parse(key);\n        }\n\n        // Shortcuts\n        var hasherBlockSize = hasher.blockSize;\n        var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n        // Allow arbitrary length keys\n        if (key.sigBytes > hasherBlockSizeBytes) {\n          key = hasher.finalize(key);\n        }\n\n        // Clamp excess bits\n        key.clamp();\n\n        // Clone key for inner and outer pads\n        var oKey = this._oKey = key.clone();\n        var iKey = this._iKey = key.clone();\n\n        // Shortcuts\n        var oKeyWords = oKey.words;\n        var iKeyWords = iKey.words;\n\n        // XOR keys with pad constants\n        for (var i = 0; i < hasherBlockSize; i++) {\n          oKeyWords[i] ^= 0x5c5c5c5c;\n          iKeyWords[i] ^= 0x36363636;\n        }\n        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n        // Set initial values\n        this.reset();\n      },\n      /**\r\n       * Resets this HMAC to its initial state.\r\n       *\r\n       * @example\r\n       *\r\n       *     hmacHasher.reset();\r\n       */\n      reset: function () {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Reset\n        hasher.reset();\n        hasher.update(this._iKey);\n      },\n      /**\r\n       * Updates this HMAC with a message.\r\n       *\r\n       * @param {WordArray|string} messageUpdate The message to append.\r\n       *\r\n       * @return {HMAC} This HMAC instance.\r\n       *\r\n       * @example\r\n       *\r\n       *     hmacHasher.update('message');\r\n       *     hmacHasher.update(wordArray);\r\n       */\n      update: function (messageUpdate) {\n        this._hasher.update(messageUpdate);\n\n        // Chainable\n        return this;\n      },\n      /**\r\n       * Finalizes the HMAC computation.\r\n       * Note that the finalize operation is effectively a destructive, read-once operation.\r\n       *\r\n       * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n       *\r\n       * @return {WordArray} The HMAC.\r\n       *\r\n       * @example\r\n       *\r\n       *     var hmac = hmacHasher.finalize();\r\n       *     var hmac = hmacHasher.finalize('message');\r\n       *     var hmac = hmacHasher.finalize(wordArray);\r\n       */\n      finalize: function (messageUpdate) {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Compute HMAC\n        var innerHash = hasher.finalize(messageUpdate);\n        hasher.reset();\n        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n        return hmac;\n      }\n    });\n  })();\n});","map":{"version":3,"names":["root","factory","exports","module","require","define","amd","CryptoJS","C","C_lib","lib","Base","C_enc","enc","Utf8","C_algo","algo","HMAC","extend","init","hasher","key","_hasher","parse","hasherBlockSize","blockSize","hasherBlockSizeBytes","sigBytes","finalize","clamp","oKey","_oKey","clone","iKey","_iKey","oKeyWords","words","iKeyWords","i","reset","update","messageUpdate","innerHash","hmac","concat"],"sources":["C:/Users/chtdu/Documents/WEB DEV/git-repo/react-webpack8/node_modules/crypto-js/hmac.js"],"sourcesContent":[";(function (root, factory) {\r\n\tif (typeof exports === \"object\") {\r\n\t\t// CommonJS\r\n\t\tmodule.exports = exports = factory(require(\"./core\"));\r\n\t}\r\n\telse if (typeof define === \"function\" && define.amd) {\r\n\t\t// AMD\r\n\t\tdefine([\"./core\"], factory);\r\n\t}\r\n\telse {\r\n\t\t// Global (browser)\r\n\t\tfactory(root.CryptoJS);\r\n\t}\r\n}(this, function (CryptoJS) {\r\n\r\n\t(function () {\r\n\t    // Shortcuts\r\n\t    var C = CryptoJS;\r\n\t    var C_lib = C.lib;\r\n\t    var Base = C_lib.Base;\r\n\t    var C_enc = C.enc;\r\n\t    var Utf8 = C_enc.Utf8;\r\n\t    var C_algo = C.algo;\r\n\r\n\t    /**\r\n\t     * HMAC algorithm.\r\n\t     */\r\n\t    var HMAC = C_algo.HMAC = Base.extend({\r\n\t        /**\r\n\t         * Initializes a newly created HMAC.\r\n\t         *\r\n\t         * @param {Hasher} hasher The hash algorithm to use.\r\n\t         * @param {WordArray|string} key The secret key.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n\t         */\r\n\t        init: function (hasher, key) {\r\n\t            // Init hasher\r\n\t            hasher = this._hasher = new hasher.init();\r\n\r\n\t            // Convert string to WordArray, else assume WordArray already\r\n\t            if (typeof key == 'string') {\r\n\t                key = Utf8.parse(key);\r\n\t            }\r\n\r\n\t            // Shortcuts\r\n\t            var hasherBlockSize = hasher.blockSize;\r\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\r\n\r\n\t            // Allow arbitrary length keys\r\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\r\n\t                key = hasher.finalize(key);\r\n\t            }\r\n\r\n\t            // Clamp excess bits\r\n\t            key.clamp();\r\n\r\n\t            // Clone key for inner and outer pads\r\n\t            var oKey = this._oKey = key.clone();\r\n\t            var iKey = this._iKey = key.clone();\r\n\r\n\t            // Shortcuts\r\n\t            var oKeyWords = oKey.words;\r\n\t            var iKeyWords = iKey.words;\r\n\r\n\t            // XOR keys with pad constants\r\n\t            for (var i = 0; i < hasherBlockSize; i++) {\r\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\r\n\t                iKeyWords[i] ^= 0x36363636;\r\n\t            }\r\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\r\n\r\n\t            // Set initial values\r\n\t            this.reset();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Resets this HMAC to its initial state.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     hmacHasher.reset();\r\n\t         */\r\n\t        reset: function () {\r\n\t            // Shortcut\r\n\t            var hasher = this._hasher;\r\n\r\n\t            // Reset\r\n\t            hasher.reset();\r\n\t            hasher.update(this._iKey);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Updates this HMAC with a message.\r\n\t         *\r\n\t         * @param {WordArray|string} messageUpdate The message to append.\r\n\t         *\r\n\t         * @return {HMAC} This HMAC instance.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     hmacHasher.update('message');\r\n\t         *     hmacHasher.update(wordArray);\r\n\t         */\r\n\t        update: function (messageUpdate) {\r\n\t            this._hasher.update(messageUpdate);\r\n\r\n\t            // Chainable\r\n\t            return this;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Finalizes the HMAC computation.\r\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n\t         *\r\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n\t         *\r\n\t         * @return {WordArray} The HMAC.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var hmac = hmacHasher.finalize();\r\n\t         *     var hmac = hmacHasher.finalize('message');\r\n\t         *     var hmac = hmacHasher.finalize(wordArray);\r\n\t         */\r\n\t        finalize: function (messageUpdate) {\r\n\t            // Shortcut\r\n\t            var hasher = this._hasher;\r\n\r\n\t            // Compute HMAC\r\n\t            var innerHash = hasher.finalize(messageUpdate);\r\n\t            hasher.reset();\r\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\r\n\r\n\t            return hmac;\r\n\t        }\r\n\t    });\r\n\t}());\r\n\r\n\r\n}));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}