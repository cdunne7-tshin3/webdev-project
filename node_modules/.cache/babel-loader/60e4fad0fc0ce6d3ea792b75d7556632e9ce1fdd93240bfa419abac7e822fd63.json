{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Date.prototype.toString.call(_Reflect$construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/) {\n    var _this;\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/) /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/, options\n    /*: { authData?: AuthData }*/) /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n      var saveOpts\n      /*:: ?: FullOptions*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n        authData[authType] = options.authData;\n        var controller = _CoreManager.default.getUserController();\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/, options\n    /*: { authData?: AuthData }*/) /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n      var authData = this.get('authData');\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      var success = provider.restoreAuthentication(authData[authType]);\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/, options\n    /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/) /*: boolean*/\n    {\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n      var authData = this.get('authData') || {};\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/) {\n      if (!this.isCurrent()) {\n        return;\n      }\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function () /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n  }, {\n    key: \"isCurrent\",\n    value: function () /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {Promise<boolean>} true if user is cached on disk\n     */\n  }, {\n    key: \"isCurrentAsync\",\n    value: function () {\n      var _isCurrentAsync = (0, _asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var current;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ParseUser.currentAsync();\n              case 2:\n                current = _context.sent;\n                return _context.abrupt(\"return\", !!current && current.id === this.id);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      return function () {\n        return _isCurrentAsync.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"getUsername\",\n    value: function () /*: ?string*/\n    {\n      var username = this.get('username');\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n  }, {\n    key: \"getEmail\",\n    value: function () /*: ?string*/\n    {\n      var email = this.get('email');\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n  }, {\n    key: \"getSessionToken\",\n    value: function () /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n  }, {\n    key: \"authenticated\",\n    value: function () /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/, options\n    /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = (0, _asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var _len,\n          args,\n          _key4,\n          current,\n          _args2 = arguments;\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                for (_len = _args2.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n                  args[_key4] = _args2[_key4];\n                }\n                _context2.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args);\n              case 3:\n                _context2.next = 5;\n                return this.isCurrentAsync();\n              case 5:\n                current = _context2.sent;\n                if (!current) {\n                  _context2.next = 8;\n                  break;\n                }\n                return _context2.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n              case 8:\n                return _context2.abrupt(\"return\", this);\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      return function () {\n        return _save.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = (0, _asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _len2,\n          args,\n          _key5,\n          current,\n          _args3 = arguments;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                for (_len2 = _args3.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n                  args[_key5] = _args3[_key5];\n                }\n                _context3.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args);\n              case 3:\n                _context3.next = 5;\n                return this.isCurrentAsync();\n              case 5:\n                current = _context3.sent;\n                if (!current) {\n                  _context3.next = 8;\n                  break;\n                }\n                return _context3.abrupt(\"return\", _CoreManager.default.getUserController().removeUserFromDisk());\n              case 8:\n                return _context3.abrupt(\"return\", this);\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      return function () {\n        return _destroy.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = (0, _asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var _len3,\n          args,\n          _key6,\n          current,\n          _args4 = arguments;\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                for (_len3 = _args4.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n                  args[_key6] = _args4[_key6];\n                }\n                _context4.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args);\n              case 3:\n                _context4.next = 5;\n                return this.isCurrentAsync();\n              case 5:\n                current = _context4.sent;\n                if (!current) {\n                  _context4.next = 8;\n                  break;\n                }\n                return _context4.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n              case 8:\n                return _context4.abrupt(\"return\", this);\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      return function () {\n        return _fetch.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"fetchWithInclude\",\n    value: function () {\n      var _fetchWithInclude = (0, _asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var _len4,\n          args,\n          _key7,\n          current,\n          _args5 = arguments;\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                for (_len4 = _args5.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n                  args[_key7] = _args5[_key7];\n                }\n                _context5.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args);\n              case 3:\n                _context5.next = 5;\n                return this.isCurrentAsync();\n              case 5:\n                current = _context5.sent;\n                if (!current) {\n                  _context5.next = 8;\n                  break;\n                }\n                return _context5.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n              case 8:\n                return _context5.abrupt(\"return\", this);\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      return function () {\n        return _fetchWithInclude.apply(this, arguments);\n      };\n    }()\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/, options\n    /*:: ?: RequestOptions*/) /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: { [prop: string]: any }*/, classProps\n    /*: { [prop: string]: any }*/) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n  }, {\n    key: \"current\",\n    value: function () /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n  }, {\n    key: \"currentAsync\",\n    value: function () /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/, password\n    /*: string*/, attrs\n    /*: AttributeMap*/, options\n    /*:: ?: FullOptions*/) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/, password\n    /*: string*/, options\n    /*:: ?: FullOptions*/) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n      var user = new this();\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/, options\n    /*:: ?: RequestOptions*/) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/ = {\n        sessionToken: sessionToken\n      };\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/) {\n      var options\n      /*:: ?: RequestOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var controller = _CoreManager.default.getUserController();\n      var meOptions\n      /*: RequestOptions*/ = {\n        sessionToken: sessionToken\n      };\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/) {\n      var controller = _CoreManager.default.getUserController();\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/, options\n    /*: { authData?: AuthData }*/, saveOpts\n    /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var controller = _CoreManager.default.getUserController();\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/, options\n    /*:: ?: RequestOptions*/) {\n      options = options || {};\n      var requestOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/, options\n    /*:: ?: RequestOptions*/) {\n      options = options || {};\n      var requestOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/, password\n    /*: string*/, options\n    /*:: ?: RequestOptions*/) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n      options = options || {};\n      var verificationOption = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/) {\n      options = options || {};\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/, options\n    /*: { authData?: AuthData }*/, saveOpts\n    /*:: ?: FullOptions*/) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n_ParseObject2.default.registerSubclass('_User', ParseUser);\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    var _this4 = this;\n    return (0, _asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee6() {\n      var currentUser;\n      return _regenerator.default.wrap(function (_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _this4.currentUserAsync();\n            case 2:\n              currentUser = _context6.sent;\n              if (!(currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser))) {\n                _context6.next = 6;\n                break;\n              }\n              _context6.next = 6;\n              return currentUser.destroy({\n                sessionToken: currentUser.getSessionToken()\n              });\n            case 6:\n              currentUserCache = user;\n              user._cleanupAuthData();\n              user._synchronizeAllAuthData();\n              return _context6.abrupt(\"return\", DefaultController.updateUserOnDisk(user));\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  },\n  currentUser: function () /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    var userData = _Storage.default.getItem(path);\n    currentUserCacheMatchesDisk = true;\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n    userData = JSON.parse(userData);\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n      delete userData._id;\n    }\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n    var current = _ParseObject2.default.fromJSON(userData);\n    currentUserCache = current;\n    current._synchronizeAllAuthData();\n    return current;\n  },\n  currentUserAsync: function () /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n      userData = JSON.parse(userData);\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n        delete userData._id;\n      }\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n      var current = _ParseObject2.default.fromJSON(userData);\n      currentUserCache = current;\n      current._synchronizeAllAuthData();\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/, attrs\n  /*: AttributeMap*/, options\n  /*: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/, options\n  /*: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n    var stateController = _CoreManager.default.getObjectStateController();\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n      user._setExisted(true);\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n      user._finishFetch(response);\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/, options\n  /*: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n      user._setExisted(true);\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/, userJSON\n  /*: AttributeMap*/) /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n    user._setExisted(true);\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user\n  /*: ParseUser*/, options\n  /*: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n      user._setExisted(true);\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/) /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n      var promise = _Storage.default.removeItemAsync(path);\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n        var currentSession = currentUser.getSessionToken();\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n        currentUser._logOutWithAll();\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/, options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/, options\n  /*: RequestOptions*/) {\n    return (0, _asyncToGenerator2.default)(/*#__PURE__*/_regenerator.default.mark(function _callee7() {\n      var token, RESTController, result, session, current;\n      return _regenerator.default.wrap(function (_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              token = user.getSessionToken();\n              if (token) {\n                _context7.next = 3;\n                break;\n              }\n              return _context7.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token')));\n            case 3:\n              options.sessionToken = token;\n              RESTController = _CoreManager.default.getRESTController();\n              _context7.next = 7;\n              return RESTController.request('POST', 'upgradeToRevocableSession', {}, options);\n            case 7:\n              result = _context7.sent;\n              session = new _ParseSession.default();\n              session._finishFetch(result);\n              user._finishFetch({\n                sessionToken: session.getSessionToken()\n              });\n              _context7.next = 13;\n              return user.isCurrentAsync();\n            case 13:\n              current = _context7.sent;\n              if (!current) {\n                _context7.next = 16;\n                break;\n              }\n              return _context7.abrupt(\"return\", DefaultController.setCurrentUser(user));\n            case 16:\n              return _context7.abrupt(\"return\", _promise.default.resolve(user));\n            case 17:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }))();\n  },\n  linkWith: function (user\n  /*: ParseUser*/, authData\n  /*: AuthData*/, options\n  /*: FullOptions*/) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/, password\n  /*: string*/, options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/, options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n_CoreManager.default.setUserController(DefaultController);\nvar _default = ParseUser;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty2","_Reflect$construct","exports","value","default","_stringify","_defineProperty","_regenerator","_asyncToGenerator2","_promise","_typeof2","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_AnonymousUtils","_CoreManager","_isRevocableSession","_ParseError","_ParseObject2","_ParseSession","_Storage","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Date","prototype","toString","call","e","CURRENT_USER_KEY","canUseCurrentUser","get","currentUserCacheMatchesDisk","currentUserCache","authProviders","ParseUser","_ParseObject","_super","attributes","_this","set","Error","key","options","upgradeOptions","hasOwnProperty","useMasterKey","controller","getUserController","upgradeToRevocableSession","provider","_this2","saveOpts","length","undefined","sessionToken","getSessionToken","authType","authProvider","restoreAuthentication","getAuthType","authData","linkWith","resolve","reject","authenticate","success","opts","then","error","_error","isCurrent","_unlinkFrom","_key","_synchronizeAuthData","_key2","_this3","_key3","_logOutWith","deauthenticate","current","id","_isCurrentAsync","mark","_callee","wrap","_context","prev","next","currentAsync","sent","abrupt","stop","username","anonymous","password","email","token","attrs","signupOptions","installationId","signUp","loginOptions","usePost","logIn","_save","_callee2","_len","args","_key4","_args2","_context2","Array","isCurrentAsync","updateUserOnDisk","_destroy","_callee3","_len2","_key5","_args3","_context3","removeUserFromDisk","_fetch","_callee4","_len3","_key6","_args4","_context4","_fetchWithInclude","_callee5","_len4","_key7","_args5","_context5","getUsername","verifyPassword","protoProps","classProps","_prop","enumerable","writable","configurable","_prop2","currentUser","currentUserAsync","user","OTHER_CAUSE","_finishFetch","becomeOptions","become","meOptions","me","userJSON","hydrate","logOut","requestOptions","requestPasswordReset","requestEmailVerification","verificationOption","isAllowed","_upgradeToRevocableSession","registerSubclass","DefaultController","path","generatePath","json","toJSON","className","userData","crypto","getCryptoController","encrypt","setItemAsync","removeItemAsync","setCurrentUser","_this4","_callee6","_context6","equals","isLinked","destroy","_cleanupAuthData","_synchronizeAllAuthData","async","getItem","decrypt","JSON","parse","_id","objectId","_sessionToken","fromJSON","getItemAsync","save","RESTController","getRESTController","stateController","getObjectStateController","auth","request","response","_migrateId","_setExisted","setPendingOp","_getStateIdentifier","promise","isAnonymous","currentSession","_logOutWithAll","_callee7","session","_context7","SESSION_MISSING","setUserController","_default"],"sources":["C:/Users/chtdu/Documents/WEB DEV/git-repo/react-webpack8/node_modules/parse/lib/browser/ParseUser.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(_Reflect$construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {Promise<boolean>} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrentAsync\",\n    value: function () {\n      var _isCurrentAsync = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var current;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ParseUser.currentAsync();\n\n              case 2:\n                current = _context.sent;\n                return _context.abrupt(\"return\", !!current && current.id === this.id);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _isCurrentAsync.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var _len,\n            args,\n            _key4,\n            current,\n            _args2 = arguments;\n\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                for (_len = _args2.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n                  args[_key4] = _args2[_key4];\n                }\n\n                _context2.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args);\n\n              case 3:\n                _context2.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context2.sent;\n\n                if (!current) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context2.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _save.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _len2,\n            args,\n            _key5,\n            current,\n            _args3 = arguments;\n\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                for (_len2 = _args3.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n                  args[_key5] = _args3[_key5];\n                }\n\n                _context3.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args);\n\n              case 3:\n                _context3.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context3.sent;\n\n                if (!current) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", _CoreManager.default.getUserController().removeUserFromDisk());\n\n              case 8:\n                return _context3.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _destroy.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var _len3,\n            args,\n            _key6,\n            current,\n            _args4 = arguments;\n\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                for (_len3 = _args4.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n                  args[_key6] = _args4[_key6];\n                }\n\n                _context4.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args);\n\n              case 3:\n                _context4.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context4.sent;\n\n                if (!current) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context4.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _fetch.apply(this, arguments);\n      };\n    }()\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function () {\n      var _fetchWithInclude = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var _len4,\n            args,\n            _key7,\n            current,\n            _args5 = arguments;\n\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                for (_len4 = _args5.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n                  args[_key7] = _args5[_key7];\n                }\n\n                _context5.next = 3;\n                return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args);\n\n              case 3:\n                _context5.next = 5;\n                return this.isCurrentAsync();\n\n              case 5:\n                current = _context5.sent;\n\n                if (!current) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n\n              case 8:\n                return _context5.abrupt(\"return\", this);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _fetchWithInclude.apply(this, arguments);\n      };\n    }()\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: { [prop: string]: any }*/\n    , classProps\n    /*: { [prop: string]: any }*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      options = options || {};\n      var verificationOption = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    var _this4 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n      var currentUser;\n      return _regenerator.default.wrap(function (_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _this4.currentUserAsync();\n\n            case 2:\n              currentUser = _context6.sent;\n\n              if (!(currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser))) {\n                _context6.next = 6;\n                break;\n              }\n\n              _context6.next = 6;\n              return currentUser.destroy({\n                sessionToken: currentUser.getSessionToken()\n              });\n\n            case 6:\n              currentUserCache = user;\n\n              user._cleanupAuthData();\n\n              user._synchronizeAllAuthData();\n\n              return _context6.abrupt(\"return\", DefaultController.updateUserOnDisk(user));\n\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {\n      var token, RESTController, result, session, current;\n      return _regenerator.default.wrap(function (_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              token = user.getSessionToken();\n\n              if (token) {\n                _context7.next = 3;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token')));\n\n            case 3:\n              options.sessionToken = token;\n              RESTController = _CoreManager.default.getRESTController();\n              _context7.next = 7;\n              return RESTController.request('POST', 'upgradeToRevocableSession', {}, options);\n\n            case 7:\n              result = _context7.sent;\n              session = new _ParseSession.default();\n\n              session._finishFetch(result);\n\n              user._finishFetch({\n                sessionToken: session.getSessionToken()\n              });\n\n              _context7.next = 13;\n              return user.isCurrentAsync();\n\n            case 13:\n              current = _context7.sent;\n\n              if (!current) {\n                _context7.next = 16;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", DefaultController.setCurrentUser(user));\n\n            case 16:\n              return _context7.abrupt(\"return\", _promise.default.resolve(user));\n\n            case 17:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }))();\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/\n  , password\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}