{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow-weak\r\n */\n\n/* global FB */\n\nvar initialized = false;\nvar requestedPermissions;\nvar initOptions;\nvar provider = {\n  authenticate: function (options) {\n    var _this = this;\n    if (typeof FB === 'undefined') {\n      options.error(this, 'Facebook SDK not found.');\n    }\n    FB.login(function (response) {\n      if (response.authResponse) {\n        if (options.success) {\n          options.success(_this, {\n            id: response.authResponse.userID,\n            access_token: response.authResponse.accessToken,\n            expiration_date: new Date(response.authResponse.expiresIn * 1000 + new Date().getTime()).toJSON()\n          });\n        }\n      } else {\n        if (options.error) {\n          options.error(_this, response);\n        }\n      }\n    }, {\n      scope: requestedPermissions\n    });\n  },\n  restoreAuthentication: function (authData) {\n    if (authData) {\n      var newOptions = {};\n      if (initOptions) {\n        for (var key in initOptions) {\n          newOptions[key] = initOptions[key];\n        }\n      } // Suppress checks for login status from the browser.\n\n      newOptions.status = false; // If the user doesn't match the one known by the FB SDK, log out.\n      // Most of the time, the users will match -- it's only in cases where\n      // the FB SDK knows of a different user than the one being restored\n      // from a Parse User that logged in with username/password.\n\n      var existingResponse = FB.getAuthResponse();\n      if (existingResponse && existingResponse.userID !== authData.id) {\n        FB.logout();\n      }\n      FB.init(newOptions);\n    }\n    return true;\n  },\n  getAuthType: function () {\n    return 'facebook';\n  },\n  deauthenticate: function () {\n    this.restoreAuthentication(null);\n  }\n};\n/**\r\n * Provides a set of utilities for using Parse with Facebook.\r\n *\r\n * @class Parse.FacebookUtils\r\n * @static\r\n * @hideconstructor\r\n */\n\nvar FacebookUtils = {\n  /**\r\n   * Initializes Parse Facebook integration.  Call this function after you\r\n   * have loaded the Facebook Javascript SDK with the same parameters\r\n   * as you would pass to<code>\r\n   * <a href=\r\n   * \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\r\n   * FB.init()</a></code>.  Parse.FacebookUtils will invoke FB.init() for you\r\n   * with these arguments.\r\n   *\r\n   * @function init\r\n   * @name Parse.FacebookUtils.init\r\n   * @param {object} options Facebook options argument as described here:\r\n   *   <a href=\r\n   *   \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\r\n   *   FB.init()</a>. The status flag will be coerced to 'false' because it\r\n   *   interferes with Parse Facebook integration. Call FB.getLoginStatus()\r\n   *   explicitly if this behavior is required by your application.\r\n   */\n  init: function (options) {\n    if (typeof FB === 'undefined') {\n      throw new Error('The Facebook JavaScript SDK must be loaded before calling init.');\n    }\n    initOptions = {};\n    if (options) {\n      for (var key in options) {\n        initOptions[key] = options[key];\n      }\n    }\n    if (initOptions.status && typeof console !== 'undefined') {\n      var warn = console.warn || console.log || function () {}; // eslint-disable-line no-console\n\n      warn.call(console, 'The \"status\" flag passed into' + ' FB.init, when set to true, can interfere with Parse Facebook' + ' integration, so it has been suppressed. Please call' + ' FB.getLoginStatus() explicitly if you require this behavior.');\n    }\n    initOptions.status = false;\n    FB.init(initOptions);\n    _ParseUser.default._registerAuthenticationProvider(provider);\n    initialized = true;\n  },\n  /**\r\n   * Gets whether the user has their account linked to Facebook.\r\n   *\r\n   * @function isLinked\r\n   * @name Parse.FacebookUtils.isLinked\r\n   * @param {Parse.User} user User to check for a facebook link.\r\n   *     The user must be logged in on this device.\r\n   * @returns {boolean} <code>true</code> if the user has their account\r\n   *     linked to Facebook.\r\n   */\n  isLinked: function (user) {\n    return user._isLinked('facebook');\n  },\n  /**\r\n   * Logs in a user using Facebook. This method delegates to the Facebook\r\n   * SDK to authenticate the user, and then automatically logs in (or\r\n   * creates, in the case where it is a new user) a Parse.User.\r\n   *\r\n   * Standard API:\r\n   *\r\n   * <code>logIn(permission: string, authData: Object);</code>\r\n   *\r\n   * Advanced API: Used for handling your own oAuth tokens\r\n   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}\r\n   *\r\n   * <code>logIn(authData: Object, options?: Object);</code>\r\n   *\r\n   * @function logIn\r\n   * @name Parse.FacebookUtils.logIn\r\n   * @param {(string | object)} permissions The permissions required for Facebook\r\n   *    log in.  This is a comma-separated string of permissions.\r\n   *    Alternatively, supply a Facebook authData object as described in our\r\n   *    REST API docs if you want to handle getting facebook auth tokens\r\n   *    yourself.\r\n   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string\r\n   * @returns {Promise}\r\n   */\n  logIn: function (permissions, options) {\n    if (!permissions || typeof permissions === 'string') {\n      if (!initialized) {\n        throw new Error('You must initialize FacebookUtils before calling logIn.');\n      }\n      requestedPermissions = permissions;\n      return _ParseUser.default.logInWith('facebook', options);\n    }\n    return _ParseUser.default.logInWith('facebook', {\n      authData: permissions\n    }, options);\n  },\n  /**\r\n   * Links Facebook to an existing PFUser. This method delegates to the\r\n   * Facebook SDK to authenticate the user, and then automatically links\r\n   * the account to the Parse.User.\r\n   *\r\n   * Standard API:\r\n   *\r\n   * <code>link(user: Parse.User, permission: string, authData?: Object);</code>\r\n   *\r\n   * Advanced API: Used for handling your own oAuth tokens\r\n   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}\r\n   *\r\n   * <code>link(user: Parse.User, authData: Object, options?: FullOptions);</code>\r\n   *\r\n   * @function link\r\n   * @name Parse.FacebookUtils.link\r\n   * @param {Parse.User} user User to link to Facebook. This must be the\r\n   *     current user.\r\n   * @param {(string | object)} permissions The permissions required for Facebook\r\n   *    log in.  This is a comma-separated string of permissions.\r\n   *    Alternatively, supply a Facebook authData object as described in our\r\n   *    REST API docs if you want to handle getting facebook auth tokens\r\n   *    yourself.\r\n   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string\r\n   * @returns {Promise}\r\n   */\n  link: function (user, permissions, options) {\n    if (!permissions || typeof permissions === 'string') {\n      if (!initialized) {\n        throw new Error('You must initialize FacebookUtils before calling link.');\n      }\n      requestedPermissions = permissions;\n      return user.linkWith('facebook', options);\n    }\n    return user.linkWith('facebook', {\n      authData: permissions\n    }, options);\n  },\n  /**\r\n   * Unlinks the Parse.User from a Facebook account.\r\n   *\r\n   * @function unlink\r\n   * @name Parse.FacebookUtils.unlink\r\n   * @param {Parse.User} user User to unlink from Facebook. This must be the\r\n   *     current user.\r\n   * @param {object} options Standard options object with success and error\r\n   *    callbacks.\r\n   * @returns {Promise}\r\n   */\n  unlink: function (user, options) {\n    if (!initialized) {\n      throw new Error('You must initialize FacebookUtils before calling unlink.');\n    }\n    return user._unlinkFrom('facebook', options);\n  },\n  // Used for testing purposes\n  _getAuthProvider: function () {\n    return provider;\n  }\n};\nvar _default = FacebookUtils;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_ParseUser","initialized","requestedPermissions","initOptions","provider","authenticate","options","_this","FB","error","login","response","authResponse","success","id","userID","access_token","accessToken","expiration_date","Date","expiresIn","getTime","toJSON","scope","restoreAuthentication","authData","newOptions","key","status","existingResponse","getAuthResponse","logout","init","getAuthType","deauthenticate","FacebookUtils","Error","console","warn","log","call","_registerAuthenticationProvider","isLinked","user","_isLinked","logIn","permissions","logInWith","link","linkWith","unlink","_unlinkFrom","_getAuthProvider","_default"],"sources":["C:/Users/chtdu/Documents/WEB DEV/git-repo/react-webpack8/node_modules/parse/lib/browser/FacebookUtils.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\r\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow-weak\r\n */\r\n\r\n/* global FB */\r\n\r\n\r\nvar initialized = false;\r\nvar requestedPermissions;\r\nvar initOptions;\r\nvar provider = {\r\n  authenticate: function (options) {\r\n    var _this = this;\r\n\r\n    if (typeof FB === 'undefined') {\r\n      options.error(this, 'Facebook SDK not found.');\r\n    }\r\n\r\n    FB.login(function (response) {\r\n      if (response.authResponse) {\r\n        if (options.success) {\r\n          options.success(_this, {\r\n            id: response.authResponse.userID,\r\n            access_token: response.authResponse.accessToken,\r\n            expiration_date: new Date(response.authResponse.expiresIn * 1000 + new Date().getTime()).toJSON()\r\n          });\r\n        }\r\n      } else {\r\n        if (options.error) {\r\n          options.error(_this, response);\r\n        }\r\n      }\r\n    }, {\r\n      scope: requestedPermissions\r\n    });\r\n  },\r\n  restoreAuthentication: function (authData) {\r\n    if (authData) {\r\n      var newOptions = {};\r\n\r\n      if (initOptions) {\r\n        for (var key in initOptions) {\r\n          newOptions[key] = initOptions[key];\r\n        }\r\n      } // Suppress checks for login status from the browser.\r\n\r\n\r\n      newOptions.status = false; // If the user doesn't match the one known by the FB SDK, log out.\r\n      // Most of the time, the users will match -- it's only in cases where\r\n      // the FB SDK knows of a different user than the one being restored\r\n      // from a Parse User that logged in with username/password.\r\n\r\n      var existingResponse = FB.getAuthResponse();\r\n\r\n      if (existingResponse && existingResponse.userID !== authData.id) {\r\n        FB.logout();\r\n      }\r\n\r\n      FB.init(newOptions);\r\n    }\r\n\r\n    return true;\r\n  },\r\n  getAuthType: function () {\r\n    return 'facebook';\r\n  },\r\n  deauthenticate: function () {\r\n    this.restoreAuthentication(null);\r\n  }\r\n};\r\n/**\r\n * Provides a set of utilities for using Parse with Facebook.\r\n *\r\n * @class Parse.FacebookUtils\r\n * @static\r\n * @hideconstructor\r\n */\r\n\r\nvar FacebookUtils = {\r\n  /**\r\n   * Initializes Parse Facebook integration.  Call this function after you\r\n   * have loaded the Facebook Javascript SDK with the same parameters\r\n   * as you would pass to<code>\r\n   * <a href=\r\n   * \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\r\n   * FB.init()</a></code>.  Parse.FacebookUtils will invoke FB.init() for you\r\n   * with these arguments.\r\n   *\r\n   * @function init\r\n   * @name Parse.FacebookUtils.init\r\n   * @param {object} options Facebook options argument as described here:\r\n   *   <a href=\r\n   *   \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\r\n   *   FB.init()</a>. The status flag will be coerced to 'false' because it\r\n   *   interferes with Parse Facebook integration. Call FB.getLoginStatus()\r\n   *   explicitly if this behavior is required by your application.\r\n   */\r\n  init: function (options) {\r\n    if (typeof FB === 'undefined') {\r\n      throw new Error('The Facebook JavaScript SDK must be loaded before calling init.');\r\n    }\r\n\r\n    initOptions = {};\r\n\r\n    if (options) {\r\n      for (var key in options) {\r\n        initOptions[key] = options[key];\r\n      }\r\n    }\r\n\r\n    if (initOptions.status && typeof console !== 'undefined') {\r\n      var warn = console.warn || console.log || function () {}; // eslint-disable-line no-console\r\n\r\n\r\n      warn.call(console, 'The \"status\" flag passed into' + ' FB.init, when set to true, can interfere with Parse Facebook' + ' integration, so it has been suppressed. Please call' + ' FB.getLoginStatus() explicitly if you require this behavior.');\r\n    }\r\n\r\n    initOptions.status = false;\r\n    FB.init(initOptions);\r\n\r\n    _ParseUser.default._registerAuthenticationProvider(provider);\r\n\r\n    initialized = true;\r\n  },\r\n\r\n  /**\r\n   * Gets whether the user has their account linked to Facebook.\r\n   *\r\n   * @function isLinked\r\n   * @name Parse.FacebookUtils.isLinked\r\n   * @param {Parse.User} user User to check for a facebook link.\r\n   *     The user must be logged in on this device.\r\n   * @returns {boolean} <code>true</code> if the user has their account\r\n   *     linked to Facebook.\r\n   */\r\n  isLinked: function (user) {\r\n    return user._isLinked('facebook');\r\n  },\r\n\r\n  /**\r\n   * Logs in a user using Facebook. This method delegates to the Facebook\r\n   * SDK to authenticate the user, and then automatically logs in (or\r\n   * creates, in the case where it is a new user) a Parse.User.\r\n   *\r\n   * Standard API:\r\n   *\r\n   * <code>logIn(permission: string, authData: Object);</code>\r\n   *\r\n   * Advanced API: Used for handling your own oAuth tokens\r\n   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}\r\n   *\r\n   * <code>logIn(authData: Object, options?: Object);</code>\r\n   *\r\n   * @function logIn\r\n   * @name Parse.FacebookUtils.logIn\r\n   * @param {(string | object)} permissions The permissions required for Facebook\r\n   *    log in.  This is a comma-separated string of permissions.\r\n   *    Alternatively, supply a Facebook authData object as described in our\r\n   *    REST API docs if you want to handle getting facebook auth tokens\r\n   *    yourself.\r\n   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string\r\n   * @returns {Promise}\r\n   */\r\n  logIn: function (permissions, options) {\r\n    if (!permissions || typeof permissions === 'string') {\r\n      if (!initialized) {\r\n        throw new Error('You must initialize FacebookUtils before calling logIn.');\r\n      }\r\n\r\n      requestedPermissions = permissions;\r\n      return _ParseUser.default.logInWith('facebook', options);\r\n    }\r\n\r\n    return _ParseUser.default.logInWith('facebook', {\r\n      authData: permissions\r\n    }, options);\r\n  },\r\n\r\n  /**\r\n   * Links Facebook to an existing PFUser. This method delegates to the\r\n   * Facebook SDK to authenticate the user, and then automatically links\r\n   * the account to the Parse.User.\r\n   *\r\n   * Standard API:\r\n   *\r\n   * <code>link(user: Parse.User, permission: string, authData?: Object);</code>\r\n   *\r\n   * Advanced API: Used for handling your own oAuth tokens\r\n   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}\r\n   *\r\n   * <code>link(user: Parse.User, authData: Object, options?: FullOptions);</code>\r\n   *\r\n   * @function link\r\n   * @name Parse.FacebookUtils.link\r\n   * @param {Parse.User} user User to link to Facebook. This must be the\r\n   *     current user.\r\n   * @param {(string | object)} permissions The permissions required for Facebook\r\n   *    log in.  This is a comma-separated string of permissions.\r\n   *    Alternatively, supply a Facebook authData object as described in our\r\n   *    REST API docs if you want to handle getting facebook auth tokens\r\n   *    yourself.\r\n   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string\r\n   * @returns {Promise}\r\n   */\r\n  link: function (user, permissions, options) {\r\n    if (!permissions || typeof permissions === 'string') {\r\n      if (!initialized) {\r\n        throw new Error('You must initialize FacebookUtils before calling link.');\r\n      }\r\n\r\n      requestedPermissions = permissions;\r\n      return user.linkWith('facebook', options);\r\n    }\r\n\r\n    return user.linkWith('facebook', {\r\n      authData: permissions\r\n    }, options);\r\n  },\r\n\r\n  /**\r\n   * Unlinks the Parse.User from a Facebook account.\r\n   *\r\n   * @function unlink\r\n   * @name Parse.FacebookUtils.unlink\r\n   * @param {Parse.User} user User to unlink from Facebook. This must be the\r\n   *     current user.\r\n   * @param {object} options Standard options object with success and error\r\n   *    callbacks.\r\n   * @returns {Promise}\r\n   */\r\n  unlink: function (user, options) {\r\n    if (!initialized) {\r\n      throw new Error('You must initialize FacebookUtils before calling unlink.');\r\n    }\r\n\r\n    return user._unlinkFrom('facebook', options);\r\n  },\r\n  // Used for testing purposes\r\n  _getAuthProvider: function () {\r\n    return provider;\r\n  }\r\n};\r\nvar _default = FacebookUtils;\r\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}