{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getJobStatus = getJobStatus;\nexports.getJobsData = getJobsData;\nexports.run = run;\nexports.startJob = startJob;\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _decode = _interopRequireDefault(require(\"./decode\"));\nvar _encode = _interopRequireDefault(require(\"./encode\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Contains functions for calling and declaring\r\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\r\n * <p><strong><em>\r\n *   Some functions are only available from Cloud Code.\r\n * </em></strong></p>\r\n *\r\n * @class Parse.Cloud\r\n * @static\r\n * @hideconstructor\r\n */\n\n/**\r\n * Makes a call to a cloud function.\r\n *\r\n * @function run\r\n * @name Parse.Cloud.run\r\n * @param {string} name The function name.\r\n * @param {object} data The parameters to send to the cloud function.\r\n * @param {object} options\r\n * @returns {Promise} A promise that will be resolved with the result\r\n * of the function.\r\n */\n\nfunction run(name\n/*: string*/, data\n/*: mixed*/, options\n/*: RequestOptions*/) /*: Promise<mixed>*/\n{\n  options = options || {};\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud function name must be a string.');\n  }\n  var requestOptions = {};\n  if (options.useMasterKey) {\n    requestOptions.useMasterKey = options.useMasterKey;\n  }\n  if (options.sessionToken) {\n    requestOptions.sessionToken = options.sessionToken;\n  }\n  if (options.context && (0, _typeof2.default)(options.context) === 'object') {\n    requestOptions.context = options.context;\n  }\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\n}\n/**\r\n * Gets data for the current set of cloud jobs.\r\n *\r\n * @function getJobsData\r\n * @name Parse.Cloud.getJobsData\r\n * @returns {Promise} A promise that will be resolved with the result\r\n * of the function.\r\n */\n\nfunction getJobsData() /*: Promise<Object>*/\n{\n  return _CoreManager.default.getCloudController().getJobsData({\n    useMasterKey: true\n  });\n}\n/**\r\n * Starts a given cloud job, which will process asynchronously.\r\n *\r\n * @function startJob\r\n * @name Parse.Cloud.startJob\r\n * @param {string} name The function name.\r\n * @param {object} data The parameters to send to the cloud function.\r\n * @returns {Promise} A promise that will be resolved with the jobStatusId\r\n * of the job.\r\n */\n\nfunction startJob(name\n/*: string*/, data\n/*: mixed*/) /*: Promise<string>*/\n{\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud job name must be a string.');\n  }\n  return _CoreManager.default.getCloudController().startJob(name, data, {\n    useMasterKey: true\n  });\n}\n/**\r\n * Gets job status by Id\r\n *\r\n * @function getJobStatus\r\n * @name Parse.Cloud.getJobStatus\r\n * @param {string} jobStatusId The Id of Job Status.\r\n * @returns {Parse.Object} Status of Job.\r\n */\n\nfunction getJobStatus(jobStatusId\n/*: string*/) /*: Promise<ParseObject>*/\n{\n  var query = new _ParseQuery.default('_JobStatus');\n  return query.get(jobStatusId, {\n    useMasterKey: true\n  });\n}\nvar DefaultController = {\n  run: function (name, data, options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    var payload = (0, _encode.default)(data, true);\n    var request = RESTController.request('POST', 'functions/' + name, payload, options);\n    return request.then(function (res) {\n      if ((0, _typeof2.default)(res) === 'object' && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty('result')) {\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\n      }\n      var decoded = (0, _decode.default)(res);\n      if (decoded && decoded.hasOwnProperty('result')) {\n        return _promise.default.resolve(decoded.result);\n      }\n      return _promise.default.resolve(undefined);\n    });\n  },\n  getJobsData: function (options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\n  },\n  startJob: function (name, data, options\n  /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    var payload = (0, _encode.default)(data, true);\n    return RESTController.request('POST', 'jobs/' + name, payload, options);\n  }\n};\n_CoreManager.default.setCloudController(DefaultController);","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","getJobStatus","getJobsData","run","startJob","_promise","_keys","_typeof2","_CoreManager","_decode","_encode","_ParseError","_ParseQuery","_ParseObject","name","data","options","length","TypeError","requestOptions","useMasterKey","sessionToken","context","default","getCloudController","jobStatusId","query","get","DefaultController","RESTController","getRESTController","payload","request","then","res","hasOwnProperty","INVALID_JSON","decoded","resolve","result","undefined","setCloudController"],"sources":["C:/Users/chtdu/Documents/WEB DEV/git-repo/react-webpack8/node_modules/parse/lib/browser/Cloud.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.getJobStatus = getJobStatus;\r\nexports.getJobsData = getJobsData;\r\nexports.run = run;\r\nexports.startJob = startJob;\r\n\r\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\r\n\r\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\r\n\r\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\r\n\r\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\r\n\r\nvar _decode = _interopRequireDefault(require(\"./decode\"));\r\n\r\nvar _encode = _interopRequireDefault(require(\"./encode\"));\r\n\r\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\r\n\r\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\r\n\r\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\r\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\r\n\r\n/**\r\n * Contains functions for calling and declaring\r\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\r\n * <p><strong><em>\r\n *   Some functions are only available from Cloud Code.\r\n * </em></strong></p>\r\n *\r\n * @class Parse.Cloud\r\n * @static\r\n * @hideconstructor\r\n */\r\n\r\n/**\r\n * Makes a call to a cloud function.\r\n *\r\n * @function run\r\n * @name Parse.Cloud.run\r\n * @param {string} name The function name.\r\n * @param {object} data The parameters to send to the cloud function.\r\n * @param {object} options\r\n * @returns {Promise} A promise that will be resolved with the result\r\n * of the function.\r\n */\r\n\r\n\r\nfunction run(name\r\n/*: string*/\r\n, data\r\n/*: mixed*/\r\n, options\r\n/*: RequestOptions*/\r\n)\r\n/*: Promise<mixed>*/\r\n{\r\n  options = options || {};\r\n\r\n  if (typeof name !== 'string' || name.length === 0) {\r\n    throw new TypeError('Cloud function name must be a string.');\r\n  }\r\n\r\n  var requestOptions = {};\r\n\r\n  if (options.useMasterKey) {\r\n    requestOptions.useMasterKey = options.useMasterKey;\r\n  }\r\n\r\n  if (options.sessionToken) {\r\n    requestOptions.sessionToken = options.sessionToken;\r\n  }\r\n\r\n  if (options.context && (0, _typeof2.default)(options.context) === 'object') {\r\n    requestOptions.context = options.context;\r\n  }\r\n\r\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\r\n}\r\n/**\r\n * Gets data for the current set of cloud jobs.\r\n *\r\n * @function getJobsData\r\n * @name Parse.Cloud.getJobsData\r\n * @returns {Promise} A promise that will be resolved with the result\r\n * of the function.\r\n */\r\n\r\n\r\nfunction getJobsData()\r\n/*: Promise<Object>*/\r\n{\r\n  return _CoreManager.default.getCloudController().getJobsData({\r\n    useMasterKey: true\r\n  });\r\n}\r\n/**\r\n * Starts a given cloud job, which will process asynchronously.\r\n *\r\n * @function startJob\r\n * @name Parse.Cloud.startJob\r\n * @param {string} name The function name.\r\n * @param {object} data The parameters to send to the cloud function.\r\n * @returns {Promise} A promise that will be resolved with the jobStatusId\r\n * of the job.\r\n */\r\n\r\n\r\nfunction startJob(name\r\n/*: string*/\r\n, data\r\n/*: mixed*/\r\n)\r\n/*: Promise<string>*/\r\n{\r\n  if (typeof name !== 'string' || name.length === 0) {\r\n    throw new TypeError('Cloud job name must be a string.');\r\n  }\r\n\r\n  return _CoreManager.default.getCloudController().startJob(name, data, {\r\n    useMasterKey: true\r\n  });\r\n}\r\n/**\r\n * Gets job status by Id\r\n *\r\n * @function getJobStatus\r\n * @name Parse.Cloud.getJobStatus\r\n * @param {string} jobStatusId The Id of Job Status.\r\n * @returns {Parse.Object} Status of Job.\r\n */\r\n\r\n\r\nfunction getJobStatus(jobStatusId\r\n/*: string*/\r\n)\r\n/*: Promise<ParseObject>*/\r\n{\r\n  var query = new _ParseQuery.default('_JobStatus');\r\n  return query.get(jobStatusId, {\r\n    useMasterKey: true\r\n  });\r\n}\r\n\r\nvar DefaultController = {\r\n  run: function (name, data, options\r\n  /*: RequestOptions*/\r\n  ) {\r\n    var RESTController = _CoreManager.default.getRESTController();\r\n\r\n    var payload = (0, _encode.default)(data, true);\r\n    var request = RESTController.request('POST', 'functions/' + name, payload, options);\r\n    return request.then(function (res) {\r\n      if ((0, _typeof2.default)(res) === 'object' && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty('result')) {\r\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\r\n      }\r\n\r\n      var decoded = (0, _decode.default)(res);\r\n\r\n      if (decoded && decoded.hasOwnProperty('result')) {\r\n        return _promise.default.resolve(decoded.result);\r\n      }\r\n\r\n      return _promise.default.resolve(undefined);\r\n    });\r\n  },\r\n  getJobsData: function (options\r\n  /*: RequestOptions*/\r\n  ) {\r\n    var RESTController = _CoreManager.default.getRESTController();\r\n\r\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\r\n  },\r\n  startJob: function (name, data, options\r\n  /*: RequestOptions*/\r\n  ) {\r\n    var RESTController = _CoreManager.default.getRESTController();\r\n\r\n    var payload = (0, _encode.default)(data, true);\r\n    return RESTController.request('POST', 'jobs/' + name, payload, options);\r\n  }\r\n};\r\n\r\n_CoreManager.default.setCloudController(DefaultController);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}