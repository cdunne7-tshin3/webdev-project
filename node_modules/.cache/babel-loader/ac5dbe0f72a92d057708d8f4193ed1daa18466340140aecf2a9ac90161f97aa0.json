{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _ParseOp = require(\"./ParseOp\");\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Creates a new Relation for the given parent object and key. This\r\n * constructor should rarely be used directly, but rather created by\r\n * Parse.Object.relation.\r\n *\r\n * <p>\r\n * A class that is used to access all of the children of a many-to-many\r\n * relationship.  Each instance of Parse.Relation is associated with a\r\n * particular parent object and key.\r\n * </p>\r\n *\r\n * @alias Parse.Relation\r\n */\n\nvar ParseRelation = /*#__PURE__*/function () {\n  /**\r\n   * @param {Parse.Object} parent The parent of this relation.\r\n   * @param {string} key The key for this relation on the parent.\r\n   */\n  function ParseRelation(parent\n  /*: ?ParseObject*/, key\n  /*: ?string*/) {\n    (0, _classCallCheck2.default)(this, ParseRelation);\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"key\", void 0);\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n  /*\r\n   * Makes sure that this relation has the right parent and key.\r\n   */\n\n  (0, _createClass2.default)(ParseRelation, [{\n    key: \"_ensureParentAndKey\",\n    value: function (parent\n    /*: ParseObject*/, key\n    /*: string*/) {\n      this.key = this.key || key;\n      if (this.key !== key) {\n        throw new Error('Internal Error. Relation retrieved from two different keys.');\n      }\n      if (this.parent) {\n        if (this.parent.className !== parent.className) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n        if (this.parent.id) {\n          if (this.parent.id !== parent.id) {\n            throw new Error('Internal Error. Relation retrieved from two different Objects.');\n          }\n        } else if (parent.id) {\n          this.parent = parent;\n        }\n      } else {\n        this.parent = parent;\n      }\n    }\n    /**\r\n     * Adds a Parse.Object or an array of Parse.Objects to the relation.\r\n     *\r\n     * @param {(Parse.Object|Array)} objects The item or items to add.\r\n     * @returns {Parse.Object} The parent of the relation.\r\n     */\n  }, {\n    key: \"add\",\n    value: function (objects\n    /*: ParseObject | Array<ParseObject | string>*/) /*: ParseObject*/\n    {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n      var change = new _ParseOp.RelationOp(objects, []);\n      var parent = this.parent;\n      if (!parent) {\n        throw new Error('Cannot add to a Relation without a parent');\n      }\n      if (objects.length === 0) {\n        return parent;\n      }\n      parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n      return parent;\n    }\n    /**\r\n     * Removes a Parse.Object or an array of Parse.Objects from this relation.\r\n     *\r\n     * @param {(Parse.Object|Array)} objects The item or items to remove.\r\n     */\n  }, {\n    key: \"remove\",\n    value: function (objects\n    /*: ParseObject | Array<ParseObject | string>*/) {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n      var change = new _ParseOp.RelationOp([], objects);\n      if (!this.parent) {\n        throw new Error('Cannot remove from a Relation without a parent');\n      }\n      if (objects.length === 0) {\n        return;\n      }\n      this.parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n    }\n    /**\r\n     * Returns a JSON version of the object suitable for saving to disk.\r\n     *\r\n     * @returns {object} JSON representation of Relation\r\n     */\n  }, {\n    key: \"toJSON\",\n    value: function () /*: { __type: 'Relation', className: ?string }*/\n    {\n      return {\n        __type: 'Relation',\n        className: this.targetClassName\n      };\n    }\n    /**\r\n     * Returns a Parse.Query that is limited to objects in this\r\n     * relation.\r\n     *\r\n     * @returns {Parse.Query} Relation Query\r\n     */\n  }, {\n    key: \"query\",\n    value: function query() /*: ParseQuery*/\n    {\n      var query;\n      var parent = this.parent;\n      if (!parent) {\n        throw new Error('Cannot construct a query for a Relation without a parent');\n      }\n      if (!this.targetClassName) {\n        query = new _ParseQuery.default(parent.className);\n        query._extraOptions.redirectClassNameForKey = this.key;\n      } else {\n        query = new _ParseQuery.default(this.targetClassName);\n      }\n      query._addCondition('$relatedTo', 'object', {\n        __type: 'Pointer',\n        className: parent.className,\n        objectId: parent.id\n      });\n      query._addCondition('$relatedTo', 'key', this.key);\n      return query;\n    }\n  }]);\n  return ParseRelation;\n}();\nvar _default = ParseRelation;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_isArray","_classCallCheck2","_createClass2","_defineProperty2","_ParseOp","_ParseObject","_ParseQuery","ParseRelation","parent","key","targetClassName","Error","className","id","objects","change","RelationOp","length","set","_targetClassName","__type","query","_extraOptions","redirectClassNameForKey","_addCondition","objectId","_default"],"sources":["C:/Users/chtdu/Documents/WEB DEV/git-repo/react-webpack8/node_modules/parse/lib/browser/ParseRelation.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\r\n\r\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\r\n\r\nvar _ParseOp = require(\"./ParseOp\");\r\n\r\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\r\n\r\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\r\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\r\n\r\n/**\r\n * Creates a new Relation for the given parent object and key. This\r\n * constructor should rarely be used directly, but rather created by\r\n * Parse.Object.relation.\r\n *\r\n * <p>\r\n * A class that is used to access all of the children of a many-to-many\r\n * relationship.  Each instance of Parse.Relation is associated with a\r\n * particular parent object and key.\r\n * </p>\r\n *\r\n * @alias Parse.Relation\r\n */\r\n\r\n\r\nvar ParseRelation = /*#__PURE__*/function () {\r\n  /**\r\n   * @param {Parse.Object} parent The parent of this relation.\r\n   * @param {string} key The key for this relation on the parent.\r\n   */\r\n  function ParseRelation(parent\r\n  /*: ?ParseObject*/\r\n  , key\r\n  /*: ?string*/\r\n  ) {\r\n    (0, _classCallCheck2.default)(this, ParseRelation);\r\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\r\n    (0, _defineProperty2.default)(this, \"key\", void 0);\r\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\r\n    this.parent = parent;\r\n    this.key = key;\r\n    this.targetClassName = null;\r\n  }\r\n  /*\r\n   * Makes sure that this relation has the right parent and key.\r\n   */\r\n\r\n\r\n  (0, _createClass2.default)(ParseRelation, [{\r\n    key: \"_ensureParentAndKey\",\r\n    value: function (parent\r\n    /*: ParseObject*/\r\n    , key\r\n    /*: string*/\r\n    ) {\r\n      this.key = this.key || key;\r\n\r\n      if (this.key !== key) {\r\n        throw new Error('Internal Error. Relation retrieved from two different keys.');\r\n      }\r\n\r\n      if (this.parent) {\r\n        if (this.parent.className !== parent.className) {\r\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\r\n        }\r\n\r\n        if (this.parent.id) {\r\n          if (this.parent.id !== parent.id) {\r\n            throw new Error('Internal Error. Relation retrieved from two different Objects.');\r\n          }\r\n        } else if (parent.id) {\r\n          this.parent = parent;\r\n        }\r\n      } else {\r\n        this.parent = parent;\r\n      }\r\n    }\r\n    /**\r\n     * Adds a Parse.Object or an array of Parse.Objects to the relation.\r\n     *\r\n     * @param {(Parse.Object|Array)} objects The item or items to add.\r\n     * @returns {Parse.Object} The parent of the relation.\r\n     */\r\n\r\n  }, {\r\n    key: \"add\",\r\n    value: function (objects\r\n    /*: ParseObject | Array<ParseObject | string>*/\r\n    )\r\n    /*: ParseObject*/\r\n    {\r\n      if (!(0, _isArray.default)(objects)) {\r\n        objects = [objects];\r\n      }\r\n\r\n      var change = new _ParseOp.RelationOp(objects, []);\r\n      var parent = this.parent;\r\n\r\n      if (!parent) {\r\n        throw new Error('Cannot add to a Relation without a parent');\r\n      }\r\n\r\n      if (objects.length === 0) {\r\n        return parent;\r\n      }\r\n\r\n      parent.set(this.key, change);\r\n      this.targetClassName = change._targetClassName;\r\n      return parent;\r\n    }\r\n    /**\r\n     * Removes a Parse.Object or an array of Parse.Objects from this relation.\r\n     *\r\n     * @param {(Parse.Object|Array)} objects The item or items to remove.\r\n     */\r\n\r\n  }, {\r\n    key: \"remove\",\r\n    value: function (objects\r\n    /*: ParseObject | Array<ParseObject | string>*/\r\n    ) {\r\n      if (!(0, _isArray.default)(objects)) {\r\n        objects = [objects];\r\n      }\r\n\r\n      var change = new _ParseOp.RelationOp([], objects);\r\n\r\n      if (!this.parent) {\r\n        throw new Error('Cannot remove from a Relation without a parent');\r\n      }\r\n\r\n      if (objects.length === 0) {\r\n        return;\r\n      }\r\n\r\n      this.parent.set(this.key, change);\r\n      this.targetClassName = change._targetClassName;\r\n    }\r\n    /**\r\n     * Returns a JSON version of the object suitable for saving to disk.\r\n     *\r\n     * @returns {object} JSON representation of Relation\r\n     */\r\n\r\n  }, {\r\n    key: \"toJSON\",\r\n    value: function ()\r\n    /*: { __type: 'Relation', className: ?string }*/\r\n    {\r\n      return {\r\n        __type: 'Relation',\r\n        className: this.targetClassName\r\n      };\r\n    }\r\n    /**\r\n     * Returns a Parse.Query that is limited to objects in this\r\n     * relation.\r\n     *\r\n     * @returns {Parse.Query} Relation Query\r\n     */\r\n\r\n  }, {\r\n    key: \"query\",\r\n    value: function query()\r\n    /*: ParseQuery*/\r\n    {\r\n      var query;\r\n      var parent = this.parent;\r\n\r\n      if (!parent) {\r\n        throw new Error('Cannot construct a query for a Relation without a parent');\r\n      }\r\n\r\n      if (!this.targetClassName) {\r\n        query = new _ParseQuery.default(parent.className);\r\n        query._extraOptions.redirectClassNameForKey = this.key;\r\n      } else {\r\n        query = new _ParseQuery.default(this.targetClassName);\r\n      }\r\n\r\n      query._addCondition('$relatedTo', 'object', {\r\n        __type: 'Pointer',\r\n        className: parent.className,\r\n        objectId: parent.id\r\n      });\r\n\r\n      query._addCondition('$relatedTo', 'key', this.key);\r\n\r\n      return query;\r\n    }\r\n  }]);\r\n  return ParseRelation;\r\n}();\r\n\r\nvar _default = ParseRelation;\r\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}