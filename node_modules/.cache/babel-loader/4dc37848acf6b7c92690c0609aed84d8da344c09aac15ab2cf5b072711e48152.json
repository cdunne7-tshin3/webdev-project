{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\nvar _EventEmitter2 = _interopRequireDefault(require(\"./EventEmitter\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _promiseUtils = require(\"./promiseUtils\");\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\r\n * Creates a new LiveQuery Subscription.\r\n * Extends events.EventEmitter\r\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\r\n *\r\n * <p>Response Object - Contains data from the client that made the request\r\n * <ul>\r\n * <li>clientId</li>\r\n * <li>installationId - requires Parse Server 4.0.0+</li>\r\n * </ul>\r\n * </p>\r\n *\r\n * <p>Open Event - When you call query.subscribe(), we send a subscribe request to\r\n * the LiveQuery server, when we get the confirmation from the LiveQuery server,\r\n * this event will be emitted. When the client loses WebSocket connection to the\r\n * LiveQuery server, we will try to auto reconnect the LiveQuery server. If we\r\n * reconnect the LiveQuery server and successfully resubscribe the ParseQuery,\r\n * you'll also get this event.\r\n *\r\n * <pre>\r\n * subscription.on('open', (response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n * <p>Create Event - When a new ParseObject is created and it fulfills the ParseQuery you subscribe,\r\n * you'll get this event. The object is the ParseObject which is created.\r\n *\r\n * <pre>\r\n * subscription.on('create', (object, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n * <p>Update Event - When an existing ParseObject (original) which fulfills the ParseQuery you subscribe\r\n * is updated (The ParseObject fulfills the ParseQuery before and after changes),\r\n * you'll get this event. The object is the ParseObject which is updated.\r\n * Its content is the latest value of the ParseObject.\r\n *\r\n * Parse-Server 3.1.3+ Required for original object parameter\r\n *\r\n * <pre>\r\n * subscription.on('update', (object, original, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n * <p>Enter Event - When an existing ParseObject's (original) old value doesn't fulfill the ParseQuery\r\n * but its new value fulfills the ParseQuery, you'll get this event. The object is the\r\n * ParseObject which enters the ParseQuery. Its content is the latest value of the ParseObject.\r\n *\r\n * Parse-Server 3.1.3+ Required for original object parameter\r\n *\r\n * <pre>\r\n * subscription.on('enter', (object, original, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n *\r\n * <p>Update Event - When an existing ParseObject's old value fulfills the ParseQuery but its new value\r\n * doesn't fulfill the ParseQuery, you'll get this event. The object is the ParseObject\r\n * which leaves the ParseQuery. Its content is the latest value of the ParseObject.\r\n *\r\n * <pre>\r\n * subscription.on('leave', (object, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n *\r\n * <p>Delete Event - When an existing ParseObject which fulfills the ParseQuery is deleted, you'll\r\n * get this event. The object is the ParseObject which is deleted.\r\n *\r\n * <pre>\r\n * subscription.on('delete', (object, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n *\r\n * <p>Close Event - When the client loses the WebSocket connection to the LiveQuery\r\n * server and we stop receiving events, you'll get this event.\r\n *\r\n * <pre>\r\n * subscription.on('close', () => {\r\n *\r\n * });</pre></p>\r\n *\r\n * @alias Parse.LiveQuerySubscription\r\n */\n\nvar Subscription = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2.default)(Subscription, _EventEmitter);\n  var _super = _createSuper(Subscription);\n  /*\r\n   * @param {string} id - subscription id\r\n   * @param {string} query - query to subscribe to\r\n   * @param {string} sessionToken - optional session token\r\n   */\n\n  function Subscription(id, query, sessionToken) {\n    var _this;\n    (0, _classCallCheck2.default)(this, Subscription);\n    _this = _super.call(this);\n    _this.id = id;\n    _this.query = query;\n    _this.sessionToken = sessionToken;\n    _this.subscribePromise = (0, _promiseUtils.resolvingPromise)();\n    _this.subscribed = false; // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n\n    _this.on('error', function () {});\n    return _this;\n  }\n  /**\r\n   * Close the subscription\r\n   *\r\n   * @returns {Promise}\r\n   */\n\n  (0, _createClass2.default)(Subscription, [{\n    key: \"unsubscribe\",\n    value: function () /*: Promise*/\n    {\n      var _this2 = this;\n      return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(function (liveQueryClient) {\n        liveQueryClient.unsubscribe(_this2);\n        _this2.emit('close');\n      });\n    }\n  }]);\n  return Subscription;\n}(_EventEmitter2.default);\nvar _default = Subscription;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty","_Reflect$construct","exports","value","default","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_EventEmitter2","_CoreManager","_promiseUtils","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","Subscription","_EventEmitter","_super","id","query","sessionToken","_this","subscribePromise","resolvingPromise","subscribed","on","key","_this2","getLiveQueryController","getDefaultLiveQueryClient","then","liveQueryClient","unsubscribe","emit","_default"],"sources":["C:/Users/chtdu/Documents/WEB DEV/git-repo/react-webpack8/node_modules/parse/lib/browser/LiveQuerySubscription.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\r\n\r\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\r\n\r\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\r\n\r\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\r\n\r\nvar _EventEmitter2 = _interopRequireDefault(require(\"./EventEmitter\"));\r\n\r\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\r\n\r\nvar _promiseUtils = require(\"./promiseUtils\");\r\n\r\nfunction _createSuper(Derived) {\r\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\r\n\r\n  return function () {\r\n    var Super = (0, _getPrototypeOf2.default)(Derived),\r\n        result;\r\n\r\n    if (hasNativeReflectConstruct) {\r\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\r\n      result = _Reflect$construct(Super, arguments, NewTarget);\r\n    } else {\r\n      result = Super.apply(this, arguments);\r\n    }\r\n\r\n    return (0, _possibleConstructorReturn2.default)(this, result);\r\n  };\r\n}\r\n\r\nfunction _isNativeReflectConstruct() {\r\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\r\n  if (_Reflect$construct.sham) return false;\r\n  if (typeof Proxy === \"function\") return true;\r\n\r\n  try {\r\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n/**\r\n * Creates a new LiveQuery Subscription.\r\n * Extends events.EventEmitter\r\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\r\n *\r\n * <p>Response Object - Contains data from the client that made the request\r\n * <ul>\r\n * <li>clientId</li>\r\n * <li>installationId - requires Parse Server 4.0.0+</li>\r\n * </ul>\r\n * </p>\r\n *\r\n * <p>Open Event - When you call query.subscribe(), we send a subscribe request to\r\n * the LiveQuery server, when we get the confirmation from the LiveQuery server,\r\n * this event will be emitted. When the client loses WebSocket connection to the\r\n * LiveQuery server, we will try to auto reconnect the LiveQuery server. If we\r\n * reconnect the LiveQuery server and successfully resubscribe the ParseQuery,\r\n * you'll also get this event.\r\n *\r\n * <pre>\r\n * subscription.on('open', (response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n * <p>Create Event - When a new ParseObject is created and it fulfills the ParseQuery you subscribe,\r\n * you'll get this event. The object is the ParseObject which is created.\r\n *\r\n * <pre>\r\n * subscription.on('create', (object, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n * <p>Update Event - When an existing ParseObject (original) which fulfills the ParseQuery you subscribe\r\n * is updated (The ParseObject fulfills the ParseQuery before and after changes),\r\n * you'll get this event. The object is the ParseObject which is updated.\r\n * Its content is the latest value of the ParseObject.\r\n *\r\n * Parse-Server 3.1.3+ Required for original object parameter\r\n *\r\n * <pre>\r\n * subscription.on('update', (object, original, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n * <p>Enter Event - When an existing ParseObject's (original) old value doesn't fulfill the ParseQuery\r\n * but its new value fulfills the ParseQuery, you'll get this event. The object is the\r\n * ParseObject which enters the ParseQuery. Its content is the latest value of the ParseObject.\r\n *\r\n * Parse-Server 3.1.3+ Required for original object parameter\r\n *\r\n * <pre>\r\n * subscription.on('enter', (object, original, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n *\r\n * <p>Update Event - When an existing ParseObject's old value fulfills the ParseQuery but its new value\r\n * doesn't fulfill the ParseQuery, you'll get this event. The object is the ParseObject\r\n * which leaves the ParseQuery. Its content is the latest value of the ParseObject.\r\n *\r\n * <pre>\r\n * subscription.on('leave', (object, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n *\r\n * <p>Delete Event - When an existing ParseObject which fulfills the ParseQuery is deleted, you'll\r\n * get this event. The object is the ParseObject which is deleted.\r\n *\r\n * <pre>\r\n * subscription.on('delete', (object, response) => {\r\n *\r\n * });</pre></p>\r\n *\r\n *\r\n * <p>Close Event - When the client loses the WebSocket connection to the LiveQuery\r\n * server and we stop receiving events, you'll get this event.\r\n *\r\n * <pre>\r\n * subscription.on('close', () => {\r\n *\r\n * });</pre></p>\r\n *\r\n * @alias Parse.LiveQuerySubscription\r\n */\r\n\r\n\r\nvar Subscription = /*#__PURE__*/function (_EventEmitter) {\r\n  (0, _inherits2.default)(Subscription, _EventEmitter);\r\n\r\n  var _super = _createSuper(Subscription);\r\n  /*\r\n   * @param {string} id - subscription id\r\n   * @param {string} query - query to subscribe to\r\n   * @param {string} sessionToken - optional session token\r\n   */\r\n\r\n\r\n  function Subscription(id, query, sessionToken) {\r\n    var _this;\r\n\r\n    (0, _classCallCheck2.default)(this, Subscription);\r\n    _this = _super.call(this);\r\n    _this.id = id;\r\n    _this.query = query;\r\n    _this.sessionToken = sessionToken;\r\n    _this.subscribePromise = (0, _promiseUtils.resolvingPromise)();\r\n    _this.subscribed = false; // adding listener so process does not crash\r\n    // best practice is for developer to register their own listener\r\n\r\n    _this.on('error', function () {});\r\n\r\n    return _this;\r\n  }\r\n  /**\r\n   * Close the subscription\r\n   *\r\n   * @returns {Promise}\r\n   */\r\n\r\n\r\n  (0, _createClass2.default)(Subscription, [{\r\n    key: \"unsubscribe\",\r\n    value: function ()\r\n    /*: Promise*/\r\n    {\r\n      var _this2 = this;\r\n\r\n      return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(function (liveQueryClient) {\r\n        liveQueryClient.unsubscribe(_this2);\r\n\r\n        _this2.emit('close');\r\n      });\r\n    }\r\n  }]);\r\n  return Subscription;\r\n}(_EventEmitter2.default);\r\n\r\nvar _default = Subscription;\r\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,sDAAsD,CAAC;AAE5F,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,8DAA8D,CAAC;AAEpG,IAAIE,kBAAkB,GAAGF,OAAO,CAAC,yDAAyD,CAAC;AAE3FC,sBAAsB,CAACE,OAAO,EAAE,YAAY,EAAE;EAC5CC,KAAK,EAAE;AACT,CAAC,CAAC;AAEFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIC,gBAAgB,GAAGP,sBAAsB,CAACC,OAAO,CAAC,+CAA+C,CAAC,CAAC;AAEvG,IAAIO,aAAa,GAAGR,sBAAsB,CAACC,OAAO,CAAC,4CAA4C,CAAC,CAAC;AAEjG,IAAIQ,UAAU,GAAGT,sBAAsB,CAACC,OAAO,CAAC,yCAAyC,CAAC,CAAC;AAE3F,IAAIS,2BAA2B,GAAGV,sBAAsB,CAACC,OAAO,CAAC,0DAA0D,CAAC,CAAC;AAE7H,IAAIU,gBAAgB,GAAGX,sBAAsB,CAACC,OAAO,CAAC,+CAA+C,CAAC,CAAC;AAEvG,IAAIW,cAAc,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAEtE,IAAIY,YAAY,GAAGb,sBAAsB,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC;AAEnE,IAAIa,aAAa,GAAGb,OAAO,CAAC,gBAAgB,CAAC;AAE7C,SAASc,YAAYA,CAACC,OAAO,EAAE;EAC7B,IAAIC,yBAAyB,GAAGC,yBAAyB,CAAC,CAAC;EAE3D,OAAO,YAAY;IACjB,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAER,gBAAgB,CAACL,OAAO,EAAEU,OAAO,CAAC;MAC9CI,MAAM;IAEV,IAAIH,yBAAyB,EAAE;MAC7B,IAAII,SAAS,GAAG,CAAC,CAAC,EAAEV,gBAAgB,CAACL,OAAO,EAAE,IAAI,CAAC,CAACgB,WAAW;MAC/DF,MAAM,GAAGjB,kBAAkB,CAACgB,KAAK,EAAEI,SAAS,EAAEF,SAAS,CAAC;IAC1D,CAAC,MAAM;MACLD,MAAM,GAAGD,KAAK,CAACK,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;IACvC;IAEA,OAAO,CAAC,CAAC,EAAEb,2BAA2B,CAACJ,OAAO,EAAE,IAAI,EAAEc,MAAM,CAAC;EAC/D,CAAC;AACH;AAEA,SAASF,yBAAyBA,CAAA,EAAG;EACnC,IAAI,OAAOO,OAAO,KAAK,WAAW,IAAI,CAACtB,kBAAkB,EAAE,OAAO,KAAK;EACvE,IAAIA,kBAAkB,CAACuB,IAAI,EAAE,OAAO,KAAK;EACzC,IAAI,OAAOC,KAAK,KAAK,UAAU,EAAE,OAAO,IAAI;EAE5C,IAAI;IACFC,OAAO,CAACC,SAAS,CAACC,OAAO,CAACC,IAAI,CAAC5B,kBAAkB,CAACyB,OAAO,EAAE,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;IAC/E,OAAO,IAAI;EACb,CAAC,CAAC,OAAOI,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIC,YAAY,GAAG,aAAa,UAAUC,aAAa,EAAE;EACvD,CAAC,CAAC,EAAEzB,UAAU,CAACH,OAAO,EAAE2B,YAAY,EAAEC,aAAa,CAAC;EAEpD,IAAIC,MAAM,GAAGpB,YAAY,CAACkB,YAAY,CAAC;EACvC;AACF;AACA;AACA;AACA;;EAGE,SAASA,YAAYA,CAACG,EAAE,EAAEC,KAAK,EAAEC,YAAY,EAAE;IAC7C,IAAIC,KAAK;IAET,CAAC,CAAC,EAAEhC,gBAAgB,CAACD,OAAO,EAAE,IAAI,EAAE2B,YAAY,CAAC;IACjDM,KAAK,GAAGJ,MAAM,CAACJ,IAAI,CAAC,IAAI,CAAC;IACzBQ,KAAK,CAACH,EAAE,GAAGA,EAAE;IACbG,KAAK,CAACF,KAAK,GAAGA,KAAK;IACnBE,KAAK,CAACD,YAAY,GAAGA,YAAY;IACjCC,KAAK,CAACC,gBAAgB,GAAG,CAAC,CAAC,EAAE1B,aAAa,CAAC2B,gBAAgB,EAAE,CAAC;IAC9DF,KAAK,CAACG,UAAU,GAAG,KAAK,CAAC,CAAC;IAC1B;;IAEAH,KAAK,CAACI,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;IAEjC,OAAOJ,KAAK;EACd;EACA;AACF;AACA;AACA;AACA;;EAGE,CAAC,CAAC,EAAE/B,aAAa,CAACF,OAAO,EAAE2B,YAAY,EAAE,CAAC;IACxCW,GAAG,EAAE,aAAa;IAClBvC,KAAK,EAAE,SAAAA,CAAA,EACP;IACA;MACE,IAAIwC,MAAM,GAAG,IAAI;MAEjB,OAAOhC,YAAY,CAACP,OAAO,CAACwC,sBAAsB,CAAC,CAAC,CAACC,yBAAyB,CAAC,CAAC,CAACC,IAAI,CAAC,UAAUC,eAAe,EAAE;QAC/GA,eAAe,CAACC,WAAW,CAACL,MAAM,CAAC;QAEnCA,MAAM,CAACM,IAAI,CAAC,OAAO,CAAC;MACtB,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,CAAC;EACH,OAAOlB,YAAY;AACrB,CAAC,CAACrB,cAAc,CAACN,OAAO,CAAC;AAEzB,IAAI8C,QAAQ,GAAGnB,YAAY;AAC3B7B,OAAO,CAACE,OAAO,GAAG8C,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}