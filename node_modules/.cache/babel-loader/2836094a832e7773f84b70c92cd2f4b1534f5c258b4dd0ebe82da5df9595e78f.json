{"ast":null,"code":"import safariFix from 'safari-14-idb-fix';\nfunction promisifyRequest(request) {\n  return new Promise((resolve, reject) => {\n    // @ts-ignore - file size hacks\n    request.oncomplete = request.onsuccess = () => resolve(request.result);\n    // @ts-ignore - file size hacks\n    request.onabort = request.onerror = () => reject(request.error);\n  });\n}\nfunction createStore(dbName, storeName) {\n  const dbp = safariFix().then(() => {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    return promisifyRequest(request);\n  });\n  return (txMode, callback) => dbp.then(db => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n  if (!defaultGetStoreFunc) {\n    defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n  }\n  return defaultGetStoreFunc;\n}\n/**\r\n * Get a value by its key.\r\n *\r\n * @param key\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\nfunction get(key, customStore = defaultGetStore()) {\n  return customStore('readonly', store => promisifyRequest(store.get(key)));\n}\n/**\r\n * Set a value with a key.\r\n *\r\n * @param key\r\n * @param value\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n  return customStore('readwrite', store => {\n    store.put(value, key);\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\r\n * Set multiple values at once. This is faster than calling set() multiple times.\r\n * It's also atomic – if one of the pairs can't be added, none will be added.\r\n *\r\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n  return customStore('readwrite', store => {\n    entries.forEach(entry => store.put(entry[1], entry[0]));\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\r\n * Get multiple values by their keys\r\n *\r\n * @param keys\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n  return customStore('readonly', store => Promise.all(keys.map(key => promisifyRequest(store.get(key)))));\n}\n/**\r\n * Update a value. This lets you see the old value and update it as an atomic operation.\r\n *\r\n * @param key\r\n * @param updater A callback that takes the old value and returns a new value.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n  return customStore('readwrite', store =>\n  // Need to create the promise manually.\n  // If I try to chain promises, the transaction closes in browsers\n  // that use a promise polyfill (IE10/11).\n  new Promise((resolve, reject) => {\n    store.get(key).onsuccess = function () {\n      try {\n        store.put(updater(this.result), key);\n        resolve(promisifyRequest(store.transaction));\n      } catch (err) {\n        reject(err);\n      }\n    };\n  }));\n}\n/**\r\n * Delete a particular key from the store.\r\n *\r\n * @param key\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\nfunction del(key, customStore = defaultGetStore()) {\n  return customStore('readwrite', store => {\n    store.delete(key);\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\r\n * Delete multiple keys at once.\r\n *\r\n * @param keys List of keys to delete.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n  return customStore('readwrite', store => {\n    keys.forEach(key => store.delete(key));\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\r\n * Clear all values in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\nfunction clear(customStore = defaultGetStore()) {\n  return customStore('readwrite', store => {\n    store.clear();\n    return promisifyRequest(store.transaction);\n  });\n}\nfunction eachCursor(customStore, callback) {\n  return customStore('readonly', store => {\n    // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n    // And openKeyCursor isn't supported by Safari.\n    store.openCursor().onsuccess = function () {\n      if (!this.result) return;\n      callback(this.result);\n      this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\r\n * Get all keys in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\nfunction keys(customStore = defaultGetStore()) {\n  const items = [];\n  return eachCursor(customStore, cursor => items.push(cursor.key)).then(() => items);\n}\n/**\r\n * Get all values in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\nfunction values(customStore = defaultGetStore()) {\n  const items = [];\n  return eachCursor(customStore, cursor => items.push(cursor.value)).then(() => items);\n}\n/**\r\n * Get all entries in the store. Each entry is an array of `[key, value]`.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\nfunction entries(customStore = defaultGetStore()) {\n  const items = [];\n  return eachCursor(customStore, cursor => items.push([cursor.key, cursor.value])).then(() => items);\n}\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };","map":{"version":3,"names":["safariFix","promisifyRequest","request","Promise","resolve","reject","oncomplete","onsuccess","result","onabort","onerror","error","createStore","dbName","storeName","dbp","then","indexedDB","open","onupgradeneeded","createObjectStore","txMode","callback","db","transaction","objectStore","defaultGetStoreFunc","defaultGetStore","get","key","customStore","store","set","value","put","setMany","entries","forEach","entry","getMany","keys","all","map","update","updater","err","del","delete","delMany","clear","eachCursor","openCursor","continue","items","cursor","push","values"],"sources":["C:/Users/chtdu/Documents/WEB DEV/git-repo/react-webpack8/node_modules/idb-keyval/dist/index.js"],"sourcesContent":["import safariFix from 'safari-14-idb-fix';\r\n\r\nfunction promisifyRequest(request) {\r\n    return new Promise((resolve, reject) => {\r\n        // @ts-ignore - file size hacks\r\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\r\n        // @ts-ignore - file size hacks\r\n        request.onabort = request.onerror = () => reject(request.error);\r\n    });\r\n}\r\nfunction createStore(dbName, storeName) {\r\n    const dbp = safariFix().then(() => {\r\n        const request = indexedDB.open(dbName);\r\n        request.onupgradeneeded = () => request.result.createObjectStore(storeName);\r\n        return promisifyRequest(request);\r\n    });\r\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\r\n}\r\nlet defaultGetStoreFunc;\r\nfunction defaultGetStore() {\r\n    if (!defaultGetStoreFunc) {\r\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\r\n    }\r\n    return defaultGetStoreFunc;\r\n}\r\n/**\r\n * Get a value by its key.\r\n *\r\n * @param key\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction get(key, customStore = defaultGetStore()) {\r\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\r\n}\r\n/**\r\n * Set a value with a key.\r\n *\r\n * @param key\r\n * @param value\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction set(key, value, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        store.put(value, key);\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Set multiple values at once. This is faster than calling set() multiple times.\r\n * It's also atomic – if one of the pairs can't be added, none will be added.\r\n *\r\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction setMany(entries, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Get multiple values by their keys\r\n *\r\n * @param keys\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction getMany(keys, customStore = defaultGetStore()) {\r\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\r\n}\r\n/**\r\n * Update a value. This lets you see the old value and update it as an atomic operation.\r\n *\r\n * @param key\r\n * @param updater A callback that takes the old value and returns a new value.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction update(key, updater, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => \r\n    // Need to create the promise manually.\r\n    // If I try to chain promises, the transaction closes in browsers\r\n    // that use a promise polyfill (IE10/11).\r\n    new Promise((resolve, reject) => {\r\n        store.get(key).onsuccess = function () {\r\n            try {\r\n                store.put(updater(this.result), key);\r\n                resolve(promisifyRequest(store.transaction));\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        };\r\n    }));\r\n}\r\n/**\r\n * Delete a particular key from the store.\r\n *\r\n * @param key\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction del(key, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        store.delete(key);\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Delete multiple keys at once.\r\n *\r\n * @param keys List of keys to delete.\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction delMany(keys, customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        keys.forEach((key) => store.delete(key));\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Clear all values in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction clear(customStore = defaultGetStore()) {\r\n    return customStore('readwrite', (store) => {\r\n        store.clear();\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\nfunction eachCursor(customStore, callback) {\r\n    return customStore('readonly', (store) => {\r\n        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\r\n        // And openKeyCursor isn't supported by Safari.\r\n        store.openCursor().onsuccess = function () {\r\n            if (!this.result)\r\n                return;\r\n            callback(this.result);\r\n            this.result.continue();\r\n        };\r\n        return promisifyRequest(store.transaction);\r\n    });\r\n}\r\n/**\r\n * Get all keys in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction keys(customStore = defaultGetStore()) {\r\n    const items = [];\r\n    return eachCursor(customStore, (cursor) => items.push(cursor.key)).then(() => items);\r\n}\r\n/**\r\n * Get all values in the store.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction values(customStore = defaultGetStore()) {\r\n    const items = [];\r\n    return eachCursor(customStore, (cursor) => items.push(cursor.value)).then(() => items);\r\n}\r\n/**\r\n * Get all entries in the store. Each entry is an array of `[key, value]`.\r\n *\r\n * @param customStore Method to get a custom store. Use with caution (see the docs).\r\n */\r\nfunction entries(customStore = defaultGetStore()) {\r\n    const items = [];\r\n    return eachCursor(customStore, (cursor) => items.push([cursor.key, cursor.value])).then(() => items);\r\n}\r\n\r\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}