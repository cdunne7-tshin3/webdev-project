{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _decode = _interopRequireDefault(require(\"./decode\"));\nvar _encode = _interopRequireDefault(require(\"./encode\"));\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\n\n/**\r\n * Parse.Config is a local representation of configuration data that\r\n * can be set from the Parse dashboard.\r\n *\r\n * @alias Parse.Config\r\n */\n\nvar ParseConfig = /*#__PURE__*/function () {\n  function ParseConfig() {\n    (0, _classCallCheck2.default)(this, ParseConfig);\n    (0, _defineProperty2.default)(this, \"attributes\", void 0);\n    (0, _defineProperty2.default)(this, \"_escapedAttributes\", void 0);\n    this.attributes = {};\n    this._escapedAttributes = {};\n  }\n  /**\r\n   * Gets the value of an attribute.\r\n   *\r\n   * @param {string} attr The name of an attribute.\r\n   * @returns {*}\r\n   */\n\n  (0, _createClass2.default)(ParseConfig, [{\n    key: \"get\",\n    value: function (attr\n    /*: string*/) /*: any*/\n    {\n      return this.attributes[attr];\n    }\n    /**\r\n     * Gets the HTML-escaped value of an attribute.\r\n     *\r\n     * @param {string} attr The name of an attribute.\r\n     * @returns {string}\r\n     */\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/) /*: string*/\n    {\n      var html = this._escapedAttributes[attr];\n      if (html) {\n        return html;\n      }\n      var val = this.attributes[attr];\n      var escaped = '';\n      if (val != null) {\n        escaped = (0, _escape2.default)(val.toString());\n      }\n      this._escapedAttributes[attr] = escaped;\n      return escaped;\n    }\n    /**\r\n     * Retrieves the most recently-fetched configuration object, either from\r\n     * memory or from local storage if necessary.\r\n     *\r\n     * @static\r\n     * @returns {Parse.Config} The most recently-fetched Parse.Config if it\r\n     *     exists, else an empty Parse.Config.\r\n     */\n  }], [{\n    key: \"current\",\n    value: function () {\n      var controller = _CoreManager.default.getConfigController();\n      return controller.current();\n    }\n    /**\r\n     * Gets a new configuration object from the server.\r\n     *\r\n     * @static\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is resolved with a newly-created\r\n     *     configuration object when the get completes.\r\n     */\n  }, {\n    key: \"get\",\n    value: function () {\n      var options\n      /*: RequestOptions*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var controller = _CoreManager.default.getConfigController();\n      return controller.get(options);\n    }\n    /**\r\n     * Save value keys to the server.\r\n     *\r\n     * @static\r\n     * @param {object} attrs The config parameters and values.\r\n     * @param {object} masterKeyOnlyFlags The flags that define whether config parameters listed\r\n     * in `attrs` should be retrievable only by using the master key.\r\n     * For example: `param1: true` makes `param1` only retrievable by using the master key.\r\n     * If a parameter is not provided or set to `false`, it can be retrieved without\r\n     * using the master key.\r\n     * @returns {Promise} A promise that is resolved with a newly-created\r\n     *     configuration object or with the current with the update.\r\n     */\n  }, {\n    key: \"save\",\n    value: function (attrs\n    /*: { [key: string]: any }*/, masterKeyOnlyFlags\n    /*: { [key: string]: any }*/) {\n      var controller = _CoreManager.default.getConfigController(); //To avoid a mismatch with the local and the cloud config we get a new version\n\n      return controller.save(attrs, masterKeyOnlyFlags).then(function () {\n        return controller.get({\n          useMasterKey: true\n        });\n      }, function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n    /**\r\n     * Used for testing\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentConfig = null;\n    }\n  }]);\n  return ParseConfig;\n}();\nvar currentConfig = null;\nvar CURRENT_CONFIG_KEY = 'currentConfig';\nfunction decodePayload(data) {\n  try {\n    var json = JSON.parse(data);\n    if (json && (0, _typeof2.default)(json) === 'object') {\n      return (0, _decode.default)(json);\n    }\n  } catch (e) {\n    return null;\n  }\n}\nvar DefaultController = {\n  current: function () {\n    if (currentConfig) {\n      return currentConfig;\n    }\n    var config = new ParseConfig();\n    var storagePath = _Storage.default.generatePath(CURRENT_CONFIG_KEY);\n    if (!_Storage.default.async()) {\n      var configData = _Storage.default.getItem(storagePath);\n      if (configData) {\n        var attributes = decodePayload(configData);\n        if (attributes) {\n          config.attributes = attributes;\n          currentConfig = config;\n        }\n      }\n      return config;\n    } // Return a promise for async storage controllers\n\n    return _Storage.default.getItemAsync(storagePath).then(function (configData) {\n      if (configData) {\n        var _attributes = decodePayload(configData);\n        if (_attributes) {\n          config.attributes = _attributes;\n          currentConfig = config;\n        }\n      }\n      return config;\n    });\n  },\n  get: function () {\n    var options\n    /*: RequestOptions*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'config', {}, options).then(function (response) {\n      if (!response || !response.params) {\n        var error = new _ParseError.default(_ParseError.default.INVALID_JSON, 'Config JSON response invalid.');\n        return _promise.default.reject(error);\n      }\n      var config = new ParseConfig();\n      config.attributes = {};\n      for (var attr in response.params) {\n        config.attributes[attr] = (0, _decode.default)(response.params[attr]);\n      }\n      currentConfig = config;\n      return _Storage.default.setItemAsync(_Storage.default.generatePath(CURRENT_CONFIG_KEY), (0, _stringify.default)(response.params)).then(function () {\n        return config;\n      });\n    });\n  },\n  save: function (attrs\n  /*: { [key: string]: any }*/, masterKeyOnlyFlags\n  /*: { [key: string]: any }*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    var encodedAttrs = {};\n    for (var _key in attrs) {\n      encodedAttrs[_key] = (0, _encode.default)(attrs[_key]);\n    }\n    return RESTController.request('PUT', 'config', {\n      params: encodedAttrs,\n      masterKeyOnly: masterKeyOnlyFlags\n    }, {\n      useMasterKey: true\n    }).then(function (response) {\n      if (response && response.result) {\n        return _promise.default.resolve();\n      } else {\n        var error = new _ParseError.default(_ParseError.default.INTERNAL_SERVER_ERROR, 'Error occured updating Config.');\n        return _promise.default.reject(error);\n      }\n    });\n  }\n};\n_CoreManager.default.setConfigController(DefaultController);\nvar _default = ParseConfig;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_Object$defineProperty","exports","value","default","_stringify","_typeof2","_promise","_classCallCheck2","_createClass2","_defineProperty2","_CoreManager","_decode","_encode","_escape2","_ParseError","_Storage","ParseConfig","attributes","_escapedAttributes","key","attr","html","val","escaped","toString","controller","getConfigController","current","options","arguments","length","undefined","get","attrs","masterKeyOnlyFlags","save","then","useMasterKey","error","reject","currentConfig","CURRENT_CONFIG_KEY","decodePayload","data","json","JSON","parse","e","DefaultController","config","storagePath","generatePath","async","configData","getItem","getItemAsync","_attributes","RESTController","getRESTController","request","response","params","INVALID_JSON","setItemAsync","encodedAttrs","_key","masterKeyOnly","result","resolve","INTERNAL_SERVER_ERROR","setConfigController","_default"],"sources":["C:/Users/chtdu/Documents/WEB DEV/git-repo/react-webpack8/node_modules/parse/lib/browser/ParseConfig.js"],"sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\r\n\r\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\r\n\r\n_Object$defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nexports.default = void 0;\r\n\r\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\r\n\r\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\r\n\r\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\r\n\r\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\r\n\r\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\r\n\r\nvar _decode = _interopRequireDefault(require(\"./decode\"));\r\n\r\nvar _encode = _interopRequireDefault(require(\"./encode\"));\r\n\r\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\r\n\r\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\r\n\r\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\r\n/**\r\n * Copyright (c) 2015-present, Parse, LLC.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @flow\r\n */\r\n\r\n/**\r\n * Parse.Config is a local representation of configuration data that\r\n * can be set from the Parse dashboard.\r\n *\r\n * @alias Parse.Config\r\n */\r\n\r\n\r\nvar ParseConfig = /*#__PURE__*/function () {\r\n  function ParseConfig() {\r\n    (0, _classCallCheck2.default)(this, ParseConfig);\r\n    (0, _defineProperty2.default)(this, \"attributes\", void 0);\r\n    (0, _defineProperty2.default)(this, \"_escapedAttributes\", void 0);\r\n    this.attributes = {};\r\n    this._escapedAttributes = {};\r\n  }\r\n  /**\r\n   * Gets the value of an attribute.\r\n   *\r\n   * @param {string} attr The name of an attribute.\r\n   * @returns {*}\r\n   */\r\n\r\n\r\n  (0, _createClass2.default)(ParseConfig, [{\r\n    key: \"get\",\r\n    value: function (attr\r\n    /*: string*/\r\n    )\r\n    /*: any*/\r\n    {\r\n      return this.attributes[attr];\r\n    }\r\n    /**\r\n     * Gets the HTML-escaped value of an attribute.\r\n     *\r\n     * @param {string} attr The name of an attribute.\r\n     * @returns {string}\r\n     */\r\n\r\n  }, {\r\n    key: \"escape\",\r\n    value: function (attr\r\n    /*: string*/\r\n    )\r\n    /*: string*/\r\n    {\r\n      var html = this._escapedAttributes[attr];\r\n\r\n      if (html) {\r\n        return html;\r\n      }\r\n\r\n      var val = this.attributes[attr];\r\n      var escaped = '';\r\n\r\n      if (val != null) {\r\n        escaped = (0, _escape2.default)(val.toString());\r\n      }\r\n\r\n      this._escapedAttributes[attr] = escaped;\r\n      return escaped;\r\n    }\r\n    /**\r\n     * Retrieves the most recently-fetched configuration object, either from\r\n     * memory or from local storage if necessary.\r\n     *\r\n     * @static\r\n     * @returns {Parse.Config} The most recently-fetched Parse.Config if it\r\n     *     exists, else an empty Parse.Config.\r\n     */\r\n\r\n  }], [{\r\n    key: \"current\",\r\n    value: function () {\r\n      var controller = _CoreManager.default.getConfigController();\r\n\r\n      return controller.current();\r\n    }\r\n    /**\r\n     * Gets a new configuration object from the server.\r\n     *\r\n     * @static\r\n     * @param {object} options\r\n     * Valid options are:<ul>\r\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\r\n     *     be used for this request.\r\n     * </ul>\r\n     * @returns {Promise} A promise that is resolved with a newly-created\r\n     *     configuration object when the get completes.\r\n     */\r\n\r\n  }, {\r\n    key: \"get\",\r\n    value: function () {\r\n      var options\r\n      /*: RequestOptions*/\r\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n      var controller = _CoreManager.default.getConfigController();\r\n\r\n      return controller.get(options);\r\n    }\r\n    /**\r\n     * Save value keys to the server.\r\n     *\r\n     * @static\r\n     * @param {object} attrs The config parameters and values.\r\n     * @param {object} masterKeyOnlyFlags The flags that define whether config parameters listed\r\n     * in `attrs` should be retrievable only by using the master key.\r\n     * For example: `param1: true` makes `param1` only retrievable by using the master key.\r\n     * If a parameter is not provided or set to `false`, it can be retrieved without\r\n     * using the master key.\r\n     * @returns {Promise} A promise that is resolved with a newly-created\r\n     *     configuration object or with the current with the update.\r\n     */\r\n\r\n  }, {\r\n    key: \"save\",\r\n    value: function (attrs\r\n    /*: { [key: string]: any }*/\r\n    , masterKeyOnlyFlags\r\n    /*: { [key: string]: any }*/\r\n    ) {\r\n      var controller = _CoreManager.default.getConfigController(); //To avoid a mismatch with the local and the cloud config we get a new version\r\n\r\n\r\n      return controller.save(attrs, masterKeyOnlyFlags).then(function () {\r\n        return controller.get({\r\n          useMasterKey: true\r\n        });\r\n      }, function (error) {\r\n        return _promise.default.reject(error);\r\n      });\r\n    }\r\n    /**\r\n     * Used for testing\r\n     *\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"_clearCache\",\r\n    value: function () {\r\n      currentConfig = null;\r\n    }\r\n  }]);\r\n  return ParseConfig;\r\n}();\r\n\r\nvar currentConfig = null;\r\nvar CURRENT_CONFIG_KEY = 'currentConfig';\r\n\r\nfunction decodePayload(data) {\r\n  try {\r\n    var json = JSON.parse(data);\r\n\r\n    if (json && (0, _typeof2.default)(json) === 'object') {\r\n      return (0, _decode.default)(json);\r\n    }\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\nvar DefaultController = {\r\n  current: function () {\r\n    if (currentConfig) {\r\n      return currentConfig;\r\n    }\r\n\r\n    var config = new ParseConfig();\r\n\r\n    var storagePath = _Storage.default.generatePath(CURRENT_CONFIG_KEY);\r\n\r\n    if (!_Storage.default.async()) {\r\n      var configData = _Storage.default.getItem(storagePath);\r\n\r\n      if (configData) {\r\n        var attributes = decodePayload(configData);\r\n\r\n        if (attributes) {\r\n          config.attributes = attributes;\r\n          currentConfig = config;\r\n        }\r\n      }\r\n\r\n      return config;\r\n    } // Return a promise for async storage controllers\r\n\r\n\r\n    return _Storage.default.getItemAsync(storagePath).then(function (configData) {\r\n      if (configData) {\r\n        var _attributes = decodePayload(configData);\r\n\r\n        if (_attributes) {\r\n          config.attributes = _attributes;\r\n          currentConfig = config;\r\n        }\r\n      }\r\n\r\n      return config;\r\n    });\r\n  },\r\n  get: function () {\r\n    var options\r\n    /*: RequestOptions*/\r\n    = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n    var RESTController = _CoreManager.default.getRESTController();\r\n\r\n    return RESTController.request('GET', 'config', {}, options).then(function (response) {\r\n      if (!response || !response.params) {\r\n        var error = new _ParseError.default(_ParseError.default.INVALID_JSON, 'Config JSON response invalid.');\r\n        return _promise.default.reject(error);\r\n      }\r\n\r\n      var config = new ParseConfig();\r\n      config.attributes = {};\r\n\r\n      for (var attr in response.params) {\r\n        config.attributes[attr] = (0, _decode.default)(response.params[attr]);\r\n      }\r\n\r\n      currentConfig = config;\r\n      return _Storage.default.setItemAsync(_Storage.default.generatePath(CURRENT_CONFIG_KEY), (0, _stringify.default)(response.params)).then(function () {\r\n        return config;\r\n      });\r\n    });\r\n  },\r\n  save: function (attrs\r\n  /*: { [key: string]: any }*/\r\n  , masterKeyOnlyFlags\r\n  /*: { [key: string]: any }*/\r\n  ) {\r\n    var RESTController = _CoreManager.default.getRESTController();\r\n\r\n    var encodedAttrs = {};\r\n\r\n    for (var _key in attrs) {\r\n      encodedAttrs[_key] = (0, _encode.default)(attrs[_key]);\r\n    }\r\n\r\n    return RESTController.request('PUT', 'config', {\r\n      params: encodedAttrs,\r\n      masterKeyOnly: masterKeyOnlyFlags\r\n    }, {\r\n      useMasterKey: true\r\n    }).then(function (response) {\r\n      if (response && response.result) {\r\n        return _promise.default.resolve();\r\n      } else {\r\n        var error = new _ParseError.default(_ParseError.default.INTERNAL_SERVER_ERROR, 'Error occured updating Config.');\r\n        return _promise.default.reject(error);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n_CoreManager.default.setConfigController(DefaultController);\r\n\r\nvar _default = ParseConfig;\r\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}