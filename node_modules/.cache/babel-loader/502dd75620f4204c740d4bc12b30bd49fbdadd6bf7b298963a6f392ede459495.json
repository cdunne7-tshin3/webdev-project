{"ast":null,"code":";\n(function (root, factory, undef) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\", \"./evpkdf\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  /**\r\n   * Cipher core components.\r\n   */\n  CryptoJS.lib.Cipher || function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var Base64 = C_enc.Base64;\n    var C_algo = C.algo;\n    var EvpKDF = C_algo.EvpKDF;\n\n    /**\r\n     * Abstract base cipher template.\r\n     *\r\n     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\r\n     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\r\n     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\r\n     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\r\n     */\n    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {WordArray} iv The IV to use for this operation.\r\n       */\n      cfg: Base.extend(),\n      /**\r\n       * Creates this cipher in encryption mode.\r\n       *\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {Cipher} A cipher instance.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\r\n       */\n      createEncryptor: function (key, cfg) {\n        return this.create(this._ENC_XFORM_MODE, key, cfg);\n      },\n      /**\r\n       * Creates this cipher in decryption mode.\r\n       *\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {Cipher} A cipher instance.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\r\n       */\n      createDecryptor: function (key, cfg) {\n        return this.create(this._DEC_XFORM_MODE, key, cfg);\n      },\n      /**\r\n       * Initializes a newly created cipher.\r\n       *\r\n       * @param {number} xformMode Either the encryption or decryption transormation mode constant.\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\r\n       */\n      init: function (xformMode, key, cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg);\n\n        // Store transform mode and key\n        this._xformMode = xformMode;\n        this._key = key;\n\n        // Set initial values\n        this.reset();\n      },\n      /**\r\n       * Resets this cipher to its initial state.\r\n       *\r\n       * @example\r\n       *\r\n       *     cipher.reset();\r\n       */\n      reset: function () {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this);\n\n        // Perform concrete-cipher logic\n        this._doReset();\n      },\n      /**\r\n       * Adds data to be encrypted or decrypted.\r\n       *\r\n       * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\r\n       *\r\n       * @return {WordArray} The data after processing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var encrypted = cipher.process('data');\r\n       *     var encrypted = cipher.process(wordArray);\r\n       */\n      process: function (dataUpdate) {\n        // Append\n        this._append(dataUpdate);\n\n        // Process available blocks\n        return this._process();\n      },\n      /**\r\n       * Finalizes the encryption or decryption process.\r\n       * Note that the finalize operation is effectively a destructive, read-once operation.\r\n       *\r\n       * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\r\n       *\r\n       * @return {WordArray} The data after final processing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var encrypted = cipher.finalize();\r\n       *     var encrypted = cipher.finalize('data');\r\n       *     var encrypted = cipher.finalize(wordArray);\r\n       */\n      finalize: function (dataUpdate) {\n        // Final data update\n        if (dataUpdate) {\n          this._append(dataUpdate);\n        }\n\n        // Perform concrete-cipher logic\n        var finalProcessedData = this._doFinalize();\n        return finalProcessedData;\n      },\n      keySize: 128 / 32,\n      ivSize: 128 / 32,\n      _ENC_XFORM_MODE: 1,\n      _DEC_XFORM_MODE: 2,\n      /**\r\n       * Creates shortcut functions to a cipher's object interface.\r\n       *\r\n       * @param {Cipher} cipher The cipher to create a helper for.\r\n       *\r\n       * @return {Object} An object with encrypt and decrypt shortcut functions.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\r\n       */\n      _createHelper: function () {\n        function selectCipherStrategy(key) {\n          if (typeof key == 'string') {\n            return PasswordBasedCipher;\n          } else {\n            return SerializableCipher;\n          }\n        }\n        return function (cipher) {\n          return {\n            encrypt: function (message, key, cfg) {\n              return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n            },\n            decrypt: function (ciphertext, key, cfg) {\n              return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n            }\n          };\n        };\n      }()\n    });\n\n    /**\r\n     * Abstract base stream cipher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\r\n     */\n    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n      _doFinalize: function () {\n        // Process partial blocks\n        var finalProcessedBlocks = this._process(!!'flush');\n        return finalProcessedBlocks;\n      },\n      blockSize: 1\n    });\n\n    /**\r\n     * Mode namespace.\r\n     */\n    var C_mode = C.mode = {};\n\n    /**\r\n     * Abstract base block cipher mode template.\r\n     */\n    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n      /**\r\n       * Creates this mode for encryption.\r\n       *\r\n       * @param {Cipher} cipher A block cipher instance.\r\n       * @param {Array} iv The IV words.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\r\n       */\n      createEncryptor: function (cipher, iv) {\n        return this.Encryptor.create(cipher, iv);\n      },\n      /**\r\n       * Creates this mode for decryption.\r\n       *\r\n       * @param {Cipher} cipher A block cipher instance.\r\n       * @param {Array} iv The IV words.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\r\n       */\n      createDecryptor: function (cipher, iv) {\n        return this.Decryptor.create(cipher, iv);\n      },\n      /**\r\n       * Initializes a newly created mode.\r\n       *\r\n       * @param {Cipher} cipher A block cipher instance.\r\n       * @param {Array} iv The IV words.\r\n       *\r\n       * @example\r\n       *\r\n       *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\r\n       */\n      init: function (cipher, iv) {\n        this._cipher = cipher;\n        this._iv = iv;\n      }\n    });\n\n    /**\r\n     * Cipher Block Chaining mode.\r\n     */\n    var CBC = C_mode.CBC = function () {\n      /**\r\n       * Abstract base CBC mode.\r\n       */\n      var CBC = BlockCipherMode.extend();\n\n      /**\r\n       * CBC encryptor.\r\n       */\n      CBC.Encryptor = CBC.extend({\n        /**\r\n         * Processes the data block at offset.\r\n         *\r\n         * @param {Array} words The data words to operate on.\r\n         * @param {number} offset The offset where the block starts.\r\n         *\r\n         * @example\r\n         *\r\n         *     mode.processBlock(data.words, offset);\r\n         */\n        processBlock: function (words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n\n          // XOR and encrypt\n          xorBlock.call(this, words, offset, blockSize);\n          cipher.encryptBlock(words, offset);\n\n          // Remember this block to use with next block\n          this._prevBlock = words.slice(offset, offset + blockSize);\n        }\n      });\n\n      /**\r\n       * CBC decryptor.\r\n       */\n      CBC.Decryptor = CBC.extend({\n        /**\r\n         * Processes the data block at offset.\r\n         *\r\n         * @param {Array} words The data words to operate on.\r\n         * @param {number} offset The offset where the block starts.\r\n         *\r\n         * @example\r\n         *\r\n         *     mode.processBlock(data.words, offset);\r\n         */\n        processBlock: function (words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n\n          // Remember this block to use with next block\n          var thisBlock = words.slice(offset, offset + blockSize);\n\n          // Decrypt and XOR\n          cipher.decryptBlock(words, offset);\n          xorBlock.call(this, words, offset, blockSize);\n\n          // This block becomes the previous block\n          this._prevBlock = thisBlock;\n        }\n      });\n      function xorBlock(words, offset, blockSize) {\n        var block;\n\n        // Shortcut\n        var iv = this._iv;\n\n        // Choose mixing block\n        if (iv) {\n          block = iv;\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        } else {\n          block = this._prevBlock;\n        }\n\n        // XOR blocks\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= block[i];\n        }\n      }\n      return CBC;\n    }();\n\n    /**\r\n     * Padding namespace.\r\n     */\n    var C_pad = C.pad = {};\n\n    /**\r\n     * PKCS #5/7 padding strategy.\r\n     */\n    var Pkcs7 = C_pad.Pkcs7 = {\n      /**\r\n       * Pads data using the algorithm defined in PKCS #5/7.\r\n       *\r\n       * @param {WordArray} data The data to pad.\r\n       * @param {number} blockSize The multiple that the data should be padded to.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\r\n       */\n      pad: function (data, blockSize) {\n        // Shortcut\n        var blockSizeBytes = blockSize * 4;\n\n        // Count padding bytes\n        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n        // Create padding word\n        var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;\n\n        // Create padding\n        var paddingWords = [];\n        for (var i = 0; i < nPaddingBytes; i += 4) {\n          paddingWords.push(paddingWord);\n        }\n        var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n        // Add padding\n        data.concat(padding);\n      },\n      /**\r\n       * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\r\n       *\r\n       * @param {WordArray} data The data to unpad.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     CryptoJS.pad.Pkcs7.unpad(wordArray);\r\n       */\n      unpad: function (data) {\n        // Get number of padding bytes from last byte\n        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n        // Remove padding\n        data.sigBytes -= nPaddingBytes;\n      }\n    };\n\n    /**\r\n     * Abstract base block cipher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\r\n     */\n    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {Mode} mode The block mode to use. Default: CBC\r\n       * @property {Padding} padding The padding strategy to use. Default: Pkcs7\r\n       */\n      cfg: Cipher.cfg.extend({\n        mode: CBC,\n        padding: Pkcs7\n      }),\n      reset: function () {\n        var modeCreator;\n\n        // Reset cipher\n        Cipher.reset.call(this);\n\n        // Shortcuts\n        var cfg = this.cfg;\n        var iv = cfg.iv;\n        var mode = cfg.mode;\n\n        // Reset block mode\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          modeCreator = mode.createEncryptor;\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{\n            modeCreator = mode.createDecryptor;\n            // Keep at least one block in the buffer for unpadding\n            this._minBufferSize = 1;\n          }\n        if (this._mode && this._mode.__creator == modeCreator) {\n          this._mode.init(this, iv && iv.words);\n        } else {\n          this._mode = modeCreator.call(mode, this, iv && iv.words);\n          this._mode.__creator = modeCreator;\n        }\n      },\n      _doProcessBlock: function (words, offset) {\n        this._mode.processBlock(words, offset);\n      },\n      _doFinalize: function () {\n        var finalProcessedBlocks;\n\n        // Shortcut\n        var padding = this.cfg.padding;\n\n        // Finalize\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          // Pad data\n          padding.pad(this._data, this.blockSize);\n\n          // Process final blocks\n          finalProcessedBlocks = this._process(!!'flush');\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{\n            // Process final blocks\n            finalProcessedBlocks = this._process(!!'flush');\n\n            // Unpad data\n            padding.unpad(finalProcessedBlocks);\n          }\n        return finalProcessedBlocks;\n      },\n      blockSize: 128 / 32\n    });\n\n    /**\r\n     * A collection of cipher parameters.\r\n     *\r\n     * @property {WordArray} ciphertext The raw ciphertext.\r\n     * @property {WordArray} key The key to this ciphertext.\r\n     * @property {WordArray} iv The IV used in the ciphering operation.\r\n     * @property {WordArray} salt The salt used with a key derivation function.\r\n     * @property {Cipher} algorithm The cipher algorithm.\r\n     * @property {Mode} mode The block mode used in the ciphering operation.\r\n     * @property {Padding} padding The padding scheme used in the ciphering operation.\r\n     * @property {number} blockSize The block size of the cipher.\r\n     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\r\n     */\n    var CipherParams = C_lib.CipherParams = Base.extend({\n      /**\r\n       * Initializes a newly created cipher params object.\r\n       *\r\n       * @param {Object} cipherParams An object with any of the possible cipher parameters.\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipherParams = CryptoJS.lib.CipherParams.create({\r\n       *         ciphertext: ciphertextWordArray,\r\n       *         key: keyWordArray,\r\n       *         iv: ivWordArray,\r\n       *         salt: saltWordArray,\r\n       *         algorithm: CryptoJS.algo.AES,\r\n       *         mode: CryptoJS.mode.CBC,\r\n       *         padding: CryptoJS.pad.PKCS7,\r\n       *         blockSize: 4,\r\n       *         formatter: CryptoJS.format.OpenSSL\r\n       *     });\r\n       */\n      init: function (cipherParams) {\n        this.mixIn(cipherParams);\n      },\n      /**\r\n       * Converts this cipher params object to a string.\r\n       *\r\n       * @param {Format} formatter (Optional) The formatting strategy to use.\r\n       *\r\n       * @return {string} The stringified cipher params.\r\n       *\r\n       * @throws Error If neither the formatter nor the default formatter is set.\r\n       *\r\n       * @example\r\n       *\r\n       *     var string = cipherParams + '';\r\n       *     var string = cipherParams.toString();\r\n       *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\r\n       */\n      toString: function (formatter) {\n        return (formatter || this.formatter).stringify(this);\n      }\n    });\n\n    /**\r\n     * Format namespace.\r\n     */\n    var C_format = C.format = {};\n\n    /**\r\n     * OpenSSL formatting strategy.\r\n     */\n    var OpenSSLFormatter = C_format.OpenSSL = {\n      /**\r\n       * Converts a cipher params object to an OpenSSL-compatible string.\r\n       *\r\n       * @param {CipherParams} cipherParams The cipher params object.\r\n       *\r\n       * @return {string} The OpenSSL-compatible string.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\r\n       */\n      stringify: function (cipherParams) {\n        var wordArray;\n\n        // Shortcuts\n        var ciphertext = cipherParams.ciphertext;\n        var salt = cipherParams.salt;\n\n        // Format\n        if (salt) {\n          wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n        } else {\n          wordArray = ciphertext;\n        }\n        return wordArray.toString(Base64);\n      },\n      /**\r\n       * Converts an OpenSSL-compatible string to a cipher params object.\r\n       *\r\n       * @param {string} openSSLStr The OpenSSL-compatible string.\r\n       *\r\n       * @return {CipherParams} The cipher params object.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\r\n       */\n      parse: function (openSSLStr) {\n        var salt;\n\n        // Parse base64\n        var ciphertext = Base64.parse(openSSLStr);\n\n        // Shortcut\n        var ciphertextWords = ciphertext.words;\n\n        // Test for salt\n        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n          // Extract salt\n          salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n          // Remove salt from ciphertext\n          ciphertextWords.splice(0, 4);\n          ciphertext.sigBytes -= 16;\n        }\n        return CipherParams.create({\n          ciphertext: ciphertext,\n          salt: salt\n        });\n      }\n    };\n\n    /**\r\n     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\r\n     */\n    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\r\n       */\n      cfg: Base.extend({\n        format: OpenSSLFormatter\n      }),\n      /**\r\n       * Encrypts a message.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {WordArray|string} message The message to encrypt.\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {CipherParams} A cipher params object.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n       */\n      encrypt: function (cipher, message, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Encrypt\n        var encryptor = cipher.createEncryptor(key, cfg);\n        var ciphertext = encryptor.finalize(message);\n\n        // Shortcut\n        var cipherCfg = encryptor.cfg;\n\n        // Create and return serializable cipher params\n        return CipherParams.create({\n          ciphertext: ciphertext,\n          key: key,\n          iv: cipherCfg.iv,\n          algorithm: cipher,\n          mode: cipherCfg.mode,\n          padding: cipherCfg.padding,\n          blockSize: cipher.blockSize,\n          formatter: cfg.format\n        });\n      },\n      /**\r\n       * Decrypts serialized ciphertext.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {WordArray} The plaintext.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n       */\n      decrypt: function (cipher, ciphertext, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, cfg.format);\n\n        // Decrypt\n        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n        return plaintext;\n      },\n      /**\r\n       * Converts serialized ciphertext to CipherParams,\r\n       * else assumed CipherParams already and returns ciphertext unchanged.\r\n       *\r\n       * @param {CipherParams|string} ciphertext The ciphertext.\r\n       * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\r\n       *\r\n       * @return {CipherParams} The unserialized ciphertext.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\r\n       */\n      _parse: function (ciphertext, format) {\n        if (typeof ciphertext == 'string') {\n          return format.parse(ciphertext, this);\n        } else {\n          return ciphertext;\n        }\n      }\n    });\n\n    /**\r\n     * Key derivation function namespace.\r\n     */\n    var C_kdf = C.kdf = {};\n\n    /**\r\n     * OpenSSL key derivation function.\r\n     */\n    var OpenSSLKdf = C_kdf.OpenSSL = {\n      /**\r\n       * Derives a key and IV from a password.\r\n       *\r\n       * @param {string} password The password to derive from.\r\n       * @param {number} keySize The size in words of the key to generate.\r\n       * @param {number} ivSize The size in words of the IV to generate.\r\n       * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\r\n       *\r\n       * @return {CipherParams} A cipher params object with the key, IV, and salt.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\r\n       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\r\n       */\n      execute: function (password, keySize, ivSize, salt) {\n        // Generate random salt\n        if (!salt) {\n          salt = WordArray.random(64 / 8);\n        }\n\n        // Derive key and IV\n        var key = EvpKDF.create({\n          keySize: keySize + ivSize\n        }).compute(password, salt);\n\n        // Separate key and IV\n        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n        key.sigBytes = keySize * 4;\n\n        // Return params\n        return CipherParams.create({\n          key: key,\n          iv: iv,\n          salt: salt\n        });\n      }\n    };\n\n    /**\r\n     * A serializable cipher wrapper that derives the key from a password,\r\n     * and returns ciphertext as a serializable cipher params object.\r\n     */\n    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\r\n       */\n      cfg: SerializableCipher.cfg.extend({\n        kdf: OpenSSLKdf\n      }),\n      /**\r\n       * Encrypts a message using a password.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {WordArray|string} message The message to encrypt.\r\n       * @param {string} password The password.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {CipherParams} A cipher params object.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\r\n       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\r\n       */\n      encrypt: function (cipher, message, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Derive key and other params\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n        // Add IV to config\n        cfg.iv = derivedParams.iv;\n\n        // Encrypt\n        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n        // Mix in derived params\n        ciphertext.mixIn(derivedParams);\n        return ciphertext;\n      },\n      /**\r\n       * Decrypts serialized ciphertext using a password.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n       * @param {string} password The password.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {WordArray} The plaintext.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\r\n       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\r\n       */\n      decrypt: function (cipher, ciphertext, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, cfg.format);\n\n        // Derive key and other params\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n        // Add IV to config\n        cfg.iv = derivedParams.iv;\n\n        // Decrypt\n        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n        return plaintext;\n      }\n    });\n  }();\n});","map":{"version":3,"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","lib","Cipher","undefined","C","C_lib","Base","WordArray","BufferedBlockAlgorithm","C_enc","enc","Utf8","Base64","C_algo","algo","EvpKDF","extend","cfg","createEncryptor","key","create","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","init","xformMode","_xformMode","_key","reset","call","_doReset","process","dataUpdate","_append","_process","finalize","finalProcessedData","_doFinalize","keySize","ivSize","_createHelper","selectCipherStrategy","PasswordBasedCipher","SerializableCipher","cipher","encrypt","message","decrypt","ciphertext","StreamCipher","finalProcessedBlocks","blockSize","C_mode","mode","BlockCipherMode","iv","Encryptor","Decryptor","_cipher","_iv","CBC","processBlock","words","offset","xorBlock","encryptBlock","_prevBlock","slice","thisBlock","decryptBlock","block","i","C_pad","pad","Pkcs7","data","blockSizeBytes","nPaddingBytes","sigBytes","paddingWord","paddingWords","push","padding","concat","unpad","BlockCipher","modeCreator","_minBufferSize","_mode","__creator","_doProcessBlock","_data","CipherParams","cipherParams","mixIn","toString","formatter","stringify","C_format","format","OpenSSLFormatter","OpenSSL","wordArray","salt","parse","openSSLStr","ciphertextWords","splice","encryptor","cipherCfg","algorithm","_parse","plaintext","C_kdf","kdf","OpenSSLKdf","execute","password","random","compute","derivedParams"],"sources":["C:/Users/chtdu/Documents/WEB DEV/git-repo/react-webpack8/node_modules/crypto-js/cipher-core.js"],"sourcesContent":[";(function (root, factory, undef) {\r\n\tif (typeof exports === \"object\") {\r\n\t\t// CommonJS\r\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\r\n\t}\r\n\telse if (typeof define === \"function\" && define.amd) {\r\n\t\t// AMD\r\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\r\n\t}\r\n\telse {\r\n\t\t// Global (browser)\r\n\t\tfactory(root.CryptoJS);\r\n\t}\r\n}(this, function (CryptoJS) {\r\n\r\n\t/**\r\n\t * Cipher core components.\r\n\t */\r\n\tCryptoJS.lib.Cipher || (function (undefined) {\r\n\t    // Shortcuts\r\n\t    var C = CryptoJS;\r\n\t    var C_lib = C.lib;\r\n\t    var Base = C_lib.Base;\r\n\t    var WordArray = C_lib.WordArray;\r\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\r\n\t    var C_enc = C.enc;\r\n\t    var Utf8 = C_enc.Utf8;\r\n\t    var Base64 = C_enc.Base64;\r\n\t    var C_algo = C.algo;\r\n\t    var EvpKDF = C_algo.EvpKDF;\r\n\r\n\t    /**\r\n\t     * Abstract base cipher template.\r\n\t     *\r\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\r\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\r\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\r\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\r\n\t     */\r\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\r\n\t        /**\r\n\t         * Configuration options.\r\n\t         *\r\n\t         * @property {WordArray} iv The IV to use for this operation.\r\n\t         */\r\n\t        cfg: Base.extend(),\r\n\r\n\t        /**\r\n\t         * Creates this cipher in encryption mode.\r\n\t         *\r\n\t         * @param {WordArray} key The key.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {Cipher} A cipher instance.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\r\n\t         */\r\n\t        createEncryptor: function (key, cfg) {\r\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Creates this cipher in decryption mode.\r\n\t         *\r\n\t         * @param {WordArray} key The key.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {Cipher} A cipher instance.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\r\n\t         */\r\n\t        createDecryptor: function (key, cfg) {\r\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Initializes a newly created cipher.\r\n\t         *\r\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\r\n\t         * @param {WordArray} key The key.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\r\n\t         */\r\n\t        init: function (xformMode, key, cfg) {\r\n\t            // Apply config defaults\r\n\t            this.cfg = this.cfg.extend(cfg);\r\n\r\n\t            // Store transform mode and key\r\n\t            this._xformMode = xformMode;\r\n\t            this._key = key;\r\n\r\n\t            // Set initial values\r\n\t            this.reset();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Resets this cipher to its initial state.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     cipher.reset();\r\n\t         */\r\n\t        reset: function () {\r\n\t            // Reset data buffer\r\n\t            BufferedBlockAlgorithm.reset.call(this);\r\n\r\n\t            // Perform concrete-cipher logic\r\n\t            this._doReset();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Adds data to be encrypted or decrypted.\r\n\t         *\r\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\r\n\t         *\r\n\t         * @return {WordArray} The data after processing.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var encrypted = cipher.process('data');\r\n\t         *     var encrypted = cipher.process(wordArray);\r\n\t         */\r\n\t        process: function (dataUpdate) {\r\n\t            // Append\r\n\t            this._append(dataUpdate);\r\n\r\n\t            // Process available blocks\r\n\t            return this._process();\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Finalizes the encryption or decryption process.\r\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n\t         *\r\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\r\n\t         *\r\n\t         * @return {WordArray} The data after final processing.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var encrypted = cipher.finalize();\r\n\t         *     var encrypted = cipher.finalize('data');\r\n\t         *     var encrypted = cipher.finalize(wordArray);\r\n\t         */\r\n\t        finalize: function (dataUpdate) {\r\n\t            // Final data update\r\n\t            if (dataUpdate) {\r\n\t                this._append(dataUpdate);\r\n\t            }\r\n\r\n\t            // Perform concrete-cipher logic\r\n\t            var finalProcessedData = this._doFinalize();\r\n\r\n\t            return finalProcessedData;\r\n\t        },\r\n\r\n\t        keySize: 128/32,\r\n\r\n\t        ivSize: 128/32,\r\n\r\n\t        _ENC_XFORM_MODE: 1,\r\n\r\n\t        _DEC_XFORM_MODE: 2,\r\n\r\n\t        /**\r\n\t         * Creates shortcut functions to a cipher's object interface.\r\n\t         *\r\n\t         * @param {Cipher} cipher The cipher to create a helper for.\r\n\t         *\r\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\r\n\t         */\r\n\t        _createHelper: (function () {\r\n\t            function selectCipherStrategy(key) {\r\n\t                if (typeof key == 'string') {\r\n\t                    return PasswordBasedCipher;\r\n\t                } else {\r\n\t                    return SerializableCipher;\r\n\t                }\r\n\t            }\r\n\r\n\t            return function (cipher) {\r\n\t                return {\r\n\t                    encrypt: function (message, key, cfg) {\r\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\r\n\t                    },\r\n\r\n\t                    decrypt: function (ciphertext, key, cfg) {\r\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\r\n\t                    }\r\n\t                };\r\n\t            };\r\n\t        }())\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Abstract base stream cipher template.\r\n\t     *\r\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\r\n\t     */\r\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\r\n\t        _doFinalize: function () {\r\n\t            // Process partial blocks\r\n\t            var finalProcessedBlocks = this._process(!!'flush');\r\n\r\n\t            return finalProcessedBlocks;\r\n\t        },\r\n\r\n\t        blockSize: 1\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Mode namespace.\r\n\t     */\r\n\t    var C_mode = C.mode = {};\r\n\r\n\t    /**\r\n\t     * Abstract base block cipher mode template.\r\n\t     */\r\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\r\n\t        /**\r\n\t         * Creates this mode for encryption.\r\n\t         *\r\n\t         * @param {Cipher} cipher A block cipher instance.\r\n\t         * @param {Array} iv The IV words.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\r\n\t         */\r\n\t        createEncryptor: function (cipher, iv) {\r\n\t            return this.Encryptor.create(cipher, iv);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Creates this mode for decryption.\r\n\t         *\r\n\t         * @param {Cipher} cipher A block cipher instance.\r\n\t         * @param {Array} iv The IV words.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\r\n\t         */\r\n\t        createDecryptor: function (cipher, iv) {\r\n\t            return this.Decryptor.create(cipher, iv);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Initializes a newly created mode.\r\n\t         *\r\n\t         * @param {Cipher} cipher A block cipher instance.\r\n\t         * @param {Array} iv The IV words.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\r\n\t         */\r\n\t        init: function (cipher, iv) {\r\n\t            this._cipher = cipher;\r\n\t            this._iv = iv;\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Cipher Block Chaining mode.\r\n\t     */\r\n\t    var CBC = C_mode.CBC = (function () {\r\n\t        /**\r\n\t         * Abstract base CBC mode.\r\n\t         */\r\n\t        var CBC = BlockCipherMode.extend();\r\n\r\n\t        /**\r\n\t         * CBC encryptor.\r\n\t         */\r\n\t        CBC.Encryptor = CBC.extend({\r\n\t            /**\r\n\t             * Processes the data block at offset.\r\n\t             *\r\n\t             * @param {Array} words The data words to operate on.\r\n\t             * @param {number} offset The offset where the block starts.\r\n\t             *\r\n\t             * @example\r\n\t             *\r\n\t             *     mode.processBlock(data.words, offset);\r\n\t             */\r\n\t            processBlock: function (words, offset) {\r\n\t                // Shortcuts\r\n\t                var cipher = this._cipher;\r\n\t                var blockSize = cipher.blockSize;\r\n\r\n\t                // XOR and encrypt\r\n\t                xorBlock.call(this, words, offset, blockSize);\r\n\t                cipher.encryptBlock(words, offset);\r\n\r\n\t                // Remember this block to use with next block\r\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\r\n\t            }\r\n\t        });\r\n\r\n\t        /**\r\n\t         * CBC decryptor.\r\n\t         */\r\n\t        CBC.Decryptor = CBC.extend({\r\n\t            /**\r\n\t             * Processes the data block at offset.\r\n\t             *\r\n\t             * @param {Array} words The data words to operate on.\r\n\t             * @param {number} offset The offset where the block starts.\r\n\t             *\r\n\t             * @example\r\n\t             *\r\n\t             *     mode.processBlock(data.words, offset);\r\n\t             */\r\n\t            processBlock: function (words, offset) {\r\n\t                // Shortcuts\r\n\t                var cipher = this._cipher;\r\n\t                var blockSize = cipher.blockSize;\r\n\r\n\t                // Remember this block to use with next block\r\n\t                var thisBlock = words.slice(offset, offset + blockSize);\r\n\r\n\t                // Decrypt and XOR\r\n\t                cipher.decryptBlock(words, offset);\r\n\t                xorBlock.call(this, words, offset, blockSize);\r\n\r\n\t                // This block becomes the previous block\r\n\t                this._prevBlock = thisBlock;\r\n\t            }\r\n\t        });\r\n\r\n\t        function xorBlock(words, offset, blockSize) {\r\n\t            var block;\r\n\r\n\t            // Shortcut\r\n\t            var iv = this._iv;\r\n\r\n\t            // Choose mixing block\r\n\t            if (iv) {\r\n\t                block = iv;\r\n\r\n\t                // Remove IV for subsequent blocks\r\n\t                this._iv = undefined;\r\n\t            } else {\r\n\t                block = this._prevBlock;\r\n\t            }\r\n\r\n\t            // XOR blocks\r\n\t            for (var i = 0; i < blockSize; i++) {\r\n\t                words[offset + i] ^= block[i];\r\n\t            }\r\n\t        }\r\n\r\n\t        return CBC;\r\n\t    }());\r\n\r\n\t    /**\r\n\t     * Padding namespace.\r\n\t     */\r\n\t    var C_pad = C.pad = {};\r\n\r\n\t    /**\r\n\t     * PKCS #5/7 padding strategy.\r\n\t     */\r\n\t    var Pkcs7 = C_pad.Pkcs7 = {\r\n\t        /**\r\n\t         * Pads data using the algorithm defined in PKCS #5/7.\r\n\t         *\r\n\t         * @param {WordArray} data The data to pad.\r\n\t         * @param {number} blockSize The multiple that the data should be padded to.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\r\n\t         */\r\n\t        pad: function (data, blockSize) {\r\n\t            // Shortcut\r\n\t            var blockSizeBytes = blockSize * 4;\r\n\r\n\t            // Count padding bytes\r\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\r\n\r\n\t            // Create padding word\r\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\r\n\r\n\t            // Create padding\r\n\t            var paddingWords = [];\r\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\r\n\t                paddingWords.push(paddingWord);\r\n\t            }\r\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\r\n\r\n\t            // Add padding\r\n\t            data.concat(padding);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\r\n\t         *\r\n\t         * @param {WordArray} data The data to unpad.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\r\n\t         */\r\n\t        unpad: function (data) {\r\n\t            // Get number of padding bytes from last byte\r\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\r\n\r\n\t            // Remove padding\r\n\t            data.sigBytes -= nPaddingBytes;\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * Abstract base block cipher template.\r\n\t     *\r\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\r\n\t     */\r\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\r\n\t        /**\r\n\t         * Configuration options.\r\n\t         *\r\n\t         * @property {Mode} mode The block mode to use. Default: CBC\r\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\r\n\t         */\r\n\t        cfg: Cipher.cfg.extend({\r\n\t            mode: CBC,\r\n\t            padding: Pkcs7\r\n\t        }),\r\n\r\n\t        reset: function () {\r\n\t            var modeCreator;\r\n\r\n\t            // Reset cipher\r\n\t            Cipher.reset.call(this);\r\n\r\n\t            // Shortcuts\r\n\t            var cfg = this.cfg;\r\n\t            var iv = cfg.iv;\r\n\t            var mode = cfg.mode;\r\n\r\n\t            // Reset block mode\r\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\r\n\t                modeCreator = mode.createEncryptor;\r\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\r\n\t                modeCreator = mode.createDecryptor;\r\n\t                // Keep at least one block in the buffer for unpadding\r\n\t                this._minBufferSize = 1;\r\n\t            }\r\n\r\n\t            if (this._mode && this._mode.__creator == modeCreator) {\r\n\t                this._mode.init(this, iv && iv.words);\r\n\t            } else {\r\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\r\n\t                this._mode.__creator = modeCreator;\r\n\t            }\r\n\t        },\r\n\r\n\t        _doProcessBlock: function (words, offset) {\r\n\t            this._mode.processBlock(words, offset);\r\n\t        },\r\n\r\n\t        _doFinalize: function () {\r\n\t            var finalProcessedBlocks;\r\n\r\n\t            // Shortcut\r\n\t            var padding = this.cfg.padding;\r\n\r\n\t            // Finalize\r\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\r\n\t                // Pad data\r\n\t                padding.pad(this._data, this.blockSize);\r\n\r\n\t                // Process final blocks\r\n\t                finalProcessedBlocks = this._process(!!'flush');\r\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\r\n\t                // Process final blocks\r\n\t                finalProcessedBlocks = this._process(!!'flush');\r\n\r\n\t                // Unpad data\r\n\t                padding.unpad(finalProcessedBlocks);\r\n\t            }\r\n\r\n\t            return finalProcessedBlocks;\r\n\t        },\r\n\r\n\t        blockSize: 128/32\r\n\t    });\r\n\r\n\t    /**\r\n\t     * A collection of cipher parameters.\r\n\t     *\r\n\t     * @property {WordArray} ciphertext The raw ciphertext.\r\n\t     * @property {WordArray} key The key to this ciphertext.\r\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\r\n\t     * @property {WordArray} salt The salt used with a key derivation function.\r\n\t     * @property {Cipher} algorithm The cipher algorithm.\r\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\r\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\r\n\t     * @property {number} blockSize The block size of the cipher.\r\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\r\n\t     */\r\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\r\n\t        /**\r\n\t         * Initializes a newly created cipher params object.\r\n\t         *\r\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\r\n\t         *         ciphertext: ciphertextWordArray,\r\n\t         *         key: keyWordArray,\r\n\t         *         iv: ivWordArray,\r\n\t         *         salt: saltWordArray,\r\n\t         *         algorithm: CryptoJS.algo.AES,\r\n\t         *         mode: CryptoJS.mode.CBC,\r\n\t         *         padding: CryptoJS.pad.PKCS7,\r\n\t         *         blockSize: 4,\r\n\t         *         formatter: CryptoJS.format.OpenSSL\r\n\t         *     });\r\n\t         */\r\n\t        init: function (cipherParams) {\r\n\t            this.mixIn(cipherParams);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts this cipher params object to a string.\r\n\t         *\r\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\r\n\t         *\r\n\t         * @return {string} The stringified cipher params.\r\n\t         *\r\n\t         * @throws Error If neither the formatter nor the default formatter is set.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var string = cipherParams + '';\r\n\t         *     var string = cipherParams.toString();\r\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\r\n\t         */\r\n\t        toString: function (formatter) {\r\n\t            return (formatter || this.formatter).stringify(this);\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Format namespace.\r\n\t     */\r\n\t    var C_format = C.format = {};\r\n\r\n\t    /**\r\n\t     * OpenSSL formatting strategy.\r\n\t     */\r\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\r\n\t        /**\r\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\r\n\t         *\r\n\t         * @param {CipherParams} cipherParams The cipher params object.\r\n\t         *\r\n\t         * @return {string} The OpenSSL-compatible string.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\r\n\t         */\r\n\t        stringify: function (cipherParams) {\r\n\t            var wordArray;\r\n\r\n\t            // Shortcuts\r\n\t            var ciphertext = cipherParams.ciphertext;\r\n\t            var salt = cipherParams.salt;\r\n\r\n\t            // Format\r\n\t            if (salt) {\r\n\t                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\r\n\t            } else {\r\n\t                wordArray = ciphertext;\r\n\t            }\r\n\r\n\t            return wordArray.toString(Base64);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\r\n\t         *\r\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\r\n\t         *\r\n\t         * @return {CipherParams} The cipher params object.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\r\n\t         */\r\n\t        parse: function (openSSLStr) {\r\n\t            var salt;\r\n\r\n\t            // Parse base64\r\n\t            var ciphertext = Base64.parse(openSSLStr);\r\n\r\n\t            // Shortcut\r\n\t            var ciphertextWords = ciphertext.words;\r\n\r\n\t            // Test for salt\r\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\r\n\t                // Extract salt\r\n\t                salt = WordArray.create(ciphertextWords.slice(2, 4));\r\n\r\n\t                // Remove salt from ciphertext\r\n\t                ciphertextWords.splice(0, 4);\r\n\t                ciphertext.sigBytes -= 16;\r\n\t            }\r\n\r\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\r\n\t     */\r\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\r\n\t        /**\r\n\t         * Configuration options.\r\n\t         *\r\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\r\n\t         */\r\n\t        cfg: Base.extend({\r\n\t            format: OpenSSLFormatter\r\n\t        }),\r\n\r\n\t        /**\r\n\t         * Encrypts a message.\r\n\t         *\r\n\t         * @param {Cipher} cipher The cipher algorithm to use.\r\n\t         * @param {WordArray|string} message The message to encrypt.\r\n\t         * @param {WordArray} key The key.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {CipherParams} A cipher params object.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\r\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\r\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n\t         */\r\n\t        encrypt: function (cipher, message, key, cfg) {\r\n\t            // Apply config defaults\r\n\t            cfg = this.cfg.extend(cfg);\r\n\r\n\t            // Encrypt\r\n\t            var encryptor = cipher.createEncryptor(key, cfg);\r\n\t            var ciphertext = encryptor.finalize(message);\r\n\r\n\t            // Shortcut\r\n\t            var cipherCfg = encryptor.cfg;\r\n\r\n\t            // Create and return serializable cipher params\r\n\t            return CipherParams.create({\r\n\t                ciphertext: ciphertext,\r\n\t                key: key,\r\n\t                iv: cipherCfg.iv,\r\n\t                algorithm: cipher,\r\n\t                mode: cipherCfg.mode,\r\n\t                padding: cipherCfg.padding,\r\n\t                blockSize: cipher.blockSize,\r\n\t                formatter: cfg.format\r\n\t            });\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Decrypts serialized ciphertext.\r\n\t         *\r\n\t         * @param {Cipher} cipher The cipher algorithm to use.\r\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n\t         * @param {WordArray} key The key.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {WordArray} The plaintext.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n\t         */\r\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\r\n\t            // Apply config defaults\r\n\t            cfg = this.cfg.extend(cfg);\r\n\r\n\t            // Convert string to CipherParams\r\n\t            ciphertext = this._parse(ciphertext, cfg.format);\r\n\r\n\t            // Decrypt\r\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\r\n\r\n\t            return plaintext;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Converts serialized ciphertext to CipherParams,\r\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\r\n\t         *\r\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\r\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\r\n\t         *\r\n\t         * @return {CipherParams} The unserialized ciphertext.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\r\n\t         */\r\n\t        _parse: function (ciphertext, format) {\r\n\t            if (typeof ciphertext == 'string') {\r\n\t                return format.parse(ciphertext, this);\r\n\t            } else {\r\n\t                return ciphertext;\r\n\t            }\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Key derivation function namespace.\r\n\t     */\r\n\t    var C_kdf = C.kdf = {};\r\n\r\n\t    /**\r\n\t     * OpenSSL key derivation function.\r\n\t     */\r\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\r\n\t        /**\r\n\t         * Derives a key and IV from a password.\r\n\t         *\r\n\t         * @param {string} password The password to derive from.\r\n\t         * @param {number} keySize The size in words of the key to generate.\r\n\t         * @param {number} ivSize The size in words of the IV to generate.\r\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\r\n\t         *\r\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\r\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\r\n\t         */\r\n\t        execute: function (password, keySize, ivSize, salt) {\r\n\t            // Generate random salt\r\n\t            if (!salt) {\r\n\t                salt = WordArray.random(64/8);\r\n\t            }\r\n\r\n\t            // Derive key and IV\r\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\r\n\r\n\t            // Separate key and IV\r\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\r\n\t            key.sigBytes = keySize * 4;\r\n\r\n\t            // Return params\r\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\r\n\t        }\r\n\t    };\r\n\r\n\t    /**\r\n\t     * A serializable cipher wrapper that derives the key from a password,\r\n\t     * and returns ciphertext as a serializable cipher params object.\r\n\t     */\r\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\r\n\t        /**\r\n\t         * Configuration options.\r\n\t         *\r\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\r\n\t         */\r\n\t        cfg: SerializableCipher.cfg.extend({\r\n\t            kdf: OpenSSLKdf\r\n\t        }),\r\n\r\n\t        /**\r\n\t         * Encrypts a message using a password.\r\n\t         *\r\n\t         * @param {Cipher} cipher The cipher algorithm to use.\r\n\t         * @param {WordArray|string} message The message to encrypt.\r\n\t         * @param {string} password The password.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {CipherParams} A cipher params object.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\r\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\r\n\t         */\r\n\t        encrypt: function (cipher, message, password, cfg) {\r\n\t            // Apply config defaults\r\n\t            cfg = this.cfg.extend(cfg);\r\n\r\n\t            // Derive key and other params\r\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\r\n\r\n\t            // Add IV to config\r\n\t            cfg.iv = derivedParams.iv;\r\n\r\n\t            // Encrypt\r\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\r\n\r\n\t            // Mix in derived params\r\n\t            ciphertext.mixIn(derivedParams);\r\n\r\n\t            return ciphertext;\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Decrypts serialized ciphertext using a password.\r\n\t         *\r\n\t         * @param {Cipher} cipher The cipher algorithm to use.\r\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n\t         * @param {string} password The password.\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n\t         *\r\n\t         * @return {WordArray} The plaintext.\r\n\t         *\r\n\t         * @static\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\r\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\r\n\t         */\r\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\r\n\t            // Apply config defaults\r\n\t            cfg = this.cfg.extend(cfg);\r\n\r\n\t            // Convert string to CipherParams\r\n\t            ciphertext = this._parse(ciphertext, cfg.format);\r\n\r\n\t            // Derive key and other params\r\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\r\n\r\n\t            // Add IV to config\r\n\t            cfg.iv = derivedParams.iv;\r\n\r\n\t            // Decrypt\r\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\r\n\r\n\t            return plaintext;\r\n\t        }\r\n\t    });\r\n\t}());\r\n\r\n\r\n}));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}